import{_ as s,o as n,c as a,O as l}from"./chunks/framework.571309da.js";const p="/assets/image-20210205145238501.de2918dd.png",d=JSON.parse('{"title":"内存映射（mmap）","description":"","frontmatter":{},"headers":[],"relativePath":"articles/Linux/网络编程/进程和线程/内存映射.md","filePath":"articles/Linux/网络编程/进程和线程/内存映射.md"}'),o={name:"articles/Linux/网络编程/进程和线程/内存映射.md"},t=l('<h1 id="内存映射-mmap" tabindex="-1">内存映射（mmap） <a class="header-anchor" href="#内存映射-mmap" aria-label="Permalink to &quot;内存映射（mmap）&quot;">​</a></h1><h2 id="创建内存映射区" tabindex="-1">创建内存映射区 <a class="header-anchor" href="#创建内存映射区" aria-label="Permalink to &quot;创建内存映射区&quot;">​</a></h2><p>如果想要实现进程间通信，可以通过函数创建一块内存映射区，和管道不同的是管道对应的内存空间在内核中，<strong>而内存映射区对应的内存空间在进程的用户区（用于加载动态库的那个区域）</strong>，<strong>也就是说进程间通信使用的内存映射区不是一块，而是在每个进程内部都有一块。</strong></p><p>由于每个进程的地址空间是独立的，各个进程之间也不能直接访问对方的内存映射区，需要通信的进程需要将各自的内存映射区和同一个磁盘文件进行映射，这样进程之间就可以通过磁盘文件这个唯一的桥梁完成数据的交互了。</p><p><img src="'+p+`" alt="img"></p><p>如上图所示：磁盘文件数据可以完全加载到进程的内存映射区也可以部分加载到进程的内存映射区，当进程A中的内存映射区数据被修改了，数据会被自动同步到磁盘文件，同时和磁盘文件建立映射关系的其他进程内存映射区中的数据也会和磁盘文件进行数据的实时同步，<strong>这个同步机制保障了各个进程之间的数据共享。</strong></p><p>**使用内存映射区既可以进程有血缘关系的进程间通信也可以进程没有血缘关系的进程间通信。**创建内存映射区的函数原型如下：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">sys/mman.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 创建内存映射区</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#82AAFF;">mmap</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">addr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">size_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">length</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">prot</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">flags</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">fd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">off_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">offset</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p><code>addr</code>: 从动态库加载区的什么位置开始创建内存映射区，一般指定为 NULL, 委托内核分配</p><p><code>length</code>: 创建的内存映射区的大小（单位：字节），实际上这个大小是按照 4k 的整数倍去分配的</p><p><code>prot</code>: 对内存映射区的操作权限</p><ul><li><code>PROT_READ</code>: 读内存映射区</li><li><code>PROT_WRITE</code>: 写内存映射区</li><li>如果要对映射区有读写权限: PROT_READ | PROT_WRITE</li></ul><p>flags：</p><ul><li><code>MAP_SHARED</code>: 多个进程可以共享数据，进行映射区数据同步</li><li><code>MAP_PRIVATE</code>：映射区数据是私有的，不能同步给其他进程</li></ul><p><code>fd</code>: 文件描述符，对应一个打开的磁盘文件，内存映射区通过这个文件描述符和磁盘文件建立关联</p><p><code>offset</code>: 磁盘文件的偏移量，文件从偏移到的位置开始进行数据映射，使用这个参数需要注意两个问题：</p><ul><li>偏移量必须是 4k 的整数倍，写 0 代表不偏移</li><li>这个参数必须是大于 0 的</li></ul><p><code>返回值</code>:</p><ul><li><p>成功：返回一个内存映射区的起始地址</p></li><li><p>失败: MAP_FAILED (that is, (void *) -1)</p></li></ul><blockquote><p>mmap () 函数的参数相对较多，在使用该函数创建用于进程间通信的内存映射区的时候，各参数的指定都有一些注意事项，具体如下：</p></blockquote><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">1.</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">第一个参数</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">addr</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">指定为</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">NULL</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">即可</span></span>
<span class="line"><span style="color:#FFCB6B;">2.</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">第二个参数</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">length</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">必须要</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#FFCB6B;">3.</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">第三个参数</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">prot，进程间通信需要对内存映射区有读写权限，因此需要指定为：PROT_READ</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PROT_WRITE</span></span>
<span class="line"><span style="color:#FFCB6B;">4.</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">第四个参数</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">flags，如果要进行进程间通信,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">需要指定</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">MAP_SHARED</span></span>
<span class="line"><span style="color:#FFCB6B;">5.</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">第五个参数</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">fd，打开的文件必须大于0，进程间通信需要文件操作权限和映射区操作权限相同</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">内存映射区创建成功之后,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">关闭这个文件描述符不会影响进程间通信</span></span>
<span class="line"><span style="color:#FFCB6B;">6.</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">第六个参数</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">offset，不偏移指定为0，如果偏移必须是4k的整数倍</span></span></code></pre></div><p>内存映射区使用完之后也需要释放，释放函数原型如下：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">munmap</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">addr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">size_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">length</span><span style="color:#89DDFF;">);</span></span></code></pre></div><ul><li>addr: mmap () 的返回值，创建的内存映射区的起始地址</li><li>length: 和 mmap () 第二个参数相同即可</li><li>返回值：函数调用成功返回 0，失败返回 -1</li></ul><h2 id="进程间通信" tabindex="-1">进程间通信 <a class="header-anchor" href="#进程间通信" aria-label="Permalink to &quot;进程间通信&quot;">​</a></h2><p>操作内存映射区和操作管道是不一样的，得到内存映射区之后是直接对内存地址进行操作，管道是通过文件描述符读写队列中的数据，<strong>管道的读写是阻塞的，内存映射区的读写是非阻塞的</strong>。<strong>内存映射区创建成功之后，得到了映射区内存的起始地址，使用相关的内存操作函数读写数据就可以了。</strong></p><h3 id="有血缘关系" tabindex="-1">有血缘关系 <a class="header-anchor" href="#有血缘关系" aria-label="Permalink to &quot;有血缘关系&quot;">​</a></h3><p>由于创建子进程会发生虚拟地址空间的复制，那么在父进程中创建的内存映射区也会被复制到子进程中，这样在子进程里边就可以直接使用这块内存映射区了，所以对于有血缘关系的进程，进行进程间通信是非常简单的，处理代码如下：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">fcntl.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">sys/mman.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> buf</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1024</span><span style="color:#89DDFF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 1. 打开一个磁盘文件</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> fd </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">open</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/root/user.txt</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> O_RDWR </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> O_CREAT</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0666</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">fd </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">perror</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">open</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">exit</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">open success!</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 2. 创建内存映射区</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> m_ptr </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*)</span><span style="color:#82AAFF;">mmap</span><span style="color:#89DDFF;">(nullptr,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4096</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> PROT_READ </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> PROT_WRITE</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> MAP_SHARED</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> fd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">m_ptr </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> MAP_FAILED</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">perror</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">mmap</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">exit</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 3. 创建子进程</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">pid_t</span><span style="color:#A6ACCD;"> pid </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fork</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">pid </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">sprintf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">buf</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">我是父进程，pid为: %d</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">getpid</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">memcpy</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">m_ptr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> buf</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">strlen</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">buf</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">pid </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 子进程，读数据</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">usleep</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">  // 内存映射区不会阻塞，为了让子进程读出数据</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">从映射区读出的数据为：%s</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> m_ptr</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">munmap</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">m_ptr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4000</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">close</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">fd</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="没有血缘关系" tabindex="-1">没有血缘关系 <a class="header-anchor" href="#没有血缘关系" aria-label="Permalink to &quot;没有血缘关系&quot;">​</a></h3><p>对于没有血缘关系的进程间通信，需要在每个进程中分别创建内存映射区，但是这些进程的内存映射区必须要关联相同的磁盘文件，这样才能实现进程间的数据同步。</p><p>写进程测试代码</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">fcntl.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">sys/mman.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">sys/stat.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">sys/wait.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">unistd.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">cstdio</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">cstdlib</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">cstring</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">argc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">argv</span><span style="color:#89DDFF;">[])</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> buf</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1024</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 1. 打开一个磁盘文件</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> fd </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">open</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/root/user.txt</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> O_RDWR </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> O_CREAT</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0666</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">fd </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">perror</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">open</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">exit</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 2. 创建内存映射区</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> m_ptr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mmap</span><span style="color:#89DDFF;">(nullptr,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1024</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> PROT_READ </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> PROT_WRITE</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> MAP_SHARED</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> fd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">m_ptr </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> MAP_FAILED</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">perror</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">mmap</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">exit</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">sprintf</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">buf</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">写进程，pid: %d</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getpid</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">memcpy</span><span style="color:#89DDFF;">((</span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*)</span><span style="color:#A6ACCD;">m_ptr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> buf</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#A6ACCD;">buf</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">munmap</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">m_ptr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1024</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">close</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">fd</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>读进程测试代码</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 1. 打开一个磁盘文件</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> fd </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">open</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/root/user.txt</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> O_RDWR </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> O_CREAT</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> MAP_SHARED</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> fd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">fd </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">perror</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">open</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">exit</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 2. 创建内存映射区</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> m_ptr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mmap</span><span style="color:#89DDFF;">(nullptr,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1024</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> PROT_READ </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> PROT_WRITE</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> MAP_SHARED</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> fd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">m_ptr </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> MAP_FAILED</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">perror</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">mmap</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">exit</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 读内存映射区</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">从映射区读出的数据为：%s</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*)</span><span style="color:#A6ACCD;">m_ptr</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 释放内存映射区</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">munmap</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">m_ptr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1024</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">close</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">fd</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="拷贝文件" tabindex="-1">拷贝文件 <a class="header-anchor" href="#拷贝文件" aria-label="Permalink to &quot;拷贝文件&quot;">​</a></h2><p>使用内存映射区除了可以实现进程间通信，也可以进行文件的拷贝，使用这种方式拷贝文件可以减少程序猿的工作量，我们只需要负责创建内存映射区和打开磁盘文件，关于文件中的数据读写就无需关心了。</p><p>使用内存映射区拷贝文件思路：</p><ul><li>打开被拷贝文件，得到文件描述符 <code>f1_fd</code>，并计算出这个文件的大小 <code>f1_size</code></li><li>创建内存映射区 A 并且和被拷贝文件关联，也就是和 <code>f1_fd</code>关联起来，得到映射区地址<code> f1_ptr</code></li><li>创建新文件，得到文件描述符 <code>f2_fd</code>，用于存储被拷贝的数据，并且将这个文件大小拓展为 <code>f1_size</code></li><li>创建内存映射区 B 并且和新创建的文件关联，也就是和 <code>f2_fd</code>关联起来，得到映射区地址<code>f2_ptr</code></li><li>进程地址空间之间的数据拷贝，memcpy（f2_ptr， f1_ptr，f1_size），数据自动同步到新建文件中</li><li>关闭内存映射区，关闭文件描述符</li></ul><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 程序运行之前，保证当前文件夹下有data.txt，并写入数据</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">argc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">argv</span><span style="color:#89DDFF;">[])</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 1. 打开data.txt文件，得到文件描述符</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> f1_fd </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">open</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./data.txt</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> O_RDWR</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 计算文件大小</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> f1_size </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">lseek</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">f1_fd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> SEEK_END</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 2. 创建内存映射区，和data.txt进行关联，得到映射区起始地址</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> f1_ptr </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#82AAFF;">mmap</span><span style="color:#89DDFF;">(nullptr,</span><span style="color:#A6ACCD;"> f1_size</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> PROT_READ </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> PROT_WRITE</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> MAP_SHARED</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> f1_fd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">f1_ptr </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> MAP_FAILED</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">perror</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">mmap</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">exit</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 3. 创建一个新文件，存储拷贝的数据</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> f2_fd </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">open</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./copy.txt</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> O_RDWR </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> O_CREAT</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0666</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 将copy.txt扩展成和data.txt一样大</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">ftruncate</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">f2_fd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> f1_size</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 4. 创建一个映射区和copy.txt进行关联，得到映射区的起始地址f2_ptr</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> f2_ptr </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#82AAFF;">mmap</span><span style="color:#89DDFF;">(nullptr,</span><span style="color:#A6ACCD;"> f1_size</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> PROT_READ </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> PROT_WRITE</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> MAP_SHARED</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> f2_fd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">f2_ptr </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> MAP_FAILED</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">perror</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">mmap</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">exit</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 5. 使用memcpy拷贝映射区数据</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 这两个指针指向两块内存，都是内存映射区</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">memcpy</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">f2_ptr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> f1_ptr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> f1_size</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 6. 释放内存映射区</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">munmap</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">f1_ptr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> f1_size</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">munmap</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">f2_ptr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> f1_size</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">close</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">f1_fd</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">close</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">f2_fd</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div>`,40),e=[t];function c(r,D,y,F,A,C){return n(),a("div",null,e)}const f=s(o,[["render",c]]);export{d as __pageData,f as default};
