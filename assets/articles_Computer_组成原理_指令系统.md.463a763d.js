import{_ as p,o as t,c as e,O as a}from"./chunks/framework.571309da.js";const S=JSON.parse('{"title":"指令系统","description":"","frontmatter":{},"headers":[],"relativePath":"articles/Computer/组成原理/指令系统.md","filePath":"articles/Computer/组成原理/指令系统.md"}'),o={name:"articles/Computer/组成原理/指令系统.md"},r=a('<h1 id="指令系统" tabindex="-1">指令系统 <a class="header-anchor" href="#指令系统" aria-label="Permalink to &quot;指令系统&quot;">​</a></h1><h2 id="汇编知识" tabindex="-1">汇编知识 <a class="header-anchor" href="#汇编知识" aria-label="Permalink to &quot;汇编知识&quot;">​</a></h2><h4 id="cmp-指令" tabindex="-1">CMP 指令 <a class="header-anchor" href="#cmp-指令" aria-label="Permalink to &quot;CMP 指令&quot;">​</a></h4><p>指令格式：CMP DST, SRC</p><p>指令功能：(DST)-(SRC)</p><p>说明：CMP 指令称为比较指令，CMP指令执行一次减法运算，影响全部的状态标志，但不保存运算结果。他在使用上的要求与SUB指令完全相同</p><p>CMP指令用于比较数据的大小，但其本身并不能完成这样的比较，他只是通过设置各种条件标志来为实际的比较提供条件。</p><p>如对于两个无符号数DST 和 SRC, 若执行CMP指令后 CF=1, 则可断定DST 小于SRC; 若执行CMP指令后ZF=1, 则可断定DST 等于SRC</p><p><strong>对于无符号数只需要看CF和ZF，对于有符号数只需要看SF和OF。有符号看溢出，无符号看进位。</strong></p><p>当有符号时：</p><p>若SF=0，OF=0 则说明了此时的值为正数，没有溢出，可以直观的看出，oprd1&gt;oprd2</p><p>若SF=1，OF=0 则说明了此时的值为负数，没有溢出，则为oprd1&lt;oprd2</p><p>若SF=0，OF=1 则说明了此时的值为正数，有溢出，可以看出oprd1&lt;oprd2</p><p>若SF=1，OF=1则说明了此时的值为负数，有溢出，可以看出oprd1&gt;oprd2</p><p>最后两个可以作出这种判断的原因是，溢出的本质问题：</p><p>两数同为正，相加，值为负，则说明溢出</p><p>两数同为负，相加，值为正，则说明溢出</p><p>故有，正正得负则溢出，负负得正则溢出</p><blockquote><p>当无符号数时：</p><p>CF=1 则说明了有进位或借位，cmp是进行的减操作，故可以看出为借位，所以，此时oprd1&lt;oprd2</p><p>CF=0 则说明了无借位，但此时要注意ZF是否为0，若为0，则说明结果不为0，故此时oprd1&gt;oprd2</p></blockquote>',19),d=[r];function c(s,_,l,n,i,C){return t(),e("div",null,d)}const m=p(o,[["render",c]]);export{S as __pageData,m as default};
