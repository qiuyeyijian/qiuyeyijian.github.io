import{_ as s,o as n,c as a,U as l}from"./chunks/framework.adbdbaa5.js";const p="/assets/image-20191221200801123-1625210196932.542b8f17.png",o="/assets/image-20210710211250597.a0f39574.png",f=JSON.parse('{"title":"排序","description":"","frontmatter":{},"headers":[],"relativePath":"articles/Computer/数据结构/排序.md","filePath":"articles/Computer/数据结构/排序.md"}'),t={name:"articles/Computer/数据结构/排序.md"},e=l(`<h1 id="排序" tabindex="-1">排序 <a class="header-anchor" href="#排序" aria-label="Permalink to &quot;排序&quot;">​</a></h1><h2 id="内部排序" tabindex="-1">内部排序 <a class="header-anchor" href="#内部排序" aria-label="Permalink to &quot;内部排序&quot;">​</a></h2><p>对尚未确定最终位置的所有元素进行一遍处理称为一趟排序。绝大部分内部排序只适用于顺序存储，有的虽然可以使用链式存储，但代码实现稍微复杂。</p><p>元素移动次数、排序趟数与原始状态关系、每趟是否能确定一个元素位置。</p><h3 id="插入排序" tabindex="-1">插入排序 <a class="header-anchor" href="#插入排序" aria-label="Permalink to &quot;插入排序&quot;">​</a></h3><p>插入排序有时默认指的是直接插入排序。</p><h4 id="直接插入排序" tabindex="-1">直接插入排序 <a class="header-anchor" href="#直接插入排序" aria-label="Permalink to &quot;直接插入排序&quot;">​</a></h4><p>插入排序原理是通过构建有序序列，对于未排序数据，在已排序数据中从后向前扫描，找到相应的位置并插入。</p><p><strong>直接插入排序的排序趟数固定为n-1</strong>，变化的是元素比较和移动次数。直接插入排序更适用与基本有序和数据量不大的排序表。</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 插入排序</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">insertSort</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">len</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> len</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> temp </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> j </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 向后移动</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">j </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">j </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> temp</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">j</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">j </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">--</span><span style="color:#F07178;">j</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 插入数据</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">j</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> temp</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><table><thead><tr><th>时间复杂度</th><th>空间复杂度</th><th>稳定性</th></tr></thead><tbody><tr><td>$O(n^2)$</td><td>$O(1)$</td><td>稳定</td></tr></tbody></table><p>空间效率：仅使用了常数个辅助单元，因而空间复杂度为$O(1)$</p><p>时间效率：</p><ul><li><p>最好的情况下，待排序序列为有序序列，此时仅需要比较$n-1$次，时间复杂度$O(n)$。</p></li><li><p>最坏的情况下，<strong>待排序序列为逆序</strong>，此时需要比较$\\frac {n(n-1)} 2$，时间复杂度$O(n^2)$。</p></li><li><p>平均时间复杂度为$O(n^2)$</p></li></ul><p>稳定性：稳定。每次插入元素时总是从后向前先比较再移动，所以不会出现相同元素相对位置发生变换情况。</p><p>适用性：适用于链式和顺序存储。元素基本有序且数据量不大。</p><p><strong>直接插入排序每趟会得到有序子序列，但不能确定元素最终位置。</strong></p><h4 id="折半插入排序" tabindex="-1">折半插入排序 <a class="header-anchor" href="#折半插入排序" aria-label="Permalink to &quot;折半插入排序&quot;">​</a></h4><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 数组前面的有序部分进行二分（折半）查找定位，减少比较次数</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">binaryInsertSort</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">len</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> j</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> left</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> right</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> mid</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> temp</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> len</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    temp </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#F07178;">    left </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    right </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // arr[i]之前的有序序列进行二分查找定位</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 最后left指向待插入位置</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">left </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#F07178;"> right</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      mid </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">left </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> right</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">/</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">mid</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> temp</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        right </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> mid </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        left </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> mid </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 将arr[left...i-1]元素统一向后移动</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> j </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> j </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> left</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">--</span><span style="color:#F07178;">j</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">j</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">j </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 插入元素</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">left</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> temp</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p><strong>相对于直接插入排序，仅减少比较次数。相当于直接插入排序和二分查找相结合，使用二分查找优化直接插入排序中元素定位问题</strong></p><h4 id="希尔排序" tabindex="-1">希尔排序 <a class="header-anchor" href="#希尔排序" aria-label="Permalink to &quot;希尔排序&quot;">​</a></h4><p>因为每趟排序的间隔逐渐缩小，希尔排序也称为“缩小增量排序”。</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 希尔排序</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">shellSort</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">len</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> temp</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> j</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 第一次间隔为长度的一半，以后每次减半，最后一次为1</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> gap </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> len </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> gap </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> gap </span><span style="color:#89DDFF;">/=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 为了减少代码复杂度，不是每次处理一组，而是多组交替处理</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> gap</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> len</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">++)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      temp </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">j </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> j </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#F07178;"> gap </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">j </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> gap</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> temp</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> j </span><span style="color:#89DDFF;">-=</span><span style="color:#F07178;"> gap</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">j</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">j </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> gap</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">j</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> temp</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>空间效率：仅使用了常数个辅助单元，因而空间复杂度为$O(1)$</p><p>时间效率：希尔排序的时间复杂度依赖于增量序列函数，这涉及到数学难题。当n在某个特定的范围内时</p><ul><li><p>最好的情况下，时间复杂度$O(n^{1.3})$。</p></li><li><p>最坏的情况下，时间复杂度$O(n^2)$。</p></li><li><p>平均时间复杂度为O(n logn)~O(n^2)</p></li></ul><p>稳定性：不稳定。例如：\${2,1,1&#39;}$，第一趟取增量为2，排序后为\${1&#39;,1,2}$</p><p>适用性：算法依赖数组随机存取特性，仅适用于顺序存储。</p><h3 id="交换排序" tabindex="-1">交换排序 <a class="header-anchor" href="#交换排序" aria-label="Permalink to &quot;交换排序&quot;">​</a></h3><h4 id="冒泡排序" tabindex="-1">冒泡排序 <a class="header-anchor" href="#冒泡排序" aria-label="Permalink to &quot;冒泡排序&quot;">​</a></h4><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 冒泡排序</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">bubbleSort</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">len</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 从后向前冒泡，从小到大排序</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> len</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> j </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> len </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> j </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">--</span><span style="color:#F07178;">j</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">j </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">j</span><span style="color:#89DDFF;">])</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">swap</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">j </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">j</span><span style="color:#89DDFF;">]);</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 从前向后冒泡，从小到大排序</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /* for (int i = len - 1; i &gt; 0; --i) {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    for (int j = 0; j &lt; i; ++j) {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      if (arr[j + 1] &lt; arr[j]) {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        swap(arr[j + 1], arr[j]);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  } */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 冒泡排序优化</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">bubbleSortPro</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">len</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 从后向前冒泡</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> len </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">bool</span><span style="color:#F07178;"> flag </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> j </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> len </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> j </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> j</span><span style="color:#89DDFF;">--)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">j </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">j</span><span style="color:#89DDFF;">])</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">swap</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">j </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">j</span><span style="color:#89DDFF;">]);</span></span>
<span class="line"><span style="color:#F07178;">        flag </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">true;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#F07178;">flag</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">  // 如果本趟没有发生交换说明线性表有序</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>空间效率：仅使用了常数个辅助单元，因而空间复杂度为$O(1)$</p><p>时间效率：</p><ul><li><p>最好的情况下，待排序序列为有序序列，此时仅需要比较$n-1$次，时间复杂度$O(n)$。</p></li><li><p>最坏的情况下，<strong>待排序序列为逆序</strong>，此时需要比较$\\frac {n(n-1)} 2$，时间复杂度$O(n^2)$。</p></li><li><p>平均时间复杂度为$O(n^2)$</p></li></ul><p>稳定性：稳定。从后向前冒泡，相等的两个元素不会发生交换。</p><p><strong>冒泡排序每趟排序会产生有序子序列，确定一个元素的最终位置。</strong></p><h4 id="快速排序" tabindex="-1">快速排序 <a class="header-anchor" href="#快速排序" aria-label="Permalink to &quot;快速排序&quot;">​</a></h4><p>平均时间复杂度为$O(nlogn)$</p><blockquote><ol><li>调整序列中的元素，使当前序列最左端的元素在调整后满足左侧所有元素均不超过该元素、右侧元素均大于该元素。</li><li>对该元素的左侧和右侧分别进行递归进行第一步的调整，直到当前调整区间的长度不超过1。</li></ol></blockquote><p>选择一个pivot中心轴，一般选择左边第一个数，交替移动left 和 right 指针，二者重合之后，将pivot放到相遇的下标位置。</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 将[left, right]按照arr[left]分成两部分</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 左边都比arr[left]小，右边都比arr[left]大</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 返回中心下标</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">partition</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arr</span><span style="color:#89DDFF;">[],</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">left</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">right</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> pivot </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> arr</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">left</span><span style="color:#89DDFF;">];</span><span style="color:#676E95;font-style:italic;">  // 将arr[left] 作为主元</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">left </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> right</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">  // 只要left和right不相遇</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 反复左移right直到找到一个元素比pivot小</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">left </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> right </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">right</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> pivot</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> right</span><span style="color:#89DDFF;">--;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 将找到的元素移到左边</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">left</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">right</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 再反复右移left直到找到一个元素比pivot大</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">left </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> right </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">left</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#F07178;"> pivot</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> left</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 将该元素移动到右边</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">right</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">left</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // left 和 right相遇，则将pivot元素放到该位置下，一轮快排结束</span></span>
<span class="line"><span style="color:#A6ACCD;">  arr</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">left</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pivot</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> left</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">  // left和right相遇的地方就是中心下标</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 快读排序， left和right初始值为序列的首尾下标</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">quickSort</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arr</span><span style="color:#89DDFF;">[],</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">left</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">right</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 递归边界，left&gt;=right说明此时区间不能再分了</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">left </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> right</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 将[left, right]按照arr[left]分成两部分</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 左边都比arr[left]小，右边都比arr[left]大</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 然后对这两部分递归再次划分，每划分一次都能确定一个元素的最终位置</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> pos </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">partition</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> left</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> right</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 对左边区间进行递归快速排序</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">quickSort</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> left</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> pos </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 对右边区间进行递归快速排序</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">quickSort</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> pos </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> right</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//  </span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">quickSort</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">vector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C792EA;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">left</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">right</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 递归中断条件</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">left </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> right</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 选取最后一位作为主元值</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> pivot </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> arr</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">right</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> index </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> left</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 遍历[left, right-1]区间，将比pivot小的元素移动到左边</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> left</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> right</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> pivot</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">swap</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">index</span><span style="color:#89DDFF;">++],</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">]);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // index左边的元素都比pivot小，arr[index]&gt;=pivot</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 将pivot移动到index位置，这也是pivot最终位置</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">swap</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">index</span><span style="color:#89DDFF;">],</span><span style="color:#A6ACCD;"> arr</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">right</span><span style="color:#89DDFF;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">quickSort</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> left</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> index </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">quickSort</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> index </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> right</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 快速排序的简单实现，但是不满足一趟排序定位一个元素的最终位置</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">quickSort</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">vector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C792EA;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">left</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">right</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">left </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> right</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // pivot可以选择数组内的任意元素</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> l </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> left </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> r </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> right </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> pivot </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> arr</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">left </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> right </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">l </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> r</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[++</span><span style="color:#F07178;">l</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> pivot</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[--</span><span style="color:#F07178;">r</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> pivot</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">l </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> r</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">swap</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">l</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">r</span><span style="color:#89DDFF;">]);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // r和r左边的元素都比pivot小，所以选择r为分界点</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 对于l来说，不一定</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">quickSort</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> left</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> r</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">quickSort</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> r </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> right</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>空间效率：由于快速排序是递归的，需要借助一个递归工作站保存每层递归调用的必要信息，其容量与递归调用的最大深度一致。最好的情况下为$O(log_2n)$，最坏的情况下，因为要进行n-1次递归调用，所以栈的深度为$O(n)$，平均情况下栈的深度为$O(log_2n)$。</p><p>时间效率：</p><ul><li><p>最好的情况下，每次都能平衡划分，即pivot元素在序列的中间部分。此时时间复杂度$O(nlogn)$。</p></li><li><p><strong>最坏的情况下，待排序序列基本有序或者逆序</strong>，此时每次划分都是极不平衡的，栈需要递归n-1次，时间复杂度$O(n^2)$。</p></li><li><p>平均时间复杂度为$O(nlogn)$</p></li></ul><p>稳定性：不稳定。例如$3,2&#39;,2$，选取左边第一个元素为pivot，则第一趟排序后为$2,2&#39;,3$，最终排序也为$2,2&#39;,3$。</p><p>**快速排序是所有内部排序算法中平均性能最优的排序算法。**其他排序算法如堆排序，归并排序时间复杂度虽然也为$O(nlogn)$，但是面对数据量比较大，排序趟数比较多时，$nlogn$前面的系数往往比快速排序大。</p><p>**快速排序每一趟不产生有序子序列，但是每一趟排序后会将枢纽（pivot）元素放到其最终位置上，即每一趟均会确定一个元素的最终位置。**这是个很重要的命题点。</p><h3 id="选择排序" tabindex="-1">选择排序 <a class="header-anchor" href="#选择排序" aria-label="Permalink to &quot;选择排序&quot;">​</a></h3><h4 id="简单选择排序" tabindex="-1">简单选择排序 <a class="header-anchor" href="#简单选择排序" aria-label="Permalink to &quot;简单选择排序&quot;">​</a></h4><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 选择排序</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">selectSort</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arr</span><span style="color:#89DDFF;">[],</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">len</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // for (int i = 0; i &lt; len - 1; ++i) {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  //   for (int j = i + 1; j &lt; len; ++j) {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  //     if (arr[i] &gt; arr[j]) {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  //       int temp = arr[j];</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  //       arr[j] = arr[i];</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  //       arr[i] = temp;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  //     }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  //   }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // }</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 下面的实现可以比上面减少交换次数</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> min</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> len </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    min </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">  // 默认当前元素为最小</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> j </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> j </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> len </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">j</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 只要遇到比arr[min]小的元素，就更新min的值</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">j</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">min</span><span style="color:#89DDFF;">])</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        min </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> j</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 如果min值发生和改变，就交换两元素的值</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 这个思想在堆排序也有应用</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">min </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">swap</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">min</span><span style="color:#89DDFF;">]);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>空间效率：仅使用了常数个辅助单元，因而空间复杂度为$O(1)$</p><p>时间效率：</p><p>简单选择排序在序列基本有序的情况下元素移动的次数较少，但是比较次数和序列的初始状态无关，因此时间复杂度始终是$O(n^2)$。</p><p>稳定性：不稳定。如$2,2&#39;,1$，第一趟排序时为$1,2&#39;,2$，最终排序结果也为$1,2&#39;,2$。</p><p><strong>简单选择排序每趟会产生有序子序列，确定一个元素的最终位置。</strong></p><h4 id="堆排序" tabindex="-1">堆排序 <a class="header-anchor" href="#堆排序" aria-label="Permalink to &quot;堆排序&quot;">​</a></h4><p><a href="https://www.bilibili.com/video/BV1fp4y1D7cj" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1fp4y1D7cj</a></p><p>堆具有以下特点：</p><ul><li>完全二叉树</li><li>大顶堆：每个结点的值都大于或等于其左右子树结点的值</li><li>小顶堆：每个结点的值都小于或等于其左右孩子结点的值</li></ul><p>由于堆本质是一棵完全二叉树，则可以用数组arr[n]存储。对于第i个元素，有以下性质：</p><ul><li>arr[i]的左孩子arr[i*2 + 1]</li><li>arr[i]的右孩子arr[i*2 + 2]</li><li>arr[i]的父结点arr[(i-1)/2]</li></ul><p>堆排序有两个关键点，第一是建堆，第二是堆排序，这两个过程都需要<code>heapify()</code>函数调整堆。</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 维护堆</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">arr</span><span style="color:#676E95;font-style:italic;"> 存储堆的数组</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">len</span><span style="color:#676E95;font-style:italic;"> 数组长度</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">pos</span><span style="color:#676E95;font-style:italic;"> 待维护结点位置下标</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * swap()是c++ </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">heapify</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">len</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">pos</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> largest </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pos</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> lson </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pos </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> rson </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pos </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 找到左右孩子中比父结点大的结点下标，并存储在largest中</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">lson </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> len </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> arr</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">largest</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> arr</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">lson</span><span style="color:#89DDFF;">])</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    largest </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> lson</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rson </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> len </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> arr</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">largest</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> arr</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">rson</span><span style="color:#89DDFF;">])</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    largest </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> rson</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 如果largest的值没有发生了变化，说明不需要维护堆</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 否则交换父结点与arr[largest]的值，并递归继续维护堆</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">largest </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> pos</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 交换两个元素</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">swap</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">largest</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">pos</span><span style="color:#89DDFF;">]);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 继续向下维护堆</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">heapify</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">arr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> len</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> largest</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 堆排序</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">heapSort</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">len</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 建堆，时间复杂度O(n)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 找到堆最后一个元素的父结点，向前逐个调整堆</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // len/2-1 是由最后一个元素父结点公式 ((len-1)-1)/2 得到的</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> len </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">heapify</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">arr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> len</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 排序</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 每一趟均会确定一个元素的最终位置，堆的大小减1</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> len </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 将根结点和堆最后一个元素交换位置</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">swap</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 维护根结点，注意此时数组长度为i</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 也就是每确定一个元素最终位置，数组长度减1</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">heapify</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">arr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>空间效率：仅使用了常数个辅助单元，因而空间复杂度为$O(1)$</p><p>时间效率：</p><ol><li><p>在建立含有n个元素的堆时，关键字的比较次数不超过4n（证明用到了级数），时间复杂度为$O(n)$</p></li><li><p>堆排序时，以大顶堆为例，根结点一定是最大的元素。将根结点元素和最后一个元素交换，重新调整堆，需要进行进行n-1次。每次调整时间复杂度为$O(logn)$，则总的时间复杂度为$O(nlogn)$。</p></li></ol><p>稳定性：不稳定。</p><p><strong>堆排序每趟会产生有序子序列，确定一个元素的最终位置。</strong></p><blockquote><p>插入法建堆过程和筛选法不太一样，<strong>插入法在插入一个新元素是，只和父结点比较，无需和兄弟结点比较</strong>，如果大于父结点则上调一层，比较一次。一般题目给出一个已经建好的堆，插入一个新元素时，求比较次数用的是插入法。</p></blockquote><h3 id="归并排序" tabindex="-1">归并排序 <a class="header-anchor" href="#归并排序" aria-label="Permalink to &quot;归并排序&quot;">​</a></h3><p><a href="https://segmentfault.com/a/1190000021734148" target="_blank" rel="noreferrer">https://segmentfault.com/a/1190000021734148</a></p><p>归并排序时间复杂度为$O(nlogn)$</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mergeSort</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">vector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C792EA;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">left</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">right</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">left </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> right</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 获取中间位置</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> mid </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">left </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> right</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">mergeSort</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> left</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> mid</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">mergeSort</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> mid </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> right</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 定义临时辅助数组</span></span>
<span class="line"><span style="color:#A6ACCD;">  vector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">tmp</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">right </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> left </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> left</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> j </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> mid </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> index </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> mid </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> j </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> right</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">tmp</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">index</span><span style="color:#89DDFF;">++]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">j</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">++]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">j</span><span style="color:#89DDFF;">++];</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 如果有剩余元素，直接拷贝</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> mid</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> tmp</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">index</span><span style="color:#89DDFF;">++]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> arr</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++];</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">j </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> right</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> tmp</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">index</span><span style="color:#89DDFF;">++]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> arr</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">j</span><span style="color:#89DDFF;">++];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 将合并后的序列拷贝回arr</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">copy</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">tmp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">begin</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> tmp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">begin</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> left</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>空间效率：仅使用了和序列等长的辅助数组，因而空间复杂度为$O(n)$</p><p>时间效率：每趟归并的时间复杂度为$O(n)$，共需要$\\lceil log_2n \\rceil$趟归并，所以时间复杂度$O(nlogn)$</p><p>稳定性：稳定。</p><p>此处可联想到外排序中的多路平衡归并，<strong>做m路平衡归并时，如果有r个初始归并段，则需要归并的趟数为$\\lceil log_m r \\rceil$。</strong></p><h3 id="非比较排序" tabindex="-1">非比较排序 <a class="header-anchor" href="#非比较排序" aria-label="Permalink to &quot;非比较排序&quot;">​</a></h3><h4 id="计数排序" tabindex="-1">计数排序 <a class="header-anchor" href="#计数排序" aria-label="Permalink to &quot;计数排序&quot;">​</a></h4><p>计数排序（Counting Sort）核心思想是将待排序数组元素的值转化为计数数组的索引值，从而间接地使得待排序序列有序。</p><h4 id="桶排序" tabindex="-1">桶排序 <a class="header-anchor" href="#桶排序" aria-label="Permalink to &quot;桶排序&quot;">​</a></h4><p>桶排序（Bucket Sort），也称为箱排序。桶排序体现了分治法的思想，其基本思想是将待排序数组分配到若干个桶内，然后在每个桶内各自进行排序，桶内的排序可以使用不同的算法，比如直接插入排序或快速排序。每个桶执行完成后，依次将桶内有序序列取出来，即可得到完整的排序结果。</p><h4 id="基数排序" tabindex="-1">基数排序 <a class="header-anchor" href="#基数排序" aria-label="Permalink to &quot;基数排序&quot;">​</a></h4><p>基数排序（Radix Sort）将整数或字符串切分成多个数字或字符，然后对对应位置的数字或字符分别进行比较。</p><p>基数排序可以基于计数排序的方式也可以基于桶的方式实现。基于计数排序的实现方式比较巧妙，基于桶的实现方式比较常见。</p><p>MSD：首先根据关键字权重划分各个子序列（称为桶），对各个桶递归使用MSD</p><p>LSD：采用分配-收集模式，一般对整数排序使用的就是这种模式。</p><p>对于基数排序而言，很重要的一点就是按位排序时必须是稳定的，这也保证了基数排序的稳定性。</p><h3 id="内排序算法的各种指标比较" tabindex="-1">内排序算法的各种指标比较 <a class="header-anchor" href="#内排序算法的各种指标比较" aria-label="Permalink to &quot;内排序算法的各种指标比较&quot;">​</a></h3><table><thead><tr><th>排序方法</th><th>时间复杂度（平均）</th><th>时间复杂度（最好）</th><th>时间复杂度（最坏）</th><th>空间复杂度</th><th>稳定性</th><th>每一趟是否会确定一个元素位置</th><th>排序趟数与原始状态</th></tr></thead><tbody><tr><td>冒泡排序</td><td>$$ O(n^{2})$$</td><td>$$ O(n)$$</td><td>$$O(n^{2})$$</td><td>O(1)</td><td>稳定</td><td>会</td><td>有关</td></tr><tr><td>简单选择排序</td><td>$$ O(n^{2})$$</td><td>$$O(n^{2})$$</td><td>$$O(n^{2})$$</td><td>O(1)</td><td>稳定</td><td>会</td><td>无关</td></tr><tr><td>直接插入排序</td><td>$$O(n^{2})$$</td><td>$$ O(n)$$</td><td>$$O(n^{2})$$</td><td>O(1)</td><td>稳定</td><td>会生成有序子序列，但不会确定最终位置</td><td>无关，n-1趟</td></tr><tr><td>希尔排序</td><td>O(n logn)~O(n^2)</td><td>O(n^1.3)</td><td>$$O(n^{2})$$</td><td>O(1)</td><td>不稳定</td><td>不会</td><td>无关</td></tr><tr><td>堆排序</td><td>O(n logn)</td><td>O(n logn)</td><td>O(n logn)</td><td>O(1)</td><td>不稳定</td><td>会</td><td>无关</td></tr><tr><td>归并排序</td><td>O(n logn)</td><td>O(n logn)</td><td>O(n logn)</td><td>O(n)</td><td>稳定</td><td>会生成有序子序列，但不会确定最终位置</td><td>无关</td></tr><tr><td>快速排序</td><td>O(n logn)</td><td>O(n logn)</td><td>$$O(n^{2})$$</td><td>O(logn)~O(n)</td><td>不稳定</td><td>会</td><td></td></tr><tr><td>下面是非比较排序</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>计数排序</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td>稳定</td><td></td><td></td></tr><tr><td>桶排序</td><td>$O(n+k)$</td><td>$O(n)$</td><td>$O(n^2)$</td><td>$O(n+k)$</td><td>稳定</td><td></td><td></td></tr><tr><td>基数排序</td><td>$O(n*k)$</td><td>$O(n*k)$</td><td>$O(n*k)$</td><td>$O(n+k)$</td><td>稳定</td><td></td><td>无关</td></tr></tbody></table><p>不稳定算法：<strong>简希快，堆成堆</strong>（捡锡块，堆成堆）</p><p>在待排序序列基本有序的前提下，直接插入排序和冒泡排序效率最高，可达到$O(n)$，在待排序序列基本逆序的情况下，直接插入排序效率最低。</p><p>在待排序序列基本有序或逆序的前提下，快速排序效率都降低到$O(n^2)$，快速排序适用于元素基本无序的情况。</p><p><img src="`+p+'" alt="image-20191221200801123"></p><h4 id="为什么快速排序优于堆排序" tabindex="-1">为什么快速排序优于堆排序 <a class="header-anchor" href="#为什么快速排序优于堆排序" aria-label="Permalink to &quot;为什么快速排序优于堆排序&quot;">​</a></h4><p>**堆排序数据访问的方式没有快速排序友好。**对于快速排序来说，数据是顺序访问的。对于堆排序来说，数据是跳着访问的。</p><p>比如堆排序的堆化过程中，对堆顶进行堆化会依次访问数组下标是 1，2，4，8 的元素，而不是像快速排序那样，局部顺序访问，所以，这样对 CPU 缓存是不友好的。</p><p>**对于同样的数据，在排序过程中，堆排序算法的数据交换次数要多于快速排序。**排序有有序度和逆序度的概念。对于基于比较的排序算法来说，整个排序过程就是由两个基本的操作组成的，比较和交换（或移动）。</p><p>快速排序数据交换的次数不会比逆序度多。而堆排序的第一步是建堆，建堆的过程会打乱数据原有的相对先后顺序，导致原数据的有序度降低。比如对于一组已经有序的数据来说，经过建堆之后，数据反而变得更无序了。</p><h2 id="外部排序" tabindex="-1">外部排序 <a class="header-anchor" href="#外部排序" aria-label="Permalink to &quot;外部排序&quot;">​</a></h2><h3 id="存储器与缓冲区" tabindex="-1">存储器与缓冲区 <a class="header-anchor" href="#存储器与缓冲区" aria-label="Permalink to &quot;存储器与缓冲区&quot;">​</a></h3><p>存储器按照存取方式分为：随机存储器（RAM）、只读存储器（ROM）、顺序存取存储器（磁带）、直接存取存储器（磁盘、光盘）。RAM和ROM主要用于内存，磁盘和磁带主要用于外存，接下来主要讨论外存的磁盘排序。</p><blockquote><p>随机存取就是直接存取，可以通过下标直接访问的那种数据结构，与存储位置无关，例如数组。非随机存取</p></blockquote><p>使用文件进行数据处理的基本单位叫做逻辑记录（简称记录）。而在磁带或者磁盘进行物理存储的记录叫做物理记录，它是操作系统一次可读写的存储单位。</p><p>对磁盘存来说，从大到小的存储单位是盘片组、柱面、磁道和扇区。 $$ 盘片组的容量 = 等于该盘片的柱面数 \\times 每个柱面磁道数 \\times 每个磁道字节数 $$ 一个磁道可以划分若干扇区，一个扇区就是一次读写的最小数据量，每个扇区中包含相同的数据量。磁盘一次读写操作访问一个扇区，称为访问&quot;一页&quot;或&quot;一块&quot;，又称为&quot;一次访外&quot;。</p><p>为了实现磁盘的读写操作，在内存中需要开辟一些区域，用以存放需要从磁盘读入的信息，或存放需要写出的信息。这些内存区域成为缓冲区，存入缓冲区的信息称为缓冲信息。</p><p><strong>一个缓冲区的大小应与操作系统一次读写的块的大小相适应。如果不匹配就会造成空间浪费。</strong></p><p>每个缓冲区的构造是一个先进先出的队列。对于输入缓冲区，如果队满就需要停止输入，处理存放于缓冲区中的数据，待数据处理完之后清空缓冲区，重新开始向该缓冲区存入数据。</p><h3 id="基于磁盘的外排序" tabindex="-1">基于磁盘的外排序 <a class="header-anchor" href="#基于磁盘的外排序" aria-label="Permalink to &quot;基于磁盘的外排序&quot;">​</a></h3><p>对于以文件形式存放于磁盘存储器上的数据进行外排序是，一般使用<strong>归并排序</strong>的方法。它的特点是对所有待排序的数据元素顺序存取，顺序比较，其他排序方法没有这个特点。</p><p><strong>外排序主要分为两个阶段：</strong></p><ol><li>生成初始归并段：建立为内存缓冲区，根据缓冲区大小将输入文件划分为若干段， 分段读入内存。用某种内排序方法，如堆排序，对各段进行排序。这些经过排序的段叫做<strong>初始归并段</strong>（又称初始顺串，runs）。将这些初始归并段写到外存文件上。</li><li>多趟归并排序：对第一阶段产生的初始归并段进行多遍归并，使得有序的归并段逐渐扩大，最后在外存上形成整个文件的单一归并段，至此完成了对这个文件的外排序。</li></ol><p>归纳起来，影响磁盘排序时间性能的主要有两个原因：</p><ol><li>读写记录次数</li><li>关键字比较次数</li></ol><blockquote><p>不同于内排序，磁盘排序中元素的移动次数相对于上述两个因素可以忽略，，所以一般不考虑元素移动的开销。</p></blockquote><p>所以接下来要介绍的三个算法均是为了减少上述两个因素的影响而设计的。</p><ul><li><strong>败者树：减少关键字的比较次数</strong></li><li><strong>置换选择排序：减少初始归并段的个数</strong></li><li><strong>多路平衡归并：降低归并趟数</strong></li><li><strong>最佳归并树：给出最佳归并方案，减少读磁盘次数</strong></li></ul><h3 id="败者树" tabindex="-1">败者树 <a class="header-anchor" href="#败者树" aria-label="Permalink to &quot;败者树&quot;">​</a></h3><p>败者树（tree of loser）是一棵完全二叉树，<strong>其中叶子结点存储参与归并的记录，分支结点存放关键字对应的段号。</strong></p><p>败者树是两两比较，败者所在<strong>段号</strong>记录父结点，胜者继续向上层比较。一般可以设置$\\infty$作为段结束标志，这样如果某段提前比较完毕，那么$\\infty$该段可继续参与比较，但是$\\infty$始终停留在叶结点。直到所有叶结点都为$\\infty$，则所有元素都比较完毕。这样可以保证败者树的结构。</p><p><strong>描述m路归并的败者树的高度为$ \\lceil log_2 m \\rceil$ （不计入叶结点），在每次调整时，找到下一个具有最小排序码记录时，最多做$\\lceil log_2 m \\rceil $次比较。</strong></p><p>如果多路平衡归并和置换选择排序基于败者树实现，可以减少关键字比较次数，从而提高算法身效率。</p><h3 id="多路平衡归并" tabindex="-1">多路平衡归并 <a class="header-anchor" href="#多路平衡归并" aria-label="Permalink to &quot;多路平衡归并&quot;">​</a></h3><p>多路平衡归并，又称为m路平衡归并：每一趟从r个归并段中得到$\\lceil \\frac r m \\rceil$个归并段。如果说r不能被m整除，则多余的归并段参与下趟归并。</p><p><strong>做m路平衡归并时，如果有r个初始归并段，则需要归并的趟数为$\\lceil log_m r \\rceil$。</strong></p><p><strong>可以看到，当初时归并段一定时，m路归并的好处在于减少归并趟数，从而减少访问外存次数。</strong></p><p>做内归并时，在m个记录中选择最小者，需要顺序比较m-1次。每趟归并n个记录需要做$(n-1) \\times (m-1) $次比较，S趟归并总共需要的比较次数为 $$ S\\times(n-1)\\times(m-1) = \\lceil log_mr\\rceil \\times (n-1)\\times(m-1) $$ 利用换底公式$log_m r = \\frac {log_2 r} {log_2 m} $，可得S趟归并总共需要比较次数大约为 $$ log_2 r \\times (n-1) \\times (m-1) / (log_2 m) $$ 其中的$log_2 r \\times (n-1)$在初始归并段个数r与记录数n一定时是一个常数，而$(m-1)/log_2 m$ 在m增大时趋于无穷大。<strong>因此增大归并路数m，会使得内部归并时间增大，当m增大到一定程度，就可能抵消由于读写磁盘次数减少而带来的好处。</strong></p><h4 id="基于败者树" tabindex="-1">基于败者树 <a class="header-anchor" href="#基于败者树" aria-label="Permalink to &quot;基于败者树&quot;">​</a></h4><p>利用败者树，在m个记录选择最小者，只需要$O(log_2 m)$次比较，每趟归并n个记录需要做$(n-1) \\times \\lceil log_2m \\rceil $次比较，S趟归并总共需要的比较次数为 $$ \\begin{aligned} S \\times (n-1) \\times \\lceil log_2 m \\rceil &amp; = \\lceil log_mr\\rceil \\times (n-1)\\times\\lceil log_2 m\\rceil \\ &amp; \\approx \\lceil log_2 r \\rceil \\times (n-1) \\times \\frac {log_2 m} {log_2 m} \\ &amp; = \\lceil log_2 r \\rceil \\times (n-1) \\end{aligned} $$ 这样，排序码的比较次数与m无关，总的内部归并时间不会随着m的增大而增大。<strong>因此，如果基于败者树，只要内存空间允许，增大归并路数m，将有效减少归并趟数，从而减少读写磁盘次数，提高外排序的速度。</strong></p><h3 id="置换-选择排序" tabindex="-1">置换-选择排序 <a class="header-anchor" href="#置换-选择排序" aria-label="Permalink to &quot;置换-选择排序&quot;">​</a></h3><p>为了减少读写磁盘次数，除了增加归并路数m外，还可以减少初始归并段的个数r。在总记录数一定时，要想减少r，必须增加初始归并段的长度。为此可采用<strong>置换-选择排序</strong>算法。**在使用同样大小的内存工作区的情况下，生成的初始归并段长度平均是原来的2倍。**从而减少初始归并段个数，降低归并趟数。</p><blockquote><p>设内存工作区可容纳w个记录，则采用置换-选择排序可生成平均长度为2w的初始归并段。</p></blockquote><p>若输入文件有n个记录，基于败者树，每次选择当前最小记录，需要时间为$O(log_2w)$，对所有n个记录都处理一次，所需时间为$O(nlog_2w)$ 。</p><h4 id="执行过程" tabindex="-1">执行过程 <a class="header-anchor" href="#执行过程" aria-label="Permalink to &quot;执行过程&quot;">​</a></h4><p>反复执行下面三步：</p><ol><li>输出：选择当前内存区域最小的元素输出，然后补充相应位置元素。</li><li>冻结：如果当前内存区域元素比上次输出元素小则冻结该元素，选择次小元素输出。</li><li>解冻：如果内存所有元素均冻结，则表明一个初始归并段已经生成。解冻所有元素，开始下一个归并段的生成。</li></ol><h3 id="最佳归并树" tabindex="-1">最佳归并树 <a class="header-anchor" href="#最佳归并树" aria-label="Permalink to &quot;最佳归并树&quot;">​</a></h3><p>一般地，设参加归并排序的初始归并段的个数为r，做m路平衡归并排序，归并树是描述归并过程且结点只有度为0和度为m的严格m叉树。</p><p>最佳归并树是哈弗曼树的扩展，是带权路径最小的扩充m叉树。</p><blockquote><p>外结点（叶结点）：参加归并的各初始归并段。</p><p>内结点（非叶结点）：每次做m路归并得到的中间结点。</p><p>结点权重：归并段的长度（所包含物理记录数）。</p></blockquote><p>设WPL是归并树的带权路径长度，则归并过程中的I/O次数为 $$ I/O次数 = 2 \\times WPL $$</p><p>设度为0的结点有$r_0$个，度为m的结点有$r_m$个，则根据数的基本性质：<strong>结点数等于所有结点度之和加1</strong> $$ r_0 + r_m = r + r_m = 0 \\times r_0 + m \\times r_m + 1 \\ 化简得：r_m = (r - 1) / (m - 1) $$ <strong>令$u = (r-1) % (m - 1)$</strong></p><ul><li>若$u = 0$，这说明正好可以构造严格m叉树，不需要补充虚段数</li><li>若$u \\neq 0$，说明多出了u个结点，不能被$(m-1)$整除，则需要补充$(m - u - 1)$个虚段数</li></ul><h3 id="刷题小知识" tabindex="-1">刷题小知识 <a class="header-anchor" href="#刷题小知识" aria-label="Permalink to &quot;刷题小知识&quot;">​</a></h3><h4 id="多路平衡树" tabindex="-1">多路平衡树 <a class="header-anchor" href="#多路平衡树" aria-label="Permalink to &quot;多路平衡树&quot;">​</a></h4><p>多路平衡归并的两个阶段，每个阶段的工作</p><blockquote><ul><li>第一阶段，生成初始归并段：根据内存工作区的大小，将有n个记录的磁盘文件分批读入内存，采用有效的内排序方法进行排序，生成若干有序子文件，即初始归并段。</li><li>第二阶段，多趟归并排序：采用多路归并的方法将这些归并段逐趟归并，最后归并成一个有序文件。</li></ul></blockquote><p>对n个记录做m路平衡归并排序，在内存工作区可容纳k个记录的情况下，可以生成归并段的个数为$r = \\lceil n/k \\rceil$</p><blockquote><p>每个初始归并段的大小与内存工作区的容量相等，它是在内存中采用某种内排序方法进行排序得到的。</p></blockquote><p>已知输入文件中有n个记录，放在p个物理块中，设初始归并段r，做m路平衡归并排序，总的I/O次数是多少？</p><blockquote><p>一共需要$s = \\lceil log_m r \\rceil$趟归并。</p><ul><li>第一阶段，生成初始归并段：需要将所有记录都处理一遍，读写2p块。</li><li>第二阶段，多趟归并排序：每趟都需要将所有记录处理一遍，读写2p块。</li></ul><p>则总的读写次数为：$2p + 2p \\times \\rceil log_m r \\rceil$。</p></blockquote><h4 id="置换-选择排序-1" tabindex="-1">置换-选择排序 <a class="header-anchor" href="#置换-选择排序-1" aria-label="Permalink to &quot;置换-选择排序&quot;">​</a></h4><p>当输入文件中所有记录已经按排序码大小递减排列，即$k_1 \\geq k_2 \\geq ··· \\geq k_{n-1} \\geq k_n$，且可用呢村缓冲区空间大小为w，这时使用置换-选择排序产生的输出是什么？</p><blockquote><p>除了最后一个初始归并段外，其他初始归并段长度都是w。全部初始归并段个数为$\\lceil n / w \\rceil$，最后一个初始归并段的长度为$n - \\lceil n / w \\rceil$。（我们要求初始归并段中元素从小到大排序）所以这是最坏的情况。</p></blockquote><p>当输入文件中所有记录已经按排序码大小递增排列，即$k_1 \\leq k_2 \\leq ··· \\leq k_{n-1} \\leq k_n$，且可用呢村缓冲区空间大小为w，这时使用置换-选择排序产生的输出是什么？</p><blockquote><p>只产生一个初始归并段，其长度与输入记录个数n相同。</p></blockquote><h4 id="并行操作的缓冲区处理" tabindex="-1">并行操作的缓冲区处理 <a class="header-anchor" href="#并行操作的缓冲区处理" aria-label="Permalink to &quot;并行操作的缓冲区处理&quot;">​</a></h4><p>如果采用m路并对m个归并段进行归并，至少需要m个输入缓冲区，和1个输出缓冲区。每个缓冲区存放一个块的信息。</p><p><strong>如果同时进行输入、内部归并、和输出操作，则必须设置2m个输入缓冲区和2个输出缓冲区。</strong></p><blockquote><p>做m路归并。需要有m个输入缓冲区和1个输出缓冲区参与，每个输入缓冲区存放对应归并段当前参加归并的一个物理块。</p><p>为了使得输入与内部归并并行执行，需要再设置m个输入缓冲区，在对那m个输入缓冲区的记录做归并的同时，把对应归并段下个物理块输入内存空闲的m个输入缓冲区中。</p><p>此外为了使得内部归并与输出并行执行，需要再设置一个输出缓冲区，在一个输出缓冲区已满向外输出的同时，可以向另外一个输出缓冲区存放归并记录。</p></blockquote><p>缓冲区的分配应该是动态的，可以根据需要位某一归并段分配缓冲区。但不论如何，每个归并段至少需要一个输入缓冲区，用以存放该归并段记录。</p><p><img src="'+o+'" alt="image-20210710211250597"></p>',164),r=[e];function c(y,D,F,i,C,A){return n(),a("div",null,r)}const h=s(t,[["render",c]]);export{f as __pageData,h as default};
