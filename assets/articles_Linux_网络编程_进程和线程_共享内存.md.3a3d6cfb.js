import{_ as s,v as a,b as n,R as l}from"./chunks/framework.53249f15.js";const p="/assets/image-20200223112227101.f81e78b2.png",d=JSON.parse('{"title":"共享内存","description":"","frontmatter":{},"headers":[],"relativePath":"articles/Linux/网络编程/进程和线程/共享内存.md","filePath":"articles/Linux/网络编程/进程和线程/共享内存.md"}'),o={name:"articles/Linux/网络编程/进程和线程/共享内存.md"},t=l(`<h1 id="共享内存" tabindex="-1">共享内存 <a class="header-anchor" href="#共享内存" aria-label="Permalink to &quot;共享内存&quot;">​</a></h1><p>共享内存不同于内存映射区，它不属于任何进程，并且不受进程生命周期的影响。</p><p>通过调用 Linux 提供的系统函数就可得到这块共享内存。使用之前需要让进程和共享内存进行关联，得到共享内存的起始地址之后就可以直接进行读写操作了，进程也可以和这块共享内存解除关联，解除关联之后就不能操作这块共享内存了。<strong>在所有进程间通信的方式中共享内存的效率是最高的。</strong></p><blockquote><p>共享内存操作默认不阻塞，如果多个进程同时读写共享内存，可能出现数据混乱，共享内存需要借助其他机制来保证进程间的数据同步，比如：信号量，共享内存内部没有提供这种机制。</p></blockquote><h2 id="创建-打开共享内存" tabindex="-1">创建/打开共享内存 <a class="header-anchor" href="#创建-打开共享内存" aria-label="Permalink to &quot;创建/打开共享内存&quot;">​</a></h2><h3 id="shmget" tabindex="-1">shmget <a class="header-anchor" href="#shmget" aria-label="Permalink to &quot;shmget&quot;">​</a></h3><p>在使用共享内存之前必须要先做一些准备工作，如果共享内存不存在就需要先创建出来，如果已经存在了就需要先打开这块共享内存。不管是创建还是打开共享内存使用的函数是同一个，函数原型如下:</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">sys/ipc.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">sys/shm.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">shmget</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">key_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">size_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">size</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">shmflg</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p><code>key</code>：类型 key_t 是个整形数，通过这个key可以创建或者打开一块共享内存，该参数的值一定要大于0</p><p><code>size</code>: 创建共享内存的时候，指定共享内存的大小，如果是打开一块存在的共享内存，size 是没有意义的</p><p><code>shmflg</code>：创建共享内存的时候指定的属性</p><ul><li><code>IPC_CREAT</code>: 创建新的共享内存，如果创建共享内存，需要指定对共享内存的操作权限，比如：<code>IPC_CREAT | 0664</code></li><li><code>IPC_EXCL</code>: 检测共享内存是否已经存在了，必须和<code>IPC_CREAT</code>一起使用</li></ul><p><code>返回值</code>：共享内存创建或者打开成功返回标识共享内存的唯一的 ID，失败返回 - 1</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 创建一块大小为 4k 的共享内存</span></span>
<span class="line"><span style="color:#82AAFF;">shmget</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4096</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> IPC_CREAT</span><span style="color:#89DDFF;">|</span><span style="color:#F78C6C;">0664</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 创建一块大小为 4k 的共享内存，并且检测是否存在</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 	如果共享内存已经存在, 共享内存创建失败, 返回-1, 可以perror() 打印错误信息</span></span>
<span class="line"><span style="color:#82AAFF;">shmget</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4096</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> IPC_CREAT</span><span style="color:#89DDFF;">|</span><span style="color:#F78C6C;">0664</span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">IPC_EXCL</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 打开一块已经存在的共享内存</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 函数参数虽然指定了大小和IPC_CREAT, 但是都不起作用, 因为共享内存已经存在, 只能打开, 参数4096也没有意义</span></span>
<span class="line"><span style="color:#82AAFF;">shmget</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4096</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> IPC_CREAT</span><span style="color:#89DDFF;">|</span><span style="color:#F78C6C;">0664</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">shmget</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 打开一块共享内存，如果不存在就创建</span></span>
<span class="line"><span style="color:#82AAFF;">shmget</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4096</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> IPC_CREAT</span><span style="color:#89DDFF;">|</span><span style="color:#F78C6C;">0664</span><span style="color:#89DDFF;">);</span></span></code></pre></div><h3 id="ftok" tabindex="-1">ftok <a class="header-anchor" href="#ftok" aria-label="Permalink to &quot;ftok&quot;">​</a></h3><p>shmget () 函数的第一个参数是一个大于 0 的正整数，如果不想自己指定可以通过<code>ftok ()</code>函数直接生成这个 key 值。该函数的函数原型如下：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// ftok函数原型</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">sys/types.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">sys/ipc.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 将两个参数作为种子, 生成一个 key_t 类型的数值</span></span>
<span class="line"><span style="color:#C792EA;">key_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ftok</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">pathname</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">proj_id</span><span style="color:#89DDFF;">);</span></span></code></pre></div><ul><li><code>pathname</code>: 当前操作系统中一个存在的路径</li><li><code>proj_id</code>: 这个参数只用到了 int 中的一个字节，传参的时候要将其作为 char 进行操作，取值范围: 1-255</li><li><code>返回值</code>：函数调用成功返回一个可用于创建、打开共享内存的 key 值，调用失败返回 - 1</li></ul><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 根据路径生成一个key_t</span></span>
<span class="line"><span style="color:#C792EA;">key_t</span><span style="color:#A6ACCD;"> key </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ftok</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/home/robin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 创建或打开共享内存</span></span>
<span class="line"><span style="color:#82AAFF;">shmget</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4096</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> IPC_CREATE</span><span style="color:#89DDFF;">|</span><span style="color:#F78C6C;">0664</span><span style="color:#89DDFF;">);</span></span></code></pre></div><h2 id="关联和解除关联" tabindex="-1">关联和解除关联 <a class="header-anchor" href="#关联和解除关联" aria-label="Permalink to &quot;关联和解除关联&quot;">​</a></h2><h3 id="shmat" tabindex="-1">shmat <a class="header-anchor" href="#shmat" aria-label="Permalink to &quot;shmat&quot;">​</a></h3><p>创建 / 打开共享内存之后还必须和共享内存进行关联，这样才能得到共享内存的起始地址，通过得到的内存地址进行数据的读写操作，关联函数的原型如下：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#82AAFF;">shmat</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">shmid</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">shmaddr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">shmflg</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p><code>shmid</code>: 要操作的共享内存的 ID, 是<code>shmget ()</code>函数的返回值</p><p><code>shmaddr</code>: 共享内存的起始地址，用户不知道，需要让内核指定，写 NULL</p><p><code>shmflg</code>: 和共享内存关联的对共享内存的操作权限</p><ul><li><code>SHM_RDONLY</code>: 读权限，只能读共享内存中的数据</li><li><code>0</code>: 读写权限，可以读写共享内存数据</li></ul><p><code>返回值</code>：关联成功，返回值共享内存的起始地址，关联失败返回 <code>(void *) -1</code></p><h3 id="shmdt" tabindex="-1">shmdt <a class="header-anchor" href="#shmdt" aria-label="Permalink to &quot;shmdt&quot;">​</a></h3><p>当进程不需要再操作共享内存，可以让进程和共享内存解除关联，另外如果没有执行该操作，进程退出之后，结束的进程和共享内存的关联也就自动解除了。</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">shmdt</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">shmaddr</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>参数：shmat () 函数的返回值，共享内存的起始地址</p><p>返回值：关联解除成功返回 0，失败返回 - 1</p><h2 id="删除共享内存" tabindex="-1">删除共享内存 <a class="header-anchor" href="#删除共享内存" aria-label="Permalink to &quot;删除共享内存&quot;">​</a></h2><h3 id="shmctl" tabindex="-1">shmctl <a class="header-anchor" href="#shmctl" aria-label="Permalink to &quot;shmctl&quot;">​</a></h3><p><code>shmctl () </code>函数是一个多功能函数，可以设置、获取共享内存的状态也可以将共享内存标记为删除状态。当共享内存被标记为删除状态之后，并不会马上被删除，直到所有的进程全部和共享内存解除关联，共享内存才会被删除。因为通过 <code>shmctl () </code>函数只是能够标记删除共享内存，所以在程序中多次调用该操作是没有关系的。</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 共享内存控制函数</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">shmctl</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">shmid</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">cmd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">shmid_ds</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">buf</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 参数 struct shmid_ds 结构体原型          </span></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">shmid_ds</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">ipc_perm</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">shm_perm</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">    /* Ownership and permissions */</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">size_t</span><span style="color:#F07178;">          shm_segsz</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">   /* Size of segment (bytes) */</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">time_t</span><span style="color:#F07178;">          shm_atime</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">   /* Last attach time */</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">time_t</span><span style="color:#F07178;">          shm_dtime</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">   /* Last detach time */</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">time_t</span><span style="color:#F07178;">          shm_ctime</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">   /* Last change time */</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">pid_t</span><span style="color:#F07178;">           shm_cpid</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">    /* PID of creator */</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">pid_t</span><span style="color:#F07178;">           shm_lpid</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">    /* PID of last shmat(2)/shmdt(2) */</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 引用计数, 多少个进程和共享内存进行了关联</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#FFCB6B;">shmatt_t</span><span style="color:#F07178;">        shm_nattch</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">  /* 记录了有多少个进程和当前共享内存进行了关联 */</span></span>
<span class="line"><span style="color:#F07178;">	...</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p><code>shmid</code>: 要操作的共享内存的 ID, 是 shmget () 函数的返回值</p><p><code>cmd</code>: 要做的操作</p><ul><li>IPC_STAT: 得到当前共享内存的状态</li><li>IPC_SET: 设置共享内存的状态</li><li>IPC_RMID: 标记共享内存要被删除了</li></ul><p><code>buf</code>:</p><ul><li><code>cmd==IPC_STAT</code>，buf作为传出参数，会得到共享内存的相关属性信息</li><li><code>cmd==IPC_SET</code>， buf作为传入参数，将用户的自定义属性设置到共享内存中</li><li><code>cmd==IPC_RMID</code>，buf 就没意义了，这时候 buf 指定为 NULL 即可</li></ul><p>返回值：函数调用成功返回值大于等于 0，调用失败返回 - 1</p><h3 id="相关shell命令" tabindex="-1">相关shell命令 <a class="header-anchor" href="#相关shell命令" aria-label="Permalink to &quot;相关shell命令&quot;">​</a></h3><p>使用 <code>ipcs </code>添加参数 -m 可以查看系统中共享内存的详细信息</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">ipcs</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-m</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">------------</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">共享内存段</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--------------</span></span>
<span class="line"><span style="color:#FFCB6B;">键</span><span style="color:#A6ACCD;">        </span><span style="color:#C3E88D;">shmid</span><span style="color:#A6ACCD;">      </span><span style="color:#C3E88D;">拥有者</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">权限</span><span style="color:#A6ACCD;">     </span><span style="color:#C3E88D;">字节</span><span style="color:#A6ACCD;">     </span><span style="color:#C3E88D;">nattch</span><span style="color:#A6ACCD;">     </span><span style="color:#C3E88D;">状态</span><span style="color:#A6ACCD;">      </span></span>
<span class="line"><span style="color:#FFCB6B;">0x00000000</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">425984</span><span style="color:#A6ACCD;">     </span><span style="color:#C3E88D;">oracle</span><span style="color:#A6ACCD;">     </span><span style="color:#F78C6C;">600</span><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">524288</span><span style="color:#A6ACCD;">     </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">          </span><span style="color:#C3E88D;">目标</span><span style="color:#A6ACCD;">       </span></span>
<span class="line"><span style="color:#FFCB6B;">0x00000000</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">327681</span><span style="color:#A6ACCD;">     </span><span style="color:#C3E88D;">oracle</span><span style="color:#A6ACCD;">     </span><span style="color:#F78C6C;">600</span><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">524288</span><span style="color:#A6ACCD;">     </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">          </span><span style="color:#C3E88D;">目标</span><span style="color:#A6ACCD;">       </span></span>
<span class="line"><span style="color:#FFCB6B;">0x00000000</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">458754</span><span style="color:#A6ACCD;">     </span><span style="color:#C3E88D;">oracle</span><span style="color:#A6ACCD;">     </span><span style="color:#F78C6C;">600</span><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">524288</span><span style="color:#A6ACCD;">     </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">          </span><span style="color:#C3E88D;">目标</span></span></code></pre></div><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># key == shmget的第一个参数</span></span>
<span class="line"><span style="color:#FFCB6B;">ipcrm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-M</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">shmkey</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># id == shmget的返回值</span></span>
<span class="line"><span style="color:#FFCB6B;">ipcrm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-m</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">shmid</span></span></code></pre></div><h3 id="共享内存状态" tabindex="-1">共享内存状态 <a class="header-anchor" href="#共享内存状态" aria-label="Permalink to &quot;共享内存状态&quot;">​</a></h3><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 参数 struct shmid_ds 结构体原型          </span></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">shmid_ds</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">ipc_perm</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">shm_perm</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">    /* Ownership and permissions */</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">size_t</span><span style="color:#F07178;">          shm_segsz</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">   /* Size of segment (bytes) */</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">time_t</span><span style="color:#F07178;">          shm_atime</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">   /* Last attach time */</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">time_t</span><span style="color:#F07178;">          shm_dtime</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">   /* Last detach time */</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">time_t</span><span style="color:#F07178;">          shm_ctime</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">   /* Last change time */</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">pid_t</span><span style="color:#F07178;">           shm_cpid</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">    /* PID of creator */</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">pid_t</span><span style="color:#F07178;">           shm_lpid</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">    /* PID of last shmat(2)/shmdt(2) */</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 引用计数, 多少个进程和共享内存进行了关联</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#FFCB6B;">shmatt_t</span><span style="color:#F07178;">        shm_nattch</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">  /* 记录了有多少个进程和当前共享内存进行了管联 */</span></span>
<span class="line"><span style="color:#F07178;">	...</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>通过 <code>shmctl() </code>我们可以得知，共享内存的信息是存储到一个叫做 <code>struct shmid_ds </code>的结构体中，其中有一个非常重要的成员叫做 <code>shm_nattch</code>，在这个成员变量里边记录着当前共享内存关联的进程的个数，一般将其称之为<strong>引用计数</strong>。<strong>当共享内存被标记为删除状态，并且这个引用计数变为 0 之后共享内存才会被真正的被删除掉。</strong></p><p>当共享内存被标记为删除状态之后，共享内存的状态也会发生变化，<strong>共享内存内部维护的 key 从一个正整数变为 0，其属性从公共的变为私有的。这里的私有是指只有已经关联成功的进程才允许继续访问共享内存，不再允许新的进程和这块共享内存进行关联了</strong>。下图演示了共享内存的状态变化：</p><p><img src="`+p+`" alt="img"></p><h2 id="进程间通信" tabindex="-1">进程间通信 <a class="header-anchor" href="#进程间通信" aria-label="Permalink to &quot;进程间通信&quot;">​</a></h2><p>使用共享内存实现进程间通信的操作流程如下：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">1.</span><span style="color:#A6ACCD;"> 调用linux的系统API创建一块共享内存</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> 这块内存不属于任何进程</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 默认进程不能对其进行操作</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#F78C6C;">2.</span><span style="color:#A6ACCD;"> 准备好进程A</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 和进程B</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 这两个进程需要和创建的共享内存进行关联</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> 关联操作: 调用linux的 api</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> 关联成功之后</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 得到了这块共享内存的起始地址</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#F78C6C;">3.</span><span style="color:#A6ACCD;"> 在进程A或者进程B中对共享内存进行读写操作</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> 读内存: </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> 等</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> 写内存: </span><span style="color:#82AAFF;">memcpy</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> 等</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">4.</span><span style="color:#A6ACCD;"> 通信完成</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 可以让进程A和B和共享内存解除关联</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> 解除成功</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 进程A和B不能再操作共享内存了</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> 共享内存不受进程生命周期的影响的</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#F78C6C;">5.</span><span style="color:#A6ACCD;"> 共享内存不在使用之后</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 将其删除</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> 调用linux的api函数</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 删除之后这块内存被内核回收了</span></span></code></pre></div><p>写共享内存的进程代码:</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdio.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">string.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">sys/shm.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> buf</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">4096</span><span style="color:#89DDFF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 1. 创建共享内存，大小为4k</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> shmid </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">shmget</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1000</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4096</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> IPC_CREAT </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0664</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">shmid </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">perror</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">shmget</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 2.当前进程和共享内存关联</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> shm_ptr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">shmat</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">shmid</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nullptr,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">shm_ptr </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">*)-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">perror</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">shmat</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 3. 写共享内存</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">sprintf</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">buf</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">进程pid:%d 向共享内存写入数据!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getpid</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">memcpy</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">shm_ptr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> buf</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">strlen</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">buf</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 阻塞程序</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">按任意键继续，删除共享内存</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">getchar</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 4. 解除关联</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">shmdt</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">shm_ptr</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 5. 删除共享内存</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">shmctl</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">shmid</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> IPC_RMID</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nullptr);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">共享内存已经被删除</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>读共享内存进程代码</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdio.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">string.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">sys/shm.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 1. 打开共享内存，所以参数填0即可</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> shmid </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">shmget</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1000</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">shmid </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">perror</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">shmget</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 2. 当前进程和共享内存关联</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> shm_ptr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">shmat</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">shmid</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nullptr,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">shm_ptr </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">*)-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">perror</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">shmat</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 3. 读共享内存</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">共享内存数据为：%s</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*)</span><span style="color:#A6ACCD;">shm_ptr</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 阻塞程序</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">按任意键继续，删除共享内存</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">getchar</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 4. 解除关联</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">shmdt</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">shm_ptr</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 5. 删除共享内存</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">shmctl</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">shmid</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> IPC_RMID</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nullptr);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">共享内存已经被删除</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="shm-和mmap的区别" tabindex="-1">shm 和mmap的区别 <a class="header-anchor" href="#shm-和mmap的区别" aria-label="Permalink to &quot;shm 和mmap的区别&quot;">​</a></h2><p>共享内存和内存映射区都可以实现进程间通信，下面来分析一下二者的区别：</p><table><thead><tr><th></th><th>shm</th><th>mmap</th></tr></thead><tbody><tr><td>实现进程间通信的方式</td><td>多个进程只需要一块共享内存就够了，共享内存不属于进程，需要和进程关联才能使用</td><td>位于每个进程的虚拟地址空间中，并且需要关联同一个磁盘文件才能实现进程间数据通信</td></tr><tr><td>效率:</td><td>直接对内存操作，效率高</td><td>需要内存和文件之间的数据同步，效率低</td></tr><tr><td>生命周期</td><td>进程退出，内存映射区也就没有了</td><td>进程退出对共享内存没有影响，调用相关函数 / 命令 / 关机才能删除共享内存</td></tr><tr><td>数据的完整性 -&gt; 突发状态下数据能不能被保存下来（比如：突然断电）</td><td>可以完整的保存数据，内存映射区数据会同步到磁盘文件</td><td>数据存储在物理内存中，断电之后系统关闭，内存数据也就丢失了</td></tr></tbody></table>`,62),e=[t];function c(r,y,D,F,C,i){return a(),n("div",null,e)}const h=s(o,[["render",c]]);export{d as __pageData,h as default};
