import{_ as s,o as n,c as a,O as l}from"./chunks/framework.4afe7240.js";const A=JSON.parse('{"title":"串","description":"","frontmatter":{},"headers":[],"relativePath":"articles/Computer/数据结构/串.md","filePath":"articles/Computer/数据结构/串.md"}'),p={name:"articles/Computer/数据结构/串.md"},o=l(`<h1 id="串" tabindex="-1">串 <a class="header-anchor" href="#串" aria-label="Permalink to &quot;串&quot;">​</a></h1><h2 id="kmp" tabindex="-1">KMP <a class="header-anchor" href="#kmp" aria-label="Permalink to &quot;KMP&quot;">​</a></h2><h3 id="一、基本概念" tabindex="-1">一、基本概念 <a class="header-anchor" href="#一、基本概念" aria-label="Permalink to &quot;一、基本概念&quot;">​</a></h3><p>主串、子串（模式串）、前缀、后缀、最大公共前后缀长度</p><p>子串（模式串）在主串当中的定位操作，称为串的模式匹配。</p><p>BF算法或者说暴力算法容易理解，这里不多做介绍。</p><h3 id="二、核心思想" tabindex="-1">二、核心思想 <a class="header-anchor" href="#二、核心思想" aria-label="Permalink to &quot;二、核心思想&quot;">​</a></h3><p>当用子串去匹配主串时，挨个字符比较。若某个字符不匹配，言外之意就是该字符之前的所有字符都是匹配的，感觉像是废话，但请牢记这一点。</p><p><strong>KMP的本质：若存在最大公共前后缀，就可以将子串的前缀移到后缀位置上，从而减小不必要的匹配次数，提高效率。</strong></p><p>需要说明的是，该操作不会漏掉正确结果，因为若中间存在匹配字符串，只能说明你找的不是最大公共前后缀。这里不予证明。</p><h3 id="三、前期准备" tabindex="-1">三、前期准备 <a class="header-anchor" href="#三、前期准备" aria-label="Permalink to &quot;三、前期准备&quot;">​</a></h3><p>KMP将子串的前缀移动到后缀位置上，前缀的下一个字符就继续和主串进行匹配。这时有以下几点考虑：</p><ul><li>计算机是不能移动子串位置的，但是运动是相对的，通常使用一个下标<code>j</code>来记录前缀下一个字符的位置，通过改变下标<code>j</code>的值，来实现移动字符串的移动。</li><li>每次发生冲突都需要计算j的值，有点浪费时间。所以我们可以假设每个字符都有可能发生冲突，提前计算好所有j的取值，存放在和各自字符下标应的数组中，通常取名next数组。这就是典型的牺牲空间换取时间的做法。</li><li>上面谈到，发生不匹配字符之前的所有字符都是匹配的。所以在计算next数组时，我们就不需要主串。通常给定子串，我们就可以求出next数组。</li></ul><p><strong>所以，KMP的next数组本质上就是求子串每个字符所对应的最大公共前后缀。</strong></p><h3 id="四、手工实现" tabindex="-1">四、手工实现 <a class="header-anchor" href="#四、手工实现" aria-label="Permalink to &quot;四、手工实现&quot;">​</a></h3><p>**与很多教材不同，我们的next数组下标从0开始。**这样做有几点考虑：</p><ol><li>一般语言：C/C++、Java等，字符串下标都是从0开始，这样做更有利于编程实现。</li><li>参考部分408真题，也是从0开始。本人考408</li><li>从解决题目角度，只需要多做一步简单的步骤，就可以得到对应于下标1开始的答案。而且个人觉得这样更容易理解</li></ol><blockquote><p><strong>求next数组三板斧：</strong></p><ol><li>规定<code>next[0] = -1</code>。代表子串与主串如果首字符都不匹配，就与主串的下个字符匹配，-1是编程时进行判断的标志。</li><li>从子串的第二个字符看起，该字符的前面的最大公共前后缀的个数就是next数组的值。</li><li>如果题目直接或者间接说，next数组下标从1开始（比如选项中没有出现-1等），就将next数组的所有数字加1</li></ol></blockquote><table><thead><tr><th>子串（模式串）</th><th>next数组</th></tr></thead><tbody><tr><td>a b a b a a a b a</td><td>-1 0 0 1 2 3 1 1 2</td></tr></tbody></table><h3 id="五、kmp优化" tabindex="-1">五、KMP优化 <a class="header-anchor" href="#五、kmp优化" aria-label="Permalink to &quot;五、KMP优化&quot;">​</a></h3><p>KMP优化后存放在nextval数组中</p><table><thead><tr><th>子串（模式串）</th><th>next数组</th><th>nextval</th></tr></thead><tbody><tr><td>a b a b a a a b a</td><td>-1 0 0 1 2 3 1 1 2</td><td>-1 0 -1 0 -1 3 1 0 -1</td></tr></tbody></table><h3 id="六、代码实现" tabindex="-1">六、代码实现 <a class="header-anchor" href="#六、代码实现" aria-label="Permalink to &quot;六、代码实现&quot;">​</a></h3><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">iostream</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">string</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 获取next数组</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getNext</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">str</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">next</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> j</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	next</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]=-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">length</span><span style="color:#89DDFF;">()){</span></span>
<span class="line"><span style="color:#F07178;">	    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">j</span><span style="color:#89DDFF;">==-</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">	    </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">j</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">	    </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;">j</span><span style="color:#89DDFF;">))</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	        </span><span style="color:#A6ACCD;">next</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">j</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	        </span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">	    </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> j </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">next</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">j</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    string str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ababaaaba</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> next</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">getNext</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">next</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++){</span></span>
<span class="line"><span style="color:#F07178;">        cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;">next</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">   cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello World</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">iostream</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">string</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// KMP优化</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getNextVal</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">str</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">next</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> j</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	next</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]=-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">length</span><span style="color:#89DDFF;">()){</span></span>
<span class="line"><span style="color:#F07178;">	    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">j</span><span style="color:#89DDFF;">==-</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">	    </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">j</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">	    </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;">j</span><span style="color:#89DDFF;">))</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	        </span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">j</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	        </span><span style="color:#A6ACCD;">next</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">]==</span><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">j</span><span style="color:#89DDFF;">]?</span><span style="color:#A6ACCD;">next</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">j</span><span style="color:#89DDFF;">]:</span><span style="color:#F07178;">j</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	        </span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">	    </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> j </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">next</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">j</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    string str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">aaaaaaaab</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> next</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">getNextVal</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">next</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">length</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++){</span></span>
<span class="line"><span style="color:#F07178;">        cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;">next</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">]+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> //  cout &lt;&lt; &quot;Hello World&quot;;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="子串的个数" tabindex="-1">子串的个数 <a class="header-anchor" href="#子串的个数" aria-label="Permalink to &quot;子串的个数&quot;">​</a></h3><blockquote><p>串（string）：是由零个或多个字符组成的有限序列，又名叫字符串。</p><p>子串：串中任意个连续的字符组成的子序列称为该串的子串，空串也属于子串。</p></blockquote><ul><li><p>n个字符构成的字符串，假设每个字符都不一样，则共有<strong>n(n+1)/2+1</strong>个字符串</p><p>实例应用：若串S=′software′,其子串的数目是()</p><p>解析：n(n+1)/2+1=8（8+1）/2+1=37</p></li><li><p>串中字符出现重复：字符串&#39;wwwpqqpcom&#39;所有非空子串（两个子串如果内容相同则只算一个）个数是（）</p><p>答案：50 解析：包含重复子串共：n(n+1)/2+1=10（10+1）/2+1=55，减去重复：2个w，1个ww，1个q，1个.，所以共55-5=50个</p></li></ul><blockquote><p>串的定位操作通常称为串的模式匹配</p></blockquote>`,29),t=[o];function e(c,r,F,D,y,i){return n(),a("div",null,t)}const d=s(p,[["render",e]]);export{A as __pageData,d as default};
