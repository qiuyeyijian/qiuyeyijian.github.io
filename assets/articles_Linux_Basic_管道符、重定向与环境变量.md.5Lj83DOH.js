import{_ as s,o as t,c as i,R as a}from"./chunks/framework.UjU5Kp2a.js";const c=JSON.parse('{"title":"管道符、重定向与环境变量","description":"","frontmatter":{},"headers":[],"relativePath":"articles/Linux/Basic/管道符、重定向与环境变量.md","filePath":"articles/Linux/Basic/管道符、重定向与环境变量.md"}'),h={name:"articles/Linux/Basic/管道符、重定向与环境变量.md"},n=a(`<h1 id="管道符、重定向与环境变量" tabindex="-1">管道符、重定向与环境变量 <a class="header-anchor" href="#管道符、重定向与环境变量" aria-label="Permalink to &quot;管道符、重定向与环境变量&quot;">​</a></h1><p>简而言之，输入重定向是指把文件导入到命令中，而输出重定向则是指把原本要输出到屏幕的数据信息写入到指定文件中。在日常的学习和工作中，相较于输入重定向，我们使用输出重定向的频率更高，所以又将输出重定向分为了标准输出重定向和错误输出重定向两种不同的技术，以及覆盖写入与追加写入两种模式。</p><blockquote><p><strong>标准输入重定向（STDIN，文件描述符为0）</strong>：默认从键盘输入，也可从其他文件或命令中输入。</p><p><strong>标准输出重定向（STDOUT，文件描述符为1）</strong>：默认输出到屏幕。</p><p><strong>错误输出重定向（STDERR，文件描述符为2）</strong>：默认输出到屏幕。</p></blockquote><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>命令 &lt; 文件</td><td>将文件作为命令的标准输入</td></tr><tr><td>命令 &lt;&lt; 分界符</td><td>从标准输入中读入，直到遇见分界符才停止</td></tr><tr><td>命令 &lt; 文件1 &gt; 文件2</td><td>将文件1作为命令的标准输入并将标准输出到文件2</td></tr></tbody></table><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>命令 &gt; 文件</td><td>将标准输出重定向到一个文件中（清空原有文件的数据）</td></tr><tr><td>命令 &gt;&gt; 文件</td><td>将标准输出重定向到一个文件中（追加到原有内容的后面）</td></tr><tr><td>命令 &amp;&gt;&gt; 文件</td><td>将标准输出与错误输出共同写入到文件中（追加到原有内容的后面）</td></tr><tr><td>命令 2&gt; 文件</td><td>将错误输出重定向到一个文件中（清空原有文件的数据）</td></tr><tr><td>命令 2&gt;&gt; 文件</td><td>将错误输出重定向到一个文件中（追加到原有内容的后面）</td></tr></tbody></table><p>注意：上面的<code>2</code>表示文件描述符。建议使用<code>&amp;&gt;</code>和<code>&amp;&gt;&gt;</code>，这样无论命令正确与否，结果都会输出到文件中</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.txt</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		# 统计行数，只显示行数，没有文件名称</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.txt</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			# 统计行数，显示行数加文件名称</span></span></code></pre></div><p>这是因为此前使用的“wc -l /etc/passwd”是一种非常标准的“命令+参数+对象”的执行格式，而这次的“wc -l &lt; readme.txt”则是将readme.txt文件中的内容通过操作符导入到命令中，没有被当作命令对象进行执行，因此wc命令只能读到信息流数据，而没有文件名称的信息。</p><h2 id="管道命令符" tabindex="-1">管道命令符 <a class="header-anchor" href="#管道命令符" aria-label="Permalink to &quot;管道命令符&quot;">​</a></h2><p>管道命令符的作用也可以用一句话概括为“<strong>把前一个命令原本要输出到屏幕的信息当作后一个命令的标准输入</strong>”。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sbin/nologin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/passwd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> more</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		# 用翻页形式查看ls结果</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ps</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> aux</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tee</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.txt</span></span></code></pre></div><p>在修改用户密码时，通常都需要输入两次密码以进行确认，这在编写自动化脚本时将成为一个非常致命的缺陷。通过把管道符和passwd命令的--stdin参数相结合，可以用一条命令来完成密码重置操作：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;123456&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> passwd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --stdin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span></span></code></pre></div><h2 id="命令行的通配符" tabindex="-1">命令行的通配符 <a class="header-anchor" href="#命令行的通配符" aria-label="Permalink to &quot;命令行的通配符&quot;">​</a></h2><p>顾名思义，通配符就是通用的匹配信息的符号，比如星号（*）代表匹配零个或多个字符，问号（?）代表匹配单个字符，中括号内加上数字[0-9]代表匹配0～9之间的单个数字的字符，而中括号内加上字母[abc]则是代表匹配a、b、c三个字符中的任意一个字符。</p><table><thead><tr><th>通配符</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>任意字符</td></tr><tr><td>?</td><td>单个任意字符</td></tr><tr><td>[a-z]</td><td>单个小写字母</td></tr><tr><td>[A-Z]</td><td>单个大写字母</td></tr><tr><td>[a-Z]</td><td>单个字母</td></tr><tr><td>[0-9]</td><td>单个数字</td></tr><tr><td>[[:alpha:]]</td><td>任意字母</td></tr><tr><td>[[:upper:]]</td><td>任意大写字母</td></tr><tr><td>[[:lower:]]</td><td>任意小写字母</td></tr><tr><td>[[:digit:]]</td><td>所有数字</td></tr><tr><td>[[:alnum:]]</td><td>任意字母加数字</td></tr><tr><td>[[:punct:]]</td><td>标点符号</td></tr></tbody></table><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/sda</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/sda[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">-9]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/sda[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">135</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		# 匹配135数字中的任意一个</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">touch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {a,b,c}.txt</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		# 批量创建3个文件</span></span></code></pre></div><h2 id="常用的转义字符" tabindex="-1">常用的转义字符 <a class="header-anchor" href="#常用的转义字符" aria-label="Permalink to &quot;常用的转义字符&quot;">​</a></h2><blockquote><p><strong>反斜杠（\\）</strong>：使反斜杠后面的一个变量变为单纯的字符。</p><p><strong>单引号（&#39; &#39;）</strong>：转义其中所有的变量为单纯的字符串。</p><p><strong>双引号（&quot; &quot;）</strong>：保留其中的变量属性，不进行转义处理。</p><p><strong>反引号（\` \`）</strong>：把其中的命令执行后返回结果。</p></blockquote><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Shell is </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$SHELL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uname</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span></code></pre></div><p>这里给大家总结一个简单小技巧，虽然可能不够严谨，但绝对简单：如果参数中出现了空格，就加双引号；如果参数中没有空格，那就不用加双引号。</p><h2 id="重要的环境变量" tabindex="-1">重要的环境变量 <a class="header-anchor" href="#重要的环境变量" aria-label="Permalink to &quot;重要的环境变量&quot;">​</a></h2><p>变量是计算机系统用于保存可变值的数据类型。在Linux系统中，变量名称一般都是大写的，命令则都是小写的，这是一种约定俗成的规范。Linux系统中的环境变量是用来定义系统运行环境的一些参数，比如每个用户不同的家目录、邮件存放位置等。可以直接通过变量名称来提取到对应的变量值。</p><p>在用户执行了一条命令之后，Linux系统中到底发生了什么事情呢？简单来说，命令在Linux中的执行分为4个步骤。</p><p><strong>第1步</strong>：判断用户是否以绝对路径或相对路径的方式输入命令（如/bin/ls），如果是绝对路径则直接执行，否则进入第2步继续判断。</p><p><strong>第2步</strong>：Linux系统检查用户输入的命令是否为“别名命令”，即用一个自定义的命令名称来替换原本的命令名称。可以用alias命令来创建一个属于自己的命令别名，语法格式为“alias别名=命令”。若要取消一个命令别名，则是用unalias命令，语法格式为“unalias别名”。</p><p><strong>第3步</strong>：Bash解释器判断用户输入的是内部命令还是外部命令。内部命令是解释器内部的指令，会被直接执行；而用户在绝大部分时间输入的是外部命令，这些命令交由步骤4继续处理。可以使用“type命令名称”来判断用户输入的命令是内部命令还是外部命令：</p><p><strong>第4步</strong>：系统在多个路径中查找用户输入的命令文件，而定义这些路径的变量叫作PATH，可以简单地把它理解成是“解释器的小助手”，作用是告诉Bash解释器待执行的命令可能存放的位置，然后Bash解释器就会乖乖地在这些位置中逐个查找。PATH是由多个路径值组成的变量，每个路径值之间用冒号间隔，对这些路径的增加和删除操作将影响到Bash解释器对Linux命令的查找。</p><p>其实变量是由固定的变量名与用户或系统设置的变量值两部分组成的，我们完全可以自行创建变量来满足工作需求。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WORKPLACE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/workplace</span></span></code></pre></div><p>如果工作需要，可以使用export命令将其提升为全局变量，这样其他用户也就可以使用它了：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> WORKPLACE</span></span></code></pre></div><p>后续要是不使用这个变量了，则可执行unset命令把它取消掉：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">unset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> WORKPLACE</span></span></code></pre></div><blockquote><p>直接在终端设置的变量能够立即生效，但在重启服务器后就会失效，因此我们需要将变量和变量值写入到.bashrc或者.bash_profile文件中，以确保永久能使用它们。</p></blockquote>`,35),p=[n];function l(e,d,k,r,o,g){return t(),i("div",null,p)}const C=s(h,[["render",l]]);export{c as __pageData,C as default};
