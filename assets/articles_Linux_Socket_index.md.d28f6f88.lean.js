import{_ as s,v as n,b as a,R as l}from"./chunks/framework.53249f15.js";const p="/assets/tcp.221b76f8.png",o="/assets/udp.9ee7ea3d.png",t="/assets/ip-16486168722304.bbf17489.png",e="/assets/mac.7d42b7c1.png",c="/assets/1558001080021.6d647287.png",r="/assets/插座.dbe1545e.png",y="/assets/1334044170_5136-164722278691310.614d4550.jpg",i="/assets/webp.765b5952.webp",F="/assets/view.99200275.png",D="/assets/view-164722289121712.ecc08432.png",A="/assets/view-164722289813614.48bf8044.png",C="/assets/1460000010838135.d2a0eed0.png",f="/assets/tcp.b4947e22.jpg",d="/assets/1558084711685.ae815245.png",E="/assets/20141015155713390.99692da8.png",u="/assets/wKiom1ZLIP2CRdNUAAlNCKgqwI0818.13257742.jpg",S=JSON.parse('{"title":"Socket","description":"","frontmatter":{},"headers":[],"relativePath":"articles/Linux/Socket/index.md","filePath":"articles/Linux/Socket/index.md"}'),_={name:"articles/Linux/Socket/index.md"},h=l('<h1 id="socket" tabindex="-1">Socket <a class="header-anchor" href="#socket" aria-label="Permalink to &quot;Socket&quot;">​</a></h1><h2 id="网络协议" tabindex="-1">网络协议 <a class="header-anchor" href="#网络协议" aria-label="Permalink to &quot;网络协议&quot;">​</a></h2><p>网络协议指的是计算机网络中互相通信的对等实体之间交换信息时所必须遵守的规则的集合。一般系统网络协议包括五个部分：通信环境，传输服务，词汇表，信息的编码格式，时序、规则和过程。先来通过下面几幅图了解一下常用的网络协议的格式：</p><blockquote><p>TCP 协议 -&gt; 传输层协议</p></blockquote><p><img src="'+p+'" alt="img"></p><blockquote><p>UDP 协议 -&gt; 传输层协议</p></blockquote><p><img src="'+o+'" alt="img"></p><blockquote><p>IP 协议 -&gt; 网络层协议</p></blockquote><p><img src="'+t+'" alt="img"></p><blockquote><p>以太网帧协议 -&gt; 网络接口层协议</p></blockquote><p><img src="'+e+'" alt="img"></p><blockquote><p>数据的封装</p></blockquote><p><img src="'+c+'" alt="1558001080021"></p><h2 id="socket概述" tabindex="-1">Socket概述 <a class="header-anchor" href="#socket概述" aria-label="Permalink to &quot;Socket概述&quot;">​</a></h2><p>Socket 套接字由远景研究规划局（Advanced Research Projects Agency, ARPA）资助加里福尼亚大学伯克利分校的一个研究组研发。其目的是将 TCP/IP 协议相关软件移植到 UNIX 类系统中。设计者开发了一个接口，以便应用程序能简单地调用该接口通信。这个接口不断完善，最终形成了 Socket 套接字。Linux 系统采用了 Socket 套接字，因此，Socket 接口就被广泛使用，到现在已经成为事实上的标准。与套接字相关的函数被包含在头文件 <code>sys/socket.h</code> 中。</p><p><img src="'+r+'" alt="img"></p><p>通过上面的描述可以得知，套接字对应程序猿来说就是一套网络通信的接口，使用这套接口就可以完成网络通信。网络通信的主体主要分为两部分：客户端和服务器端。在客户端和服务器通信的时候需要频繁提到三个概念：<strong>IP、端口、通信数据</strong></p><h3 id="socket定义" tabindex="-1">Socket定义 <a class="header-anchor" href="#socket定义" aria-label="Permalink to &quot;Socket定义&quot;">​</a></h3><p>socket起源于Unix，而Unix/Linux基本哲学之一就是“一切皆文件”，都可以用“打开open –&gt; 读写write/read –&gt; 关闭close”模式来操作。我的理解就是Socket就是该模式的一个实现，socket即是一种特殊的文件，一些socket函数就是对其进行的操作（读/写IO、打开、关闭）。</p><p>在TCP/IP协议中，&quot;IP地址+TCP或UDP端口号&quot;唯一标识网络通讯中的一个进程。&quot;IP地址+端口号&quot;就对应一个socket。</p><p><img src="'+y+`" alt="1334044170_5136"></p><h3 id="套接字类型" tabindex="-1">套接字类型 <a class="header-anchor" href="#套接字类型" aria-label="Permalink to &quot;套接字类型&quot;">​</a></h3><ul><li><p>流套接字（SOCK_STREAM）</p></li><li><p>数据报套接字（SOCK_DGRAM）</p></li><li><p>原始套机子（SOCK_RAW）</p></li></ul><h3 id="协议簇和地址簇" tabindex="-1">协议簇和地址簇 <a class="header-anchor" href="#协议簇和地址簇" aria-label="Permalink to &quot;协议簇和地址簇&quot;">​</a></h3><p>协议簇就是不同协议的集合，在linux中，用宏来表示不同的协议簇，这个宏的形式是PF开头，比如IPv4协议为<code>PF_INET</code>，PF的意思就是PROTOCOL FAMILY</p><p>地址簇就是一个协议所使用的地址集合，也是用宏来表示不同的地址簇，这个宏的形式是AF开头，比如IP地址簇为AF_INET，AF的意思是ADDRESS FAMILY</p><h3 id="ip地址转换" tabindex="-1">IP地址转换 <a class="header-anchor" href="#ip地址转换" aria-label="Permalink to &quot;IP地址转换&quot;">​</a></h3><p><a href="https://www.cnblogs.com/fortunely/p/14916296.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/fortunely/p/14916296.html</a></p><p>推荐使用<code>inet_pton()</code>或<code>inet_ntop()</code>。而非<code>inet_addr()</code>或<code>inet_network()</code>，因为返回值-1代表IP地址255.255.255.255。</p><p><strong>inet_pton(), inet_ntop()适用于IPv4和IPv6</strong></p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/*本地IP 即 字符串(点分十进制:xxx.xxx.xx.xxx)*/</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 本地IP转网络字节序 字符串 --&gt; int(大端方式存储)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">af</span><span style="color:#676E95;font-style:italic;"> 地址族协议对应的有AF_INET, AF_INET6等</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">src</span><span style="color:#676E95;font-style:italic;"> 要转换的指定的IP</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">dst</span><span style="color:#676E95;font-style:italic;">  转换出来的值,  其实是整型值</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@return</span><span style="color:#676E95;font-style:italic;"> -1 失败, 0成功, 并对应有errno</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">inet_pton</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">af</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">src</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">dst</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  网络字节序转本地IP int -&gt; 字符串</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">af</span><span style="color:#676E95;font-style:italic;">    - 地址族协议对应的有AF_INET, AF_INET6等</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">src</span><span style="color:#676E95;font-style:italic;">  - 网路字节序格式的int类型的iP</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">dst</span><span style="color:#676E95;font-style:italic;">  - 存储字符串ip的数组的地址</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">size</span><span style="color:#676E95;font-style:italic;"> - dst缓冲区大小</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  </span><span style="color:#C792EA;font-style:italic;">@return</span><span style="color:#676E95;font-style:italic;"> 返回的即是 dst</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#82AAFF;">inet_ntop</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">af</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">src</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">dst</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">socklen_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">size</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>还有一组函数也能进程 IP 地址大小端的转换，但是只能处理 ipv4 的 ip 地址：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 点分十进制IP -&gt; 大端整形</span></span>
<span class="line"><span style="color:#C792EA;">in_addr_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">inet_addr</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">cp</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 大端整形 -&gt; 点分十进制IP</span></span>
<span class="line"><span style="color:#C792EA;">char*</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">inet_ntoa</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">in_addr</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">in</span><span style="color:#89DDFF;">);</span></span></code></pre></div><h3 id="字节序" tabindex="-1">字节序 <a class="header-anchor" href="#字节序" aria-label="Permalink to &quot;字节序&quot;">​</a></h3><blockquote><h3 id="网络字节序与主机字节序" tabindex="-1">网络字节序与主机字节序 <a class="header-anchor" href="#网络字节序与主机字节序" aria-label="Permalink to &quot;网络字节序与主机字节序&quot;">​</a></h3><p><strong>主机字节序</strong>就是我们平常说的大端和小端模式：不同的CPU有不同的字节序类型，这些字节序是指整数在内存中保存的顺序，这个叫做主机序。引用标准的Big-Endian和Little-Endian的定义如下：</p><ul><li><p>Little-Endian就是低位字节排放在内存的低地址端，高位字节排放在内存的高地址端。</p></li><li><p>Big-Endian就是高位字节排放在内存的低地址端，低位字节排放在内存的高地址端。</p></li></ul><p><strong>网络字节序</strong>：4个字节的32 bit值以下面的次序传输：首先是0～7bit，其次8～15bit，然后16～23bit，最后是24~31bit。这种传输次序称作大端字节序。**由于TCP/IP首部中所有的二进制整数在网络中传输时都要求以这种次序，因此它又称作网络字节序。**字节序，顾名思义字节的顺序，就是大于一个字节类型的数据在内存中的存放顺序，一个字节的数据没有顺序的问题了。</p><p>**在将一个地址绑定到socket的时候，请先将主机字节序转换成为网络字节序，而不要假定主机字节序跟网络字节序一样使用的是Big-Endian。**由于这个问题曾引发过血案！公司项目代码中由于存在这个问题，导致了很多莫名其妙的问题，所以请谨记对主机字节序不要做任何假定，务必将其转化为网络字节序再赋给socket。</p></blockquote><blockquote><p>BSD Socket 提供了封装好的转换接口，方便程序员使用。包括从主机字节序到网络字节序的转换函数：htons、htonl；从网络字节序到主机字节序的转换函数：ntohs、ntohl。</p></blockquote><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">arpa/inet.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// u:unsigned</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 16: 16位, 32:32位</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// h: host, 主机字节序</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// n: net, 网络字节序</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// s: short</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// l: int</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 这套api主要用于 网络通信过程中 IP 和 端口 的 转换</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 将一个短整形从主机字节序 -&gt; 网络字节序</span></span>
<span class="line"><span style="color:#C792EA;">uint16_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">htons</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">uint16_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">hostshort</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">	/* 端口 */</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 将一个整形从主机字节序 -&gt; 网络字节序</span></span>
<span class="line"><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">htonl</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">hostlong</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">	/* IP */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 将一个短整形从网络字节序 -&gt; 主机字节序</span></span>
<span class="line"><span style="color:#C792EA;">uint16_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ntohs</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">uint16_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">netshort</span><span style="color:#89DDFF;">)</span><span style="color:#676E95;font-style:italic;">	/* 端口 */</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 将一个整形从网络字节序 -&gt; 主机字节序</span></span>
<span class="line"><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ntohl</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">netlong</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">	/* IP */</span></span></code></pre></div><h2 id="sockaddr数据结构" tabindex="-1">sockaddr数据结构 <a class="header-anchor" href="#sockaddr数据结构" aria-label="Permalink to &quot;sockaddr数据结构&quot;">​</a></h2><p>根据使用场景不同，创建<code>sockaddr_in</code>, <code>sockaddr_un</code>, <code>sockaddr_in6</code>结构体来保存IP地址信息，但在使用的时候，统一将结构体的地址保存在<code>sockaddr</code>的地址域内，这样屏蔽了底层实现细节。向上层交付的就是一个结构体。</p><p><img src="`+i+`" alt="img"></p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// ipv4对应的是：</span></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">sockaddr_in</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">sa_family_t</span><span style="color:#F07178;">    sin_family</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> /* address family: AF_INET */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">in_port_t</span><span style="color:#F07178;">      sin_port</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">   /* port in network byte order */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">in_addr</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sin_addr</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">   /* internet address */</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">in_addr</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">uint32_t</span><span style="color:#F07178;">       s_addr</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">     /* address in network byte order */</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ipv6对应的是：</span></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">sockaddr_in6</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">sa_family_t</span><span style="color:#F07178;">     sin6_family</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">   /* AF_INET6 */</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">in_port_t</span><span style="color:#F07178;">       sin6_port</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">     /* port number */</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">uint32_t</span><span style="color:#F07178;">        sin6_flowinfo</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> /* IPv6 flow information */</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">in6_addr</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sin6_addr</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">     /* IPv6 address */</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">uint32_t</span><span style="color:#F07178;">        sin6_scope_id</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> /* Scope ID (new in 2.4) */</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">in6_addr</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">unsigned</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">char</span><span style="color:#F07178;">   </span><span style="color:#A6ACCD;">s6_addr</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;">];</span><span style="color:#676E95;font-style:italic;">   /* IPv6 address */</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Unix域</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">UNIX_PATH_MAX</span><span style="color:#A6ACCD;">    108</span></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">sockaddr_un</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">sa_family_t</span><span style="color:#F07178;"> sun_family</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">               /* AF_UNIX */</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">char</span><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">sun_path</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">UNIX_PATH_MAX</span><span style="color:#89DDFF;">];</span><span style="color:#676E95;font-style:italic;">  /* pathname */</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><h2 id="网络套接字api" tabindex="-1">网络套接字API <a class="header-anchor" href="#网络套接字api" aria-label="Permalink to &quot;网络套接字API&quot;">​</a></h2><div class="language-C"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@brief</span><span style="color:#676E95;font-style:italic;">  创建套接字</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">domain</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">type</span><span style="color:#676E95;font-style:italic;"> tcp - 流式协议  udp - 报式协议</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">protocol</span><span style="color:#676E95;font-style:italic;"> 协议类型, 值为0就会根据type默认为TCP或UDP</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@return</span><span style="color:#676E95;font-style:italic;"> int 文件描述符(套接字)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">socket</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">domain</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">type</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">protocol</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@brief</span><span style="color:#676E95;font-style:italic;"> 将本地的IP和端口与创建出的套接字绑定</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">sockfd</span><span style="color:#676E95;font-style:italic;"> 创建出的文件描述符</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">addr</span><span style="color:#676E95;font-style:italic;"> 端口和IP</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">addrlen</span><span style="color:#676E95;font-style:italic;"> addr结构体的长度</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@return</span><span style="color:#676E95;font-style:italic;"> int</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">bind</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">sockfd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> sockaddr </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">addr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">socklen_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">addrlen</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@brief</span><span style="color:#676E95;font-style:italic;"> 设置同时连接到服务器的客户端的个数</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">sockfd</span><span style="color:#676E95;font-style:italic;"> 函数创建出来的文件描述符</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">backlog</span><span style="color:#676E95;font-style:italic;"> 系统进程最多允许多少个未完成的请求进入等待队列，最大值 128</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@return</span><span style="color:#676E95;font-style:italic;"> int</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">listen</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">sockfd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">backlog</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@brief</span><span style="color:#676E95;font-style:italic;"> 阻塞等待客户端连接请求, 并接受连接</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">sockfd</span><span style="color:#676E95;font-style:italic;"> 文件描述符, 使用socket创建出的文件描述符</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">addr</span><span style="color:#676E95;font-style:italic;"> 存储客户端的端口和IP, 传出参数</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">addrlen</span><span style="color:#676E95;font-style:italic;"> 传入传出参数</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@return</span><span style="color:#676E95;font-style:italic;"> int 返回的是一个套接字, 对应客户端:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 服务器端与客户端进程通信使用accept的返回值对应的套接字</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">accept</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">sockfd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> sockaddr </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">addr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">socklen_t</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">addrlen</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//客户端与服务器端建立连接的函数</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@brief</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">sockfd</span><span style="color:#676E95;font-style:italic;"> 套接字</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">addr</span><span style="color:#676E95;font-style:italic;"> 服务器端的IP和端口</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">addrlen</span><span style="color:#676E95;font-style:italic;"> 第二个参数的长度</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@return</span><span style="color:#676E95;font-style:italic;"> int</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">connect</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">sockfd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> sockaddr </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">addr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">socklen_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">addrlen</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@brief</span><span style="color:#676E95;font-style:italic;"> 发送数据</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">sockfd</span><span style="color:#676E95;font-style:italic;"> accept返回的socket文件描述符。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">buf</span><span style="color:#676E95;font-style:italic;"> 要发送数据</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">nbytes</span><span style="color:#676E95;font-style:italic;"> 发送数据大小</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">flags</span><span style="color:#676E95;font-style:italic;"> 对于传送数据的一些配置项</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@return</span><span style="color:#676E95;font-style:italic;"> ssize_t</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">ssize_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">send</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">sockfd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">buf</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">size_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">nbytes</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">flags</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@brief</span><span style="color:#676E95;font-style:italic;"> 接收数据</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">sockfd</span><span style="color:#676E95;font-style:italic;"> accept返回的socket文件描述符。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">buf</span><span style="color:#676E95;font-style:italic;"> 要接收的数据</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">nbytes</span><span style="color:#676E95;font-style:italic;"> 要接收的数据大小</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">flags</span><span style="color:#676E95;font-style:italic;"> 对于传送数据的一些配置项</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@return</span><span style="color:#676E95;font-style:italic;"> ssize_t</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">ssize_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">recv</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">sockfd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">buf</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">size_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">nbytes</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">flags</span><span style="color:#89DDFF;">);</span></span></code></pre></div><h3 id="socket-1" tabindex="-1">socket() <a class="header-anchor" href="#socket-1" aria-label="Permalink to &quot;socket()&quot;">​</a></h3><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//函数的返回值是一个文件描述符，通过这个文件描述符可以操作内核中的某一块内存，网络通信是基于这个文件描述符来完成的。失败返回-1</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">socket</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">domain</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">type</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">protocol</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>socket函数对应于普通文件的打开操作。普通文件的打开操作返回一个文件描述字，而**socket()**用于创建一个socket描述符（socket descriptor），<strong>它唯一标识一个socket</strong>。这个socket描述字跟文件描述字一样，后续的操作都有用到它，把它作为参数，通过它来进行一些读写操作。</p><p>正如可以给<code>fopen()</code>的传入不同参数值，以打开不同的文件。创建socket的时候，也可以指定不同的参数创建不同的socket描述符，socket函数的三个参数分别为：</p><p><code>domain</code>: 使用的地址族协议</p><ul><li>AF_INET: 使用 IPv4 格式的 ip 地址</li><li>AF_INET6: 使用 IPv4 格式的 ip 地址</li></ul><p><code>type</code>:</p><ul><li>SOCK_STREAM: 使用流式的传输协议</li><li>SOCK_DGRAM: 使用报式 (报文) 的传输协议</li></ul><p><code>protocol</code>: 一般写 0 即可，使用默认的协议</p><ul><li>SOCK_STREAM: 流式传输默认使用的是 tcp</li><li>SOCK_DGRAM: 报式传输默认使用的 udp</li></ul><p>注意：并不是上面的type和protocol可以随意组合的，如SOCK_STREAM不可以跟IPPROTO_UDP组合。<strong>protocol一般取0时，自动选择type类型对应的默认协议。</strong></p><blockquote><p>当我们调用<strong>socket</strong>创建一个socket时，返回的socket描述字它存在于协议族（address family，AF_XXX）空间中，但没有一个具体的地址。如果想要给它赋值一个地址，就必须调用bind()函数，否则当调用connect()、listen()时系统会自动随机分配一个端口。</p></blockquote><p><img src="`+F+'" alt="preview"></p><p><img src="'+D+'" alt="preview"></p><p><img src="'+A+`" alt="preview"></p><h3 id="bind" tabindex="-1">bind() <a class="header-anchor" href="#bind" aria-label="Permalink to &quot;bind()&quot;">​</a></h3><p>**bind()函数把一个地址族中的特定地址赋给socket。**例如对应AF_INET、AF_INET6就是把一个ipv4或ipv6地址和端口号组合赋给socket。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 将文件描述符和本地的IP与端口进行绑定   </span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">bind</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">sockfd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> sockaddr </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">addr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">socklen_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">addrlen</span><span style="color:#89DDFF;">);</span></span></code></pre></div><ul><li><code>sockfd</code>: 监听的文件描述符，通过 socket () 调用得到的返回值</li><li><code>addr</code>: 传入参数，要绑定的 IP 和端口信息需要初始化到这个结构体中，<strong>IP和端口要转换为网络字节序</strong></li><li><code>addrlen</code>: 参数 addr 指向的内存大小，sizeof (struct sockaddr)</li></ul><ul><li>返回值：成功返回 0，失败返回 - 1</li></ul><blockquote><p>为什么通常服务器端在listen之前会调用bind()，而客户端就不会调用，而是在connect()时由系统随机生成一个。</p><p>通常服务器在启动的时候都会绑定一个众所周知的地址（如ip地址+端口号），用于提供服务，客户就可以通过它来接连服务器；而客户端就不用指定，系统会自动分配一个端口号和自身的ip地址组合。</p></blockquote><h3 id="listen" tabindex="-1">listen() <a class="header-anchor" href="#listen" aria-label="Permalink to &quot;listen()&quot;">​</a></h3><p>socket()函数创建的socket默认是一个主动类型的，listen函数将socket变为被动类型的，等待客户的连接请求。</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 给监听的套接字设置监听</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">listen</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">sockfd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">backlog</span><span style="color:#89DDFF;">);</span></span></code></pre></div><ul><li>sockfd: 文件描述符，可以通过调用 socket () 得到，在监听之前必须要绑定 bind ()</li><li>backlog: 同时能处理的最大连接要求，最大值为 128</li><li>返回值：函数调用成功返回 0，调用失败返回 -1</li></ul><h3 id="connect" tabindex="-1">connect() <a class="header-anchor" href="#connect" aria-label="Permalink to &quot;connect()&quot;">​</a></h3><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 成功连接服务器之后, 客户端会自动随机绑定一个端口</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 服务器端调用accept()的函数, 第二个参数存储的就是客户端的IP和端口信息</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">connect</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">sockfd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sockaddr</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">addr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">socklen_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">addrlen</span><span style="color:#89DDFF;">);</span></span></code></pre></div><ul><li><code>sockfd</code>: 通信的文件描述符，通过调用 socket () 函数就得到了</li><li><code>addr</code>: 存储了要连接的服务器端的地址信息: IP 和 端口，这个 IP 和端口也需要转换为大端然后再赋值</li><li><code>addrlen</code>: addr 指针指向的内存的大小 sizeof (struct sockaddr)</li><li>返回值：连接成功返回 0，连接失败返回 - 1</li></ul><h3 id="accept" tabindex="-1">accept() <a class="header-anchor" href="#accept" aria-label="Permalink to &quot;accept()&quot;">​</a></h3><p>TCP服务器端依次调用socket()、bind()、listen()之后，就会监听指定的socket地址了。TCP客户端依次调用socket()、connect()之后就向TCP服务器发送了一个连接请求。TCP服务器监听到这个请求之后，就会调用accept()函数取接收请求，这样连接就建立好了。之后就可以开始网络I/O操作了，即类同于普通文件的读写I/O操作。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 等待并接受客户端的连接请求, 建立新的连接, 会得到一个新的文件描述符(通信的)		</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">accept</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">sockfd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> sockaddr </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">addr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">socklen_t</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">addrlen</span><span style="color:#89DDFF;">);</span></span></code></pre></div><ul><li>sockfd: 监听的文件描述符</li><li>addr: 传出参数，里边存储了建立连接的客户端的地址信息</li><li>addrlen: 传入传出参数，用于存储 addr 指向的内存大小</li><li>返回值：函数调用成功，得到一个文件描述符，用于和建立连接的这个客户端通信，调用失败返回 -1</li></ul><p><strong>这个函数是一个阻塞函数</strong>，当没有新的客户端连接请求的时候，该函数阻塞；当检测到有新的客户端连接请求时，阻塞解除，新连接就建立了，得到的返回值也是一个文件描述符，基于这个文件描述符就可以和客户端通信了。</p><blockquote><p>在 TCP 的服务器端，有两类文件描述符：<strong>监听的文件描述符</strong>和<strong>通信的文件描述符</strong></p><p><code>accept()</code>的第一个参数是服务器开始时调用<code>socket()</code>函数生成的监听的文件描述符，而<code>accept()</code>函数返回的是通信的文件描述符。</p><ul><li>监听的文件描述符：只需要有一个，不负责和客户端通信，负责检测客户端的连接请求，检测到之后调用 <code>accept() </code>就可以建立新的连接</li><li>通信的文件描述符：负责和建立连接的客户端通信。如果有 N 个客户端和服务器建立了新的连接，通信的文件描述符就有 N 个，每个客户端和服务器都对应一个通信的文件描述符</li></ul><p>一个服务器通常通常仅仅只创建一个监听socket描述字，它在该服务器的生命周期内一直存在。内核为每个由服务器进程接受的客户连接创建了一个已连接socket描述字，当服务器完成了对某个客户的服务，相应的已连接socket描述字就被关闭。</p></blockquote><h3 id="read-recv" tabindex="-1">read()/recv() <a class="header-anchor" href="#read-recv" aria-label="Permalink to &quot;read()/recv()&quot;">​</a></h3><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 接收数据</span></span>
<span class="line"><span style="color:#C792EA;">ssize_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">read</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">sockfd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">buf</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">size_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">size</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#C792EA;">ssize_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">recv</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">sockfd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">buf</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">size_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">size</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">flags</span><span style="color:#89DDFF;">);</span></span></code></pre></div><ul><li>sockfd: 用于通信的文件描述符，accept () 函数的返回值</li><li>buf: 指向一块有效内存，用于存储接收是数据</li><li>size: 参数 buf 指向的内存的容量</li><li>flags: 特殊的属性，一般不使用，指定为 0</li></ul><p>返回值:</p><ul><li>大于 0：实际接收的字节数</li><li>等于 0：对方断开了连接</li><li>-1：接收数据失败了</li></ul><p>如果连接没有断开，接收端接收不到数据，接收数据的函数会阻塞等待数据到达，数据到达后函数解除阻塞，开始接收数据。<strong>当发送端断开连接，接收端无法接收到任何数据，但是这时候就不会阻塞了，函数直接返回0。</strong></p><h3 id="write-send" tabindex="-1">write()/send() <a class="header-anchor" href="#write-send" aria-label="Permalink to &quot;write()/send()&quot;">​</a></h3><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 发送数据的函数</span></span>
<span class="line"><span style="color:#C792EA;">ssize_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">write</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">fd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">buf</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">size_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">len</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#C792EA;">ssize_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">send</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">fd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">buf</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">size_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">len</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">flags</span><span style="color:#89DDFF;">);</span></span></code></pre></div><ul><li>fd: 通信的文件描述符，accept () 函数的返回值</li><li>buf: 传入参数，要发送的字符串</li><li>len: 要发送的字符串的长度</li><li>flags: 特殊的属性，一般不使用，指定为 0</li></ul><p>返回值：</p><ul><li>大于 0：实际发送的字节数，和参数 len 是相等的</li><li>-1：发送数据失败了</li></ul><h3 id="close" tabindex="-1">close() <a class="header-anchor" href="#close" aria-label="Permalink to &quot;close()&quot;">​</a></h3><p>在服务器与客户端建立连接之后，会进行一些读写操作，完成了读写操作就要关闭相应的socket描述字，好比操作完打开的文件要调用fclose关闭打开的文件。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">unistd.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">close</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">fd</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>close一个TCP socket的缺省行为时把该socket标记为以关闭，然后立即返回到调用进程。该描述字不能再由调用进程使用，也就是说不能再作为read或write的第一个参数。</p><p>注意：close操作只是使相应socket描述字的引用计数-1，只有当引用计数为0的时候，才会触发TCP客户端向服务器发送终止连接请求。</p><h3 id="setsockopt" tabindex="-1">setsockopt() <a class="header-anchor" href="#setsockopt" aria-label="Permalink to &quot;setsockopt()&quot;">​</a></h3><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@brief</span><span style="color:#676E95;font-style:italic;"> socket更具体的配置函数</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">sockfd</span><span style="color:#676E95;font-style:italic;"> 用于监听的文件描述符</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">level</span><span style="color:#676E95;font-style:italic;"> 根据我们选用的协议，配置相应的协议编号。设置端口复用需要使用 SOL_SOCKET 宏</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">optname</span><span style="color:#676E95;font-style:italic;">：要设置什么属性。设置端口复用需使用 SO_REUSEADDR</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">optval</span><span style="color:#676E95;font-style:italic;">：是否设置端口复用，0：不设置，1：设置</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">optlen</span><span style="color:#676E95;font-style:italic;">：optval 指针指向的内存大小 sizeof (int)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@return</span><span style="color:#676E95;font-style:italic;"> int</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 这个函数是一个多功能函数, 可以设置套接字选项</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setsockopt</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">sockfd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">level</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">optname</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">optval</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">socklen_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">optlen</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p><img src="`+C+`" alt="option"></p><h3 id="端口复用" tabindex="-1">端口复用 <a class="header-anchor" href="#端口复用" aria-label="Permalink to &quot;端口复用&quot;">​</a></h3><p>一个程序成功bind后，当程序退出马上再次运行后，可能会因为端口占用问题报错（错误码98）。这是由于TCP套接字的状态<code>TIME_WAIT</code>引起的，该状态在套接字关闭后保留2-4分钟。在<code>TIME_WAIT</code>状态退出后，套接字被删除才能继续使用端口。</p><p>利用socket的配置选项，可以实现端口复用。<strong>注意：该函数需要在bind函数之前使用</strong></p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//  举例</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> val </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">setsockopt</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">lfd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> SOL_SOCKET</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> SO_REUSEADDR</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*)&amp;</span><span style="color:#A6ACCD;font-style:italic;">val</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#A6ACCD;">on</span><span style="color:#89DDFF;">));</span></span></code></pre></div><h2 id="tcp-通信流程" tabindex="-1">TCP 通信流程 <a class="header-anchor" href="#tcp-通信流程" aria-label="Permalink to &quot;TCP 通信流程&quot;">​</a></h2><p>TCP 是一个面向连接的，安全的，流式传输协议，这个协议是一个传输层协议。</p><ul><li>面向连接：是一个双向连接，通过三次握手完成，断开连接需要通过四次挥手完成。</li><li>安全：tcp 通信过程中，会对发送的每一数据包都会进行校验，如果发现数据丢失，会自动重传</li><li>流式传输：发送端和接收端处理数据的速度，数据的量都可以不一致</li></ul><p><img src="`+f+'" alt="img"></p><h3 id="文件描述符" tabindex="-1">文件描述符 <a class="header-anchor" href="#文件描述符" aria-label="Permalink to &quot;文件描述符&quot;">​</a></h3><p><img src="'+d+`" alt="1558084711685"></p><p>一个文件文件描述符对应两块内存, 一块内存是读缓冲区, 一块内存是写缓冲区</p><ul><li>读数据: 通过文件描述符将内存中的数据读出, 这块内存称之为读缓冲区</li><li>写数据: 通过文件描述符将数据写入到某块内存中, 这块内存称之为写缓冲区</li></ul><p>监听的文件描述符：客户端的连接请求会发送到服务器端监听的文件描述符的读缓冲区中。读缓冲区中有数据，说明有新的客户端连接。调用 accept () 函数，这个函数会检测监听文件描述符的读缓冲区</p><ul><li>检测不到数据，该函数阻塞</li><li>如果检测到数据，解除阻塞，新的连接建立</li></ul><p>通信的文件描述符：客户端和服务器端都有通信的文件描述符</p><p>发送数据：调用函数 <code>write () /send ()</code>，数据进入到内核中</p><ul><li>数据并没有被发送出去，而是将数据写入到了通信的文件描述符对应的写缓冲区中</li><li>内核检测到通信的文件描述符写缓冲区中有数据，内核会将数据发送到网络中</li></ul><p>接收数据：调用的函数 <code>read () /recv (),</code> 从内核读数据</p><ul><li>数据如何进入到内核程序猿不需要处理，数据进入到通信的文件描述符的读缓冲区中</li><li>数据进入到内核，必须使用通信的文件描述符，将数据从读缓冲区中读出即可</li></ul><h3 id="server" tabindex="-1">Server <a class="header-anchor" href="#server" aria-label="Permalink to &quot;Server&quot;">​</a></h3><p>为了尽可能简单，减少代码量。去除了错误检查。实现的功能为：</p><ol><li>客户端可以给服务器发送消息，服务器统一回复OK</li><li>客户端各服务发送<code>exit</code>给服务器，结束本次连接</li></ol><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// server</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">arpa/inet.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdio.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdlib.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">string.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">sys/socket.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">sys/stat.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">unistd.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">argc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">argv</span><span style="color:#C792EA;">[]</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> IP </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">0.0.0.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">  // 服务器IP地址一般设置成本地所有IP，不需要改动</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> PORT </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">9821</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">  // 服务器开放的端口号</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 发送和接收缓冲区</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">send_buf</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1024</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">recv_buf</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1024</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> val </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">  // 套接字配置函数所使用的值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /* 1. 设置服务器地址为任意IP，和开放的端口号 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> sockaddr_in server_addr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">server_addr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sin_family</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> AF_INET</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">server_addr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sin_port</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">htons</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">PORT</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">  //设置服务器端口，必须是没有被占用的端口</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">inet_pton</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">AF_INET</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> IP</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">server_addr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sin_addr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">s_addr</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">  //服务器IP设置为本地所有的IP</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /* 2. 创建监听的套接字 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> lfd </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">socket</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">AF_INET</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> SOCK_STREAM</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">lfd </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">perror</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">socket</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">exit</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /* 2.1 配置套接字，实现端口复用 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">setsockopt</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">lfd</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> SOL_SOCKET</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> SO_REUSEADDR</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">*)&amp;</span><span style="color:#F07178;">val</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#F07178;">val</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /*3. 将套接字和服务器地址绑定*/</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> ret </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">bind</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">lfd</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> sockaddr</span><span style="color:#89DDFF;">*)&amp;</span><span style="color:#F07178;">server_addr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#F07178;">server_addr</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">ret </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">perror</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bind</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">exit</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /* 4. 监听套接字，并允许最大连接数为64 */</span></span>
<span class="line"><span style="color:#F07178;">  ret </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">listen</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">lfd</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">64</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">ret </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">perror</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">listen</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">exit</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /* 5. 阻塞等待连接请求，　并接受连接请求 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> sockaddr_in client_addr</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">  // 客户端地址信息</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">socklen_t</span><span style="color:#F07178;"> clien_len </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#F07178;">client_addr</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> cfd </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">accept</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">lfd</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> sockaddr</span><span style="color:#89DDFF;">*)&amp;</span><span style="color:#F07178;">client_addr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">clien_len</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">cfd </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">perror</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">accept</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">exit</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 如果有客户端连接，则打印客户端信息：IP地址和端口号</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">client iP: %s, port: %d</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">         </span><span style="color:#82AAFF;">inet_ntop</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">AF_INET</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">client_addr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sin_addr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">s_addr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> recv_buf</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                   </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#F07178;">recv_buf</span><span style="color:#89DDFF;">)),</span></span>
<span class="line"><span style="color:#F07178;">         </span><span style="color:#82AAFF;">ntohs</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">client_addr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sin_port</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">memset</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">send_buf</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#F07178;">send_buf</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">memset</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">recv_buf</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#F07178;">recv_buf</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 阻塞接收客户端发来的消息</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> len </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">recv</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">cfd</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> recv_buf</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#F07178;">recv_buf</span><span style="color:#89DDFF;">),</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">len </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 打印接受到的数据</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Server recv: %s</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> recv_buf</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 给客户端回复ok!!!</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">strcpy</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">send_buf</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">OK!!!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">send</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">cfd</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> send_buf</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">strlen</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">send_buf</span><span style="color:#89DDFF;">),</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 如果收到的是exit则退出</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">strcmp</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">recv_buf</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">exit</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">len </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Client quit!!!</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">perror</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">recv</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">close</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">cfd</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">close</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">lfd</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="client" tabindex="-1">Client <a class="header-anchor" href="#client" aria-label="Permalink to &quot;Client&quot;">​</a></h3><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// client 端相对简单, 另外可以使用nc命令连接-&gt;nc ip prot</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">arpa/inet.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdio.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdlib.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">string.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">sys/socket.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">unistd.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">argc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">argv</span><span style="color:#C792EA;">[]</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 配置要连接的服务器IP和端口</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">IP </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">192.168.100.128</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> PORT </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">9821</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 发送和接收缓冲区</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">send_buf</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1024</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">recv_buf</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1024</span><span style="color:#89DDFF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /* 1. 设置要连接的服务器地址 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> sockaddr_in server_addr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">server_addr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sin_family</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> AF_INET</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">server_addr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sin_port</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">htons</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">PORT</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">inet_pton</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">AF_INET</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> IP</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">server_addr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sin_addr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">s_addr</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /* 2. 创建套接字 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> cfd </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">socket</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">AF_INET</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> SOCK_STREAM</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">cfd </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">perror</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">socket</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">exit</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /* 3. 连接服务器 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> ret </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">connect</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">cfd</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> sockaddr </span><span style="color:#89DDFF;">*)&amp;</span><span style="color:#F07178;">server_addr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#F07178;">server_addr</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">ret </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">perror</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">connect</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">exit</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">memset</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">send_buf</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#F07178;">send_buf</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">memset</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">recv_buf</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#F07178;">recv_buf</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">scanf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">%s</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> send_buf</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /* 4. 发送数据给服务器端 */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">send</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">cfd</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> send_buf</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">strlen</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">send_buf</span><span style="color:#89DDFF;">),</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /*  5. 从服务器接收数据 */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">recv</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">cfd</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> recv_buf</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#F07178;">recv_buf</span><span style="color:#89DDFF;">),</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 打印接收到的数据</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Client recv: %s</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> recv_buf</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 如果发送exit，则退出连接</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">strcmp</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">send_buf</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">exit</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">close</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">cfd</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="本地socket" tabindex="-1">本地socket <a class="header-anchor" href="#本地socket" aria-label="Permalink to &quot;本地socket&quot;">​</a></h3><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// local socket</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">arpa/inet.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdio.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdlib.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">string.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">sys/socket.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">sys/stat.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">unistd.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">argc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">argv</span><span style="color:#89DDFF;">[])</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">IP </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">127.0.0.1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 服务器IP地址一般设置成本地所有IP，不需要改动</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> PORT </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">9821</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">        // 服务器开放的端口号</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 发送和接收缓冲区</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> send_buf</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1024</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> recv_buf</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1024</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> val </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 套接字配置函数所使用的值</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">memset</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">send_buf</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#A6ACCD;">send_buf</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">memset</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">recv_buf</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#A6ACCD;">recv_buf</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">sprintf</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">send_buf</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">%s</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello, World!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /* 1. 设置发送端IP和端口*/</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sockaddr_in</span><span style="color:#A6ACCD;"> server_addr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    server_addr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sin_family </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> AF_INET</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    server_addr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sin_port </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">htons</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">PORT</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> //设置服务器端口，必须是没有被占用的端口</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">inet_pton</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">AF_INET</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> IP</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">              </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">server_addr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sin_addr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">s_addr</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> //服务器IP设置为本地所有的IP</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /* 2. 创建监听的套接字 */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> lfd </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">socket</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">AF_INET</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> SOCK_STREAM</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /* 2.1 配置套接字，实现端口复用 */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">setsockopt</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">lfd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> SOL_SOCKET</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> SO_REUSEADDR</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*)&amp;</span><span style="color:#A6ACCD;">val</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#A6ACCD;">val</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /* 3. 将套接字和服务器地址绑定*/</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">bind</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">lfd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sockaddr</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">)&amp;</span><span style="color:#A6ACCD;">server_addr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#A6ACCD;">server_addr</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /* 4. 监听套接字，并允许最大连接数为64 */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">listen</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">lfd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">64</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /* 5. 创建客户端socket */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> cfd </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">socket</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">AF_INET</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> SOCK_STREAM</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /* 6. 连接服务端 */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">connect</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cfd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sockaddr</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">)&amp;</span><span style="color:#A6ACCD;">server_addr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#A6ACCD;">server_addr</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /* 7. 阻塞等待连接请求，并接受连接请求 */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sockaddr_in</span><span style="color:#A6ACCD;"> client_info</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 客户端地址信息</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">socklen_t</span><span style="color:#A6ACCD;"> clien_len </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#A6ACCD;">client_info</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> accept_fd </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">accept</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">lfd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sockaddr</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">)&amp;</span><span style="color:#A6ACCD;">client_info</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">clien_len</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 如果有客户端连接，则打印客户端信息：IP地址和端口号</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">client iP: %s, port: %d</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">           </span><span style="color:#82AAFF;">inet_ntop</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">AF_INET</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">client_info</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sin_addr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">s_addr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> recv_buf</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                     </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#A6ACCD;">recv_buf</span><span style="color:#89DDFF;">)),</span></span>
<span class="line"><span style="color:#A6ACCD;">           </span><span style="color:#82AAFF;">ntohs</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">client_info</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sin_port</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 通过客户端的socket发送数据</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">send</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cfd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> send_buf</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">strlen</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">send_buf</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 通过服务端accept创建的socket接收数据</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">recv</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">accept_fd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> recv_buf</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#A6ACCD;">recv_buf</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">recv: %s</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> recv_buf</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">close</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cfd</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">close</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">lfd</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="tcp状态转换" tabindex="-1">TCP状态转换 <a class="header-anchor" href="#tcp状态转换" aria-label="Permalink to &quot;TCP状态转换&quot;">​</a></h2><p>在 TCP 进行三次握手，或者四次挥手的过程中，通信的服务器和客户端内部会发送状态上的变化，发生的状态变化在程序中是看不到的，这个状态的变化也不需要程序猿去维护，但是在某些情况下进行程序的调试会去查看相关的状态信息，先来看三次握手过程中的状态转换。</p><p><img src="`+E+`" alt="img"></p><h3 id="三次握手" tabindex="-1">三次握手 <a class="header-anchor" href="#三次握手" aria-label="Permalink to &quot;三次握手&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">在第一次握手之前，服务器端必须先启动，并且已经开始了监听</span></span>
<span class="line"><span style="color:#A6ACCD;">  - 服务器端先调用了 listen() 函数, 开始监听</span></span>
<span class="line"><span style="color:#A6ACCD;">  - 服务器启动监听前后的状态变化: 没有状态 ---&gt; LISTEN</span></span></code></pre></div><p>第一次握手:</p><ul><li>客户端：调用了 connect() 函数，状态变化：没有状态 -&gt; SYN_SENT</li><li>服务器：收到连接请求 SYN，状态变化：LISTEN -&gt; SYN_RCVD</li></ul><p>第二次握手:</p><ul><li>服务器：给客户端回复 ACK，并且请求和客户端建立连接，状态无变化，依然是 SYN_RCVD</li><li>客户端：接收数据，收到了 ACK，状态变化：SYN_SENT -&gt; ESTABLISHED</li></ul><p>第三次握手:</p><ul><li>客户端：给服务器回复 ACK，同意建立连接，状态没有变化，还是 ESTABLISHED</li><li>服务器：收到了 ACK，状态变化：SYN_RCVD -&gt; ESTABLISHED</li></ul><p>三次握手完成之后，客户端和服务器都变成了同一种状态，这种状态叫：ESTABLISHED，表示双向连接已经建立， 可以通信了。在通过过程中，正常的通信状态就是 ESTABLISHED。</p><h3 id="四次挥手" tabindex="-1">四次挥手 <a class="header-anchor" href="#四次挥手" aria-label="Permalink to &quot;四次挥手&quot;">​</a></h3><p>第一次挥手:</p><ul><li><p>客户端：调用 close() 函数，将 tcp 协议中的 FIN 设置为 1，请求和服务器断开连接，状态变化:ESTABLISHED -&gt; FIN_WAIT_1</p></li><li><p>服务器：收到断开连接请求，状态变化: ESTABLISHED -&gt; CLOSE_WAIT</p></li></ul><p>第二次挥手:</p><ul><li>服务器：回复 ACK，同意断开连接的请求，状态没有变化，还是 CLOSE_WAIT</li><li>客户端：收到 ACK，状态变化：FIN_WAIT_1 -&gt; FIN_WAIT_2</li></ul><p>第三次挥手:</p><ul><li>服务器端：调用 close () 函数，发送 FIN 给客户端，请求断开连接，状态变化：CLOSE_WAIT -&gt; LAST_ACK</li><li>客户端：收到 FIN，状态变化：FIN_WAIT_2 -&gt; TIME_WAIT</li></ul><p>第四次挥手:</p><ul><li>客户端：回复 ACK 给服务器，状态是没有变化的，状态变化：TIME_WAIT -&gt; 没有状态</li><li>服务器端：收到 ACK，双向连接断开，状态变化：LAST_ACK -&gt; 无状态(没有了)</li></ul><h3 id="状态转换" tabindex="-1">状态转换 <a class="header-anchor" href="#状态转换" aria-label="Permalink to &quot;状态转换&quot;">​</a></h3><p>在下图中同样是描述 TCP 通信过程中的客户端和服务器端的状态转，看起来比较乱，其实只需要看两条主线：红色实线和绿色虚线。关于黑色的实线对应的是一些特殊情况下的状态切换，在此不做任何分析。</p><p>因为三次握手是由客户端发起的，据此分析红色的实线表示的客户端的状态，绿色虚线表示的是服务器端的状态。</p><p><img src="`+u+`" alt="img"></p><p>客户端：</p><ul><li>第一次握手：发送 SYN，没有状态 -&gt; SYN_SENT</li><li>第二次握手：收到回复的 ACK，SYN_SENT -&gt; ESTABLISHED</li><li>主动断开连接，第一次挥手发送 FIN，状态 ESTABLISHED -&gt; FIN_WAIT_1</li><li>第二次挥手，收到 ACK，状态 FIN_WAIT_1 -&gt; FIN_WAIT_2</li><li>第三次挥手，收到 FIN，状态 FIN_WAIT_2 -&gt; TIME_WAIT</li><li>第四次挥手，回复 ACK，等待 2 倍报文时长之后，状态 TIME_WAIT -&gt; 没有状态</li></ul><p>服务器端：</p><ul><li>启动监听，没有状态 -&gt; LISTEN</li><li>第一次握手，收到 SYN，状态 LISTEN -&gt; SYN_RCVD</li><li>第三次握手，收到 ACK，状态 SYN_RCVD -&gt; ESTABLISHED</li><li>收到断开连接请求，第一次挥手状态 ESTABLISHED -&gt; CLOSE_WAIT</li><li>第三次挥手，发送 FIN 请求和客户端断开连接，状态 CLOSE_WAIT -&gt; LAST_ACK</li><li>第四次挥手，收到 ACK，状态 LAST_ACK -&gt; 无状态(没有了)</li></ul><p>在 TCP 通信的时候，当主动断开连接的一方接收到被动断开连接的一方发送的 FIN 和最终的 ACK 后（第三次挥手完成），连接的主动关闭方必须处于 TIME_WAIT 状态并持续 2MSL（Maximum Segment Lifetime）时间**，这样就能够让 TCP 连接的主动关闭方在它发送的 ACK 丢失的情况下重新发送最终的 ACK。**</p><p>一倍报文寿命 (MSL) 大概时长为 30s，因此两倍报文寿命一般在 1 分钟作用。</p><p>主动关闭方重新发送的最终ACK，是因为被动关闭方重传了它的FIN。事实上，被动关闭方总是重传FIN直到它收到一个最终的ACK。</p><h3 id="半关闭" tabindex="-1">半关闭 <a class="header-anchor" href="#半关闭" aria-label="Permalink to &quot;半关闭&quot;">​</a></h3><p>TCP 连接只有一方发送了 FIN，另一方没有发出 FIN 包，仍然可以在一个方向上正常发送数据，这中状态可以称之为半关闭或者半连接。当四次挥手完成两次的时候，就相当于实现了半关闭，在程序中只需要在某一端直接调用 close () 函数即可。套接字通信默认是双工的，也就是双向通信，如果进行了半关闭就变成了单工，数据只能单向流动了。比如下面的这个例子：</p><p>服务器端:</p><ul><li>调用了 close () 函数，因此不能发数据，只能接收数据</li><li>关闭了服务器端的写操作，现在只能进行读操作 –&gt; 变成了读端</li></ul><p>客户端:</p><ul><li><p>没有调用 close ()，客户端和服务器的连接还保持着</p></li><li><p>客户端可以给服务器发送数据，也可以接收服务器发送的数据 （但是，服务器已经丧失了发送数据的能力），因此客户端也只能发送数据，接收不到数据 –&gt; 变成了写端</p></li></ul><p>按照上述流程做了半关闭之后，从双工变成了单工，数据单向流动的方向：客户端 —–&gt; 服务器端。</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 专门处理半关闭的函数</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">sys/socket.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 可以有选择的关闭读/写, close()函数只能关闭写操作</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">shutdown</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">sockfd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">how</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>sockfd: 要操作的文件描述符</p><p>how:</p><ul><li>SHUT_RD: 关闭文件描述符对应的读操作</li><li>SHUT_WR: 关闭文件描述符对应的写操作</li><li>SHUT_RDWR: 关闭文件描述符对应的读写操作</li></ul><p>返回值：函数调用成功返回 0，失败返回 - 1</p>`,167),g=[h];function k(b,m,I,v,P,q){return n(),a("div",null,g)}const N=s(_,[["render",k]]);export{S as __pageData,N as default};
