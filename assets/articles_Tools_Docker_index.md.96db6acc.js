import{_ as s,o as a,c as n,U as l}from"./chunks/framework.adbdbaa5.js";const d=JSON.parse('{"title":"Docker","description":"","frontmatter":{},"headers":[],"relativePath":"articles/Tools/Docker/index.md","filePath":"articles/Tools/Docker/index.md"}'),o={name:"articles/Tools/Docker/index.md"},p=l(`<h1 id="docker" tabindex="-1">Docker <a class="header-anchor" href="#docker" aria-label="Permalink to &quot;Docker&quot;">​</a></h1><h2 id="docker-基本操作" tabindex="-1">Docker 基本操作 <a class="header-anchor" href="#docker-基本操作" aria-label="Permalink to &quot;Docker 基本操作&quot;">​</a></h2><h3 id="快速开始" tabindex="-1">快速开始 <a class="header-anchor" href="#快速开始" aria-label="Permalink to &quot;快速开始&quot;">​</a></h3><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pull</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ubuntu</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-d</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-it</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">22</span><span style="color:#C3E88D;">:22</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/Users/qiuyeyijian/Workspace/Docker/ubuntu:/home/Workspace</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--name</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ubuntu</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ubuntu</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">attach</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">容器id/name</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">system</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">df</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--verbose</span></span></code></pre></div><ul><li><code>-it</code>: 以交互方式启动容器</li><li><code>-p</code>: 当前物理机端口到容器端口的映射</li><li><code>--name</code>: 为当前要运行的容器起个名字</li><li><code>-v</code>: 本地路径到容器内路径的映射</li><li><code>-d</code>: 代表后台运行容器</li><li><code>--restart=always</code></li></ul><p>更新软件源：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu-ports/" target="_blank" rel="noreferrer">ubuntu-ports | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p><p>如果报<code>The certificate is NOT trusted. </code>在docker中执行如下命令</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">touch </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">etc</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">apt</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">apt</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">conf</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">d</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">99verify</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">peer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">conf  </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> echo </span><span style="color:#89DDFF;">&gt;&gt;/</span><span style="color:#A6ACCD;">etc</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">apt</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">apt</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">conf</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">d</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">99verify</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">peer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">conf </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Acquire { https::Verify-Peer false }</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><h3 id="安装-docker" tabindex="-1">安装 Docker <a class="header-anchor" href="#安装-docker" aria-label="Permalink to &quot;安装 Docker&quot;">​</a></h3><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># step 1: 安装必要的一些系统工具</span></span>
<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">yum</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-y</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">yum-utils</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">device-mapper-persistent-data</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">lvm2</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Step 2: 添加软件源信息</span></span>
<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">yum-config-manager</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--add-repo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Step 3: 更新并安装Docker-CE</span></span>
<span class="line"><span style="color:#FFCB6B;">dnf</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">yum</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">makecache</span></span>
<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">yum</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-y</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-ce</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Step 4: 开启Docker服务</span></span>
<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">systemctl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">start</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Step 5: 设置开机自启动</span></span>
<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">systemctl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">enable</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Step 6: 测试</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">hello-world</span></span></code></pre></div><h3 id="docker-的中央仓库" tabindex="-1">Docker 的中央仓库 <a class="header-anchor" href="#docker-的中央仓库" aria-label="Permalink to &quot;Docker 的中央仓库&quot;">​</a></h3><blockquote><ol><li><p>Docker 官方的中央仓库：这个仓库是镜像最全的，但是下载速度较慢</p><p><a href="https://hub.docker.com/" target="_blank" rel="noreferrer">https://hub.docker.com/</a></p></li><li><p>国内镜像网站：网易蜂巢，daocloud...</p><p><a href="https://c.163yun.com/hub/" target="_blank" rel="noreferrer">https://c.163yun.com/hub/</a></p><p><a href="http://hub.daocloud.io" target="_blank" rel="noreferrer">http://hub.daocloud.io</a> (推荐使用)</p></li><li><p>在公司内部会采用私服的方式拉去镜像（添加配置）</p></li></ol></blockquote><h3 id="镜像的操作" tabindex="-1">镜像的操作 <a class="header-anchor" href="#镜像的操作" aria-label="Permalink to &quot;镜像的操作&quot;">​</a></h3><p>下面均使用 DaoCloud 镜像站来拉去镜像</p><h4 id="_1-拉取镜像到本地" tabindex="-1">1. 拉取镜像到本地 <a class="header-anchor" href="#_1-拉取镜像到本地" aria-label="Permalink to &quot;1. 拉取镜像到本地&quot;">​</a></h4><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pull</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">镜像名称[:tag]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 举个例子, 这里使用daocloud镜像站</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pull</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">daocloud.io/library/tomcat:8.5.15-jre8</span></span></code></pre></div><h4 id="_2-查看本地全部镜像" tabindex="-1">2. 查看本地全部镜像 <a class="header-anchor" href="#_2-查看本地全部镜像" aria-label="Permalink to &quot;2. 查看本地全部镜像&quot;">​</a></h4><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">images</span></span></code></pre></div><h4 id="_3-删除本地镜像" tabindex="-1">3. 删除本地镜像 <a class="header-anchor" href="#_3-删除本地镜像" aria-label="Permalink to &quot;3. 删除本地镜像&quot;">​</a></h4><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rmi</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">镜像的标识</span></span></code></pre></div><h4 id="_4-镜像的导入导出-不规范" tabindex="-1">4. 镜像的导入导出（不规范） <a class="header-anchor" href="#_4-镜像的导入导出-不规范" aria-label="Permalink to &quot;4. 镜像的导入导出（不规范）&quot;">​</a></h4><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 将本地的镜像导出</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">save</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-o</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">导出路径</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">镜像id</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 加载本地的镜像文件</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">load</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-i</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">镜像文件</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 修改镜像名称</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tag</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">镜像id</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">新镜像名称:版本</span></span></code></pre></div><h3 id="容器的操作" tabindex="-1">容器的操作 <a class="header-anchor" href="#容器的操作" aria-label="Permalink to &quot;容器的操作&quot;">​</a></h3><h4 id="_1-运行容器" tabindex="-1">1. 运行容器 <a class="header-anchor" href="#_1-运行容器" aria-label="Permalink to &quot;1. 运行容器&quot;">​</a></h4><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 简单操作</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">镜像标识</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">镜像名称[:tag]</span></span></code></pre></div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 常用操作</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-d</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">宿主机端口:容器端口</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--name</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">容器名称</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">镜像名称</span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">镜像标识[:tag]</span></span></code></pre></div><blockquote><ul><li>-d =&gt; 代表后台运行容器</li><li>-p 宿主机端口:容器端口 =&gt;　当前 Linux 物理机端口到容器端口的映射</li><li>--name 容器名称 =&gt; 为当前要运行的容器起个名字</li></ul></blockquote><h4 id="_2-查看正在运行的容器" tabindex="-1">2. 查看正在运行的容器 <a class="header-anchor" href="#_2-查看正在运行的容器" aria-label="Permalink to &quot;2. 查看正在运行的容器&quot;">​</a></h4><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ps</span><span style="color:#A6ACCD;"> [-qa]</span></span></code></pre></div><blockquote><ul><li>-a =&gt; 查看全部容器，包括没有运行的</li><li>-q =&gt; 只查看容器得到的标识</li></ul></blockquote><h4 id="_3-查看容器日志" tabindex="-1">3. 查看容器日志 <a class="header-anchor" href="#_3-查看容器日志" aria-label="Permalink to &quot;3. 查看容器日志&quot;">​</a></h4><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">logs</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-f</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">容器id</span></span></code></pre></div><h4 id="_4-进入容器内部" tabindex="-1">4. 进入容器内部 <a class="header-anchor" href="#_4-进入容器内部" aria-label="Permalink to &quot;4. 进入容器内部&quot;">​</a></h4><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">exec</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-it</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">容器id</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/bin/bash</span></span></code></pre></div><h4 id="_5-删除容器" tabindex="-1">5. 删除容器 <a class="header-anchor" href="#_5-删除容器" aria-label="Permalink to &quot;5. 删除容器&quot;">​</a></h4><p>删除容器前请先停止容器</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 1. 停止指定容器</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stop</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">容器id</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 2. 停止所有容器</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stop</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> ps -qa</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 3. 删除指定容器</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">容器id</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 4. 删除全部容器</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rm</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> ps -qa</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h4 id="_6-启动容器" tabindex="-1">6. 启动容器 <a class="header-anchor" href="#_6-启动容器" aria-label="Permalink to &quot;6. 启动容器&quot;">​</a></h4><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">start</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">容器id</span></span></code></pre></div><h2 id="docker-的应用" tabindex="-1">Docker 的应用 <a class="header-anchor" href="#docker-的应用" aria-label="Permalink to &quot;Docker 的应用&quot;">​</a></h2><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">#可以通过命令将宿主机的内容复制到容器内部</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cp</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">文件名称</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">容器id:容器内部路径</span></span></code></pre></div><h3 id="数据卷基本操作" tabindex="-1">数据卷基本操作 <a class="header-anchor" href="#数据卷基本操作" aria-label="Permalink to &quot;数据卷基本操作&quot;">​</a></h3><blockquote><p>为了部署 SSM 的工程，需要使用到 cp 命令将宿主机内的 war 包复制到容器内部。</p><p>数据卷：将宿主机的一个目录映射到容器的一个目录中。</p><p>可以在宿主机中操作目录中的内容，那么容器内部映射的文件也会跟着一起改变。</p></blockquote><h4 id="_1-创建数据卷" tabindex="-1">1. 创建数据卷 <a class="header-anchor" href="#_1-创建数据卷" aria-label="Permalink to &quot;1. 创建数据卷&quot;">​</a></h4><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 创建数据卷后，默认会存放在一个目录下 /var/lib/docker/volumes/数据卷名称/_data</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">volume</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">create</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">数据卷名称</span></span></code></pre></div><h4 id="_2-查看数据卷的详细信息" tabindex="-1">2. 查看数据卷的详细信息 <a class="header-anchor" href="#_2-查看数据卷的详细信息" aria-label="Permalink to &quot;2. 查看数据卷的详细信息&quot;">​</a></h4><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">volume</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">inspect</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">数据卷名称</span></span></code></pre></div><h4 id="_3-查看全部数据卷" tabindex="-1">3. 查看全部数据卷 <a class="header-anchor" href="#_3-查看全部数据卷" aria-label="Permalink to &quot;3. 查看全部数据卷&quot;">​</a></h4><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">volume</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ls</span></span></code></pre></div><h4 id="_4-删除数据卷" tabindex="-1">4. 删除数据卷 <a class="header-anchor" href="#_4-删除数据卷" aria-label="Permalink to &quot;4. 删除数据卷&quot;">​</a></h4><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">volume</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">数据卷名称</span></span></code></pre></div><h3 id="数据卷应用" tabindex="-1">数据卷应用 <a class="header-anchor" href="#数据卷应用" aria-label="Permalink to &quot;数据卷应用&quot;">​</a></h3><p>当你映射数据卷是，如果数据卷不存在，docker 会帮你自动创建。将容器内部自带的文件，存储在默认的存放路径中。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">数据卷名称:容器内部的路径</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">镜像id</span></span></code></pre></div><p>如果指定一个路径作为数据卷的存放位置，这个路径下是空的。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">路径:容器内部的路径</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">镜像id</span></span></code></pre></div><h2 id="docker-自定义镜像" tabindex="-1">Docker 自定义镜像 <a class="header-anchor" href="#docker-自定义镜像" aria-label="Permalink to &quot;Docker 自定义镜像&quot;">​</a></h2><blockquote><p>中央仓库上的镜像，也是 Docker 的用户自己上传的</p></blockquote><p><strong>1. 创建一个 Dockerfile 文件，并且自定义镜像信息</strong></p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">vim</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Dockerfile</span></span></code></pre></div><blockquote><p>Dockerfile 文件中常用的内容</p><ul><li>from =&gt; 指定当前自定义镜像依赖的环境</li><li>copy =&gt; 将相对路径下的内容复制到自定义镜像中</li><li>workdir =&gt; 声明镜像的默认工作目录</li><li>cmd =&gt; 需要执行的命令（在 workdir 下执行的，cmd 可以写多个，只以最后一个为准）</li></ul></blockquote><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 举个栗子 vim /root/workspace/Dockerfile</span></span>
<span class="line"><span style="color:#FFCB6B;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">daocloud.io/library/tomcat:8.5.15-jre8</span></span>
<span class="line"><span style="color:#FFCB6B;">copy</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/root/workspace/ssm.war</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/usr/local/tomcat/webapps</span></span></code></pre></div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 写好Dockerfile文件后，在Dockerfile文件目录下，运行命令制作镜像</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-t　镜像名称:</span><span style="color:#89DDFF;">[</span><span style="color:#C3E88D;">tag</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/root/workspace/Dockerfile</span></span></code></pre></div><h2 id="docker-compose" tabindex="-1">Docker-Compose <a class="header-anchor" href="#docker-compose" aria-label="Permalink to &quot;Docker-Compose&quot;">​</a></h2><blockquote><ul><li><p>之前运行一个镜像，需要添加大量参数。可以通过 Docker-Compose 编写这些参数</p></li><li><p>Docker-Compose 可以帮助我们批量地管理容器，只需要通过一个<code>docker-compose.yml</code>文件去维护即可</p></li></ul></blockquote><h3 id="下载安装" tabindex="-1">下载安装 <a class="header-anchor" href="#下载安装" aria-label="Permalink to &quot;下载安装&quot;">​</a></h3><p><strong>1. 去 GitHub 下载 Docker-Compose</strong></p><p><a href="https://github.com/docker/compose/releases/download/1.26.2/docker-compose-Linux-x86_64" target="_blank" rel="noreferrer">docker-compose-Linux-x86_64</a></p><p><strong>2. 赋予可执行权限</strong></p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 重命名，方便接下来的操作</span></span>
<span class="line"><span style="color:#FFCB6B;">mv</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-compose-Linux-x86_64</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-compose</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 赋予可执行权限</span></span>
<span class="line"><span style="color:#FFCB6B;">chmod</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">755</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-compose</span></span></code></pre></div><p><strong>3. 配置环境变量</strong></p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 将docker-compose文件移动到 /usr/local/bin</span></span>
<span class="line"><span style="color:#FFCB6B;">mv</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-compose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/usr/local/bin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">export PATH=</span><span style="color:#A6ACCD;">$PATH</span><span style="color:#C3E88D;">:/usr/local/bin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/etc/profile.d/docker-compose.sh</span></span>
<span class="line"><span style="color:#FFCB6B;">chmod</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">755</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/etc/profile.d/docker-compose.sh</span></span></code></pre></div><h3 id="编写配置文件" tabindex="-1">编写配置文件 <a class="header-anchor" href="#编写配置文件" aria-label="Permalink to &quot;编写配置文件&quot;">​</a></h3><blockquote><p>yml 文件以 key:value 方式来指定配置信息</p><p>多个配置信息以换行+空格缩进的方式来区分</p><p>在 docker-compose.yml 文件中，不要使用制表符</p></blockquote><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">version</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">3.1</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">services</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">mysql</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 服务名称</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">restart</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">always</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#代表只要docker启动，那么这个容器就跟着一起启动</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">image</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">daocloud.io/library/mysql:5.7.6</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#指定镜像路径</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">container_name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mysql</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 指定容器名称</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">ports</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">3306:3306</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 指定端口号的映射，可以指定多个，在下面继续添加即可</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">environment</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">MYSQL_ROOT_PASSWORD</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">root</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 指定mysql的root用户的登录密码</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">TZ</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Asia/Shanghai</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 指定时区</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">tomcat</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">restart</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">always</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">image</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">daocloud.io/library/tomcat:8.5.15-jre8</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">container_name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tomcat</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">ports</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">8080:8080</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">environment</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">TZ</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Asia/Shanghai</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">volumes</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/opt/docker/tomcat/webapps:/usr/local/tomcat/webapps</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/opt/docker/tomcat/logs:/usr/local/tomcat/logs</span></span></code></pre></div><h3 id="使用-docker-compose-命名管理容器" tabindex="-1">使用 docker-compose 命名管理容器 <a class="header-anchor" href="#使用-docker-compose-命名管理容器" aria-label="Permalink to &quot;使用 docker-compose 命名管理容器&quot;">​</a></h3><blockquote><p>在使用 docker-compose 的命令时，默认会在当前目录下找 docker-compose.yml 文件</p></blockquote><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 启动管理的容器</span></span>
<span class="line"><span style="color:#C3E88D;">docker-compose up -d</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 关闭并删除容器</span></span>
<span class="line"><span style="color:#C3E88D;">docker-compose down</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 开启|关闭|重启已经存在的有docker-compose维护的容器</span></span>
<span class="line"><span style="color:#C3E88D;">docker-compose start|stop|resart</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 查看容器</span></span>
<span class="line"><span style="color:#C3E88D;">docker-compose ps</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#查看日志</span></span>
<span class="line"><span style="color:#C3E88D;">docker-compose logs -f</span></span></code></pre></div><h3 id="docker-compose-配置-dockfile-使用" tabindex="-1">docker-compose 配置 Dockfile 使用 <a class="header-anchor" href="#docker-compose-配置-dockfile-使用" aria-label="Permalink to &quot;docker-compose 配置 Dockfile 使用&quot;">​</a></h3><blockquote><p>使用 docker-compose.yml 文件以及 Dockerfile 文件在生成自定义镜像的同时启动当前镜像，并且又 docker-compose 去管理容器</p></blockquote><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># docker-compose.yml 文件</span></span>
<span class="line"><span style="color:#F07178;">version</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">3.1</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">services</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">test</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">restart</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">always</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">build</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">context</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">dockerfile</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Dockerfile</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">image</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test:1.0.1</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">container_name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ssm</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">ports</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">8081:8080</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">environment</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">TZ</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Asia/Shanghai</span></span></code></pre></div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Dockerfile 文件</span></span>
<span class="line"><span style="color:#FFCB6B;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">daocloud.io/library/tomcat:8.5.15-jre8</span></span>
<span class="line"><span style="color:#FFCB6B;">copy</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/root/workspace/ssm.war</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/usr/local/tomcat/webapps</span></span></code></pre></div><p>可以直接启动基于 docker-compose.yml 以及 Dockerfile 文件构建的自定义镜像</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker-compose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">up</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-d</span></span></code></pre></div><p>如果自定义镜像不存在，会帮助我们构建出自定义镜像，如果自定义镜像已经存在，会直接运行这个自定义镜像</p><p>如果需要重新构建自定义镜像，使用</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 只是重新构建</span></span>
<span class="line"><span style="color:#FFCB6B;">docker-compose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 运行前构建</span></span>
<span class="line"><span style="color:#FFCB6B;">docker-compose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">up</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-d</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--build</span></span></code></pre></div><h2 id="docker-一些问题" tabindex="-1">Docker 一些问题 <a class="header-anchor" href="#docker-一些问题" aria-label="Permalink to &quot;Docker 一些问题&quot;">​</a></h2><h3 id="进入容器内部" tabindex="-1">进入容器内部 <a class="header-anchor" href="#进入容器内部" aria-label="Permalink to &quot;进入容器内部&quot;">​</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">//根据容器id</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">进入对应镜像文件夹,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">可修改相关配置文件，</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">exec</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-it</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">容器id</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">//如果需要以root</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">用户的身份进入容器则使用</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">exec</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-it</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--user</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">root</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">容器id</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/bin/bash</span></span></code></pre></div><h3 id="容器自启动" tabindex="-1">容器自启动 <a class="header-anchor" href="#容器自启动" aria-label="Permalink to &quot;容器自启动&quot;">​</a></h3><p>运行容器的时候，加上 <code>--restart=always</code> 命令可以令容器自启动</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-d</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--restart=always</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10240</span><span style="color:#C3E88D;">:8080</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10241</span><span style="color:#C3E88D;">:50000</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/var/jenkins_node:/var/jenkins_home</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/etc/localtime:/etc/localtime</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--name</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">myjenkins</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">jenkins/jenkins</span></span></code></pre></div><p>如果启动容器的时候没有加 <code>--restart=always</code> 命令，可以使用如下命令，来更新</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">update</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--restart=always</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">容器id</span></span></code></pre></div><p>使用 on-failure 策略时，指定 Docker 将尝试重新启动容器的最大次数。默认情况下，Docker 将尝试永远重新启动容器。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">update</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--restart=on-failure:10</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">容器id</span><span style="color:#A6ACCD;">		</span><span style="color:#C3E88D;">//最大重启10次</span></span></code></pre></div><blockquote><p>--restart 具体参数值详细信息：</p><ul><li><code>--restat=no</code> 容器退出时，不重启容器</li><li><code>--restart=no-failure</code>只有在非 0 状态退出时才重新启动容器；</li><li><code>--restart=always</code> 无论退出状态是如何，都重启容器；</li></ul></blockquote><h2 id="docker-ci-cd" tabindex="-1">Docker CI, CD <a class="header-anchor" href="#docker-ci-cd" aria-label="Permalink to &quot;Docker CI, CD&quot;">​</a></h2><h2 id="mysql" tabindex="-1">MYSQL <a class="header-anchor" href="#mysql" aria-label="Permalink to &quot;MYSQL&quot;">​</a></h2><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 拉取镜像</span></span>
<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3306</span><span style="color:#C3E88D;">:3306</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--name</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mysql</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--restart=always</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-e</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">MYSQL_ROOT_PASSWORD=</span><span style="color:#F78C6C;">123456</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-d</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mysql</span></span></code></pre></div><h2 id="tomcat" tabindex="-1">Tomcat <a class="header-anchor" href="#tomcat" aria-label="Permalink to &quot;Tomcat&quot;">​</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">version: &quot;3.1&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">services:</span></span>
<span class="line"><span style="color:#A6ACCD;">  tomcat:</span></span>
<span class="line"><span style="color:#A6ACCD;">    restart: always</span></span>
<span class="line"><span style="color:#A6ACCD;">    image: daocloud.io/library/tomcat:8.5.15-jre8</span></span>
<span class="line"><span style="color:#A6ACCD;">    container_name: tomcat</span></span>
<span class="line"><span style="color:#A6ACCD;">    ports:</span></span>
<span class="line"><span style="color:#A6ACCD;">      - 8080:8080</span></span>
<span class="line"><span style="color:#A6ACCD;">    environment:</span></span>
<span class="line"><span style="color:#A6ACCD;">      TZ: Asia/Shanghai</span></span>
<span class="line"><span style="color:#A6ACCD;">    volumes:</span></span>
<span class="line"><span style="color:#A6ACCD;">      - /opt/docker/tomcat/webapps:/usr/local/tomcat/webapps</span></span>
<span class="line"><span style="color:#A6ACCD;">      - /opt/docker/tomcat/logs:/usr/local/tomcat/logs</span></span></code></pre></div>`,103),e=[p];function c(t,r,C,y,i,D){return a(),n("div",null,e)}const h=s(o,[["render",c]]);export{d as __pageData,h as default};
