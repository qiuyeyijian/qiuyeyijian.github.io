import{_ as s,o as a,c as n,U as l}from"./chunks/framework.adbdbaa5.js";const i=JSON.parse('{"title":"C++ 数组名与指针","description":"","frontmatter":{},"headers":[],"relativePath":"articles/Other/array-and-pointer.md","filePath":"articles/Other/array-and-pointer.md"}'),p={name:"articles/Other/array-and-pointer.md"},o=l(`<h1 id="c-数组名与指针" tabindex="-1">C++ 数组名与指针 <a class="header-anchor" href="#c-数组名与指针" aria-label="Permalink to &quot;C++ 数组名与指针&quot;">​</a></h1><p>以大小为16，元素类型为int的数组为例。</p><p>首先，<code>int[16]</code>是一种类型，我们可以使用using取个别名。这种类型至少能够反映出三种信息：类型，大小，维度。</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">arr_t</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;">];</span></span></code></pre></div><p>其次，下面对于数组的定义完全相同：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">arr_t</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">};</span><span style="color:#676E95;font-style:italic;">		// 等同于int a[16] = {0};</span></span></code></pre></div><p>a可以理解成一种变量：名字是a, 类型是int[16], 值是首地址。<code>sizeof(a)</code>是整个内存块的大小，<code>&amp;a</code>是整个内存块的首地址，所以&amp;a 和 a 在值上是相等的，但是类型不同。</p><p>所以数组名的的类型应该为int[16]，而不是int*，这一点通过typeid可以打印出来。</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">typeid(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">name</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">endl</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">typeid(&amp;</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">name</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">endl</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">typeid(</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">*).</span><span style="color:#82AAFF;">name</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">endl</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>当我们将数组名赋值给一个指针时，中间应该发生了隐式类型转换，丢失了一些信息（比如类型，大小，维度），只保留了数组的地址信息。这种现象也可以成为数组衰减为指针，这其中有历史的原因。</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">endl</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">		// 16</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">cout </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">endl</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">		// 8</span></span></code></pre></div><p>同理，当我们给一个函数传递一个数组时，我们只能通过指针传递(语言本身的设计，况且函数的调用堆栈也不存储不了太大的数组)，中间也发生了隐式类型转换，所以我们无法在函数内部通过指针得到数组的大小，必须增加表示数组大小的参数。</p>`,12),t=[o];function e(c,r,D,F,y,C){return a(),n("div",null,t)}const d=s(p,[["render",e]]);export{i as __pageData,d as default};
