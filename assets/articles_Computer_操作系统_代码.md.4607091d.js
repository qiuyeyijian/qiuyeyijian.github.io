import{_ as s,v as n,b as a,R as l}from"./chunks/framework.53249f15.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"articles/Computer/操作系统/代码.md","filePath":"articles/Computer/操作系统/代码.md"}'),p={name:"articles/Computer/操作系统/代码.md"},o=l(`<div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/*索引节点对象由inode结构体表示，定义文件在linux / fs.h中 */</span></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">inode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">hlist_node</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i_hash</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">         /* 哈希表 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">list_head</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i_list</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">          /* 索引节点链表 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">list_head</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i_dentry</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">        /* 目录项链表 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">unsigned</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">long</span><span style="color:#F07178;"> i_ino</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">              /* 节点号 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">atomic_t</span><span style="color:#F07178;"> i_count</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">                 /* 引用记数 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">umode_t</span><span style="color:#F07178;"> i_mode</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">                   /* 访问权限控制 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">unsigned</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> i_nlink</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">             /* 硬链接数 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">uid_t</span><span style="color:#F07178;"> i_uid</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">                      /* 使用者id */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">gid_t</span><span style="color:#F07178;"> i_gid</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">                      /* 使用者id组 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">kdev_t</span><span style="color:#F07178;"> i_rdev</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">                    /* 实设备标识符 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">loff_t</span><span style="color:#F07178;"> i_size</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">                    /* 以字节为单位的文件大小 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">timespec</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i_atime</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">          /* 最后访问时间 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">timespec</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i_mtime</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">          /* 最后修改(modify)时间 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">timespec</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i_ctime</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">          /* 最后改变(change)时间 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">unsigned</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> i_blkbits</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">           /* 以位为单位的块大小 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">unsigned</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">long</span><span style="color:#F07178;"> i_blksize</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">          /* 以字节为单位的块大小 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">unsigned</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">long</span><span style="color:#F07178;"> i_version</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">          /* 版本号 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">unsigned</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">long</span><span style="color:#F07178;"> i_blocks</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">           /* 文件的块数 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">unsigned</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">short</span><span style="color:#F07178;"> i_bytes</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">           /* 使用的字节数 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">spinlock_t</span><span style="color:#F07178;"> i_lock</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">                /* 自旋锁 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">rw_semaphore</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i_alloc_sem</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">  /* 索引节点信号量 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">inode_operations</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;">i_op</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">    /* 索引节点操作表 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">file_operations</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;">i_fop</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">    /* 默认的索引节操作 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">super_block</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;">i_sb</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">         /* 相关的超级块 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">file_lock</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;">i_flock</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">        /* 文件锁链表 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">address_space</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;">i_mapping</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">  /* 相关的地址映射 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">address_space</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i_data</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">      /* 设备地址映射 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">dquot</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;">i_dquot</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">MAXQUOTAS</span><span style="color:#89DDFF;">];</span><span style="color:#676E95;font-style:italic;"> /* 节点的磁盘限额 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">list_head</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i_devices</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">       /* 块设备链表 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">pipe_inode_info</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;">i_pipe</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">   /* 管道信息 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">block_device</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;">i_bdev</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">      /* 块设备驱动 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">unsigned</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">long</span><span style="color:#F07178;"> i_dnotify_mask</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">     /* 目录通知掩码 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">dnotify_struct</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;">i_dnotify</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> /* 目录通知 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">unsigned</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">long</span><span style="color:#F07178;"> i_state</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">            /* 状态标志 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">unsigned</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">long</span><span style="color:#F07178;"> dirtied_when</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">       /* 首次修改时间 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">unsigned</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> i_flags</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">             /* 文件系统标志 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">unsigned</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> i_sock</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">             /* 可能是个套接字吧 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">atomic_t</span><span style="color:#F07178;"> i_writecount</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">            /* 写者记数 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">i_security</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">                 /* 安全模块 */</span></span>
<span class="line"><span style="color:#F07178;">  __u32 i_generation</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">               /* 索引节点版本号 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">union</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">generic_ip</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> /* 文件特殊信息 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> u</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *索引节点的操作inode_operations定义在linux/fs.h中</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">inode_operations</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">create</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">inode</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">dentry</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /*VFS通过系统调用create()和open()来调用该函数，从而为dentry对象创建一个新的索引节点。在创建时使用mode制定初始模式*/</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">dentry</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">lookup</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">inode</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">dentry</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /*该韩式在特定目录中寻找索引节点，该索引节点要对应于dentry中给出的文件名*/</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">link</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">dentry</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">inode</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">dentry</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /*该函数被系统调用link()电泳，用来创建硬连接。硬链接名称由dentry参数指定，连接对象是dir目录中ld_dentry目录想所代表的文件*/</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">unlink</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">inode</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">dentry</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /*该函数被系统调用unlink()调用，从目录dir中删除由目录项dentry制动的索引节点对象*/</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">symlink</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">inode</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">dentry</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /*该函数被系统电泳symlik()调用，创建符号连接，该符号连接名称由symname指定，连接对象是dir目录中的dentry目录项*/</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">mkdir</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">inode</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">dentry</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /*该函数被mkdir()调用，创建一个新鲁姆。创建时使用mode制定的初始模式*/</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">rmdir</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">inode</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">dentry</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /*该函数被系统调用rmdir()调用，删除dir目录中的dentry目录项代表的文件*/</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">mknod</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">inode</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">dentry</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">dev_t</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /*该函数被系统调用mknod()调用，创建特殊文件(设备文件、命名管道或套接字)。要创建的文件放在dir目录中，其目录项问dentry，关联的设备为rdev，初始权限由mode指定*/</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">rename</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">inode</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">dentry</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">inode</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">dentry</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /*VFS调用该函数来移动文件。文件源路径在old_dir目录中，源文件由old_dentry目录项所指定，目标路径在new_dir目录中，目标文件由new_dentry指定*/</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">readlink</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">dentry</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /*该函数被系统调用readlink()调用，拷贝数据到特定的缓冲buffer中。拷贝的数据来自dentry指定的符号链接，最大拷贝大小可达到buflen字节*/</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">follow_link</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">dentry</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">nameidata</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /*该函数由VFS调用，从一个符号连接查找他指向的索引节点，由dentry指向的连接被解析*/</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">put_link</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">dentry</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">nameidata</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /*在follow_link()调用之后，该函数由vfs调用进行清楚工作*/</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">truncate</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">inode</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /*该函数由VFS调用，修改文件的大小，在调用之前，索引节点的i_size项必须被设置成预期的大小*/</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">permission</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">inode</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /*该函数用来检查给低昂的inode所代表的文件是否允许特定的访问模式，如果允许特定的访问模式，返回0，否则返回负值的错误码。多数文件系统都将此区域设置为null，使用VFS提供的通用方法进行检查，这种检查操作仅仅比较索引及诶但对象中的访问模式位是否和mask一致，比较复杂的系统，比如支持访问控制链(ACL)的文件系统，需要使用特殊的permission()方法*/</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">setattr</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">dentry</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">iattr</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /*该函数被notify_change调用，在修改索引节点之后，通知发生了改变事件*/</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">getattr</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">vfsmount</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">dentry</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">kstat</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /*在通知索引节点需要从磁盘中更新时，VFS会调用该函数*/</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">setxattr</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">dentry</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">size_t</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /*该函数由VFS调用，向dentry指定的文件设置扩展属性，属性名为name，值为value*/</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">ssize_t</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">getxattr</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">dentry</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">size_t</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /*该函数被VFS调用，向value中拷贝给定文件的扩展属性name对应的数值*/</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">ssize_t</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">listxattr</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">dentry</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">size_t</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /*该函数将特定文件所有属性别表拷贝到一个缓冲列表中*/</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">removexattr</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">dentry</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /*该函数从给定文件中删除指定的属性*/</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">file</span><span style="color:#F07178;">   </span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#89DDFF;">{</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">list_head</span><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">f_list</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">    /*所有打开的文件形成一个链表*/</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">dentry</span><span style="color:#F07178;">           </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;">f_dentry</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> /*指向相关目录项的指针*/</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">vfsmount</span><span style="color:#F07178;">         </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;">f_vfsmnt</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> /*指向VFS安装点的指针*/</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">file_operations</span><span style="color:#F07178;">  </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;">f_op</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">     /*指向文件操作表的指针*/</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">mode_t</span><span style="color:#F07178;"> f_mode</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">                                  /*文件的打开模式*/</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">loff_t</span><span style="color:#F07178;"> f_pos</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">                                   /*文件的当前位置*/</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">unsigned</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">short</span><span style="color:#F07178;"> f_flags</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">                         /*打开文件时所指定的标志*/</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">unsigned</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">short</span><span style="color:#F07178;"> f_count</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">                           /*使用该结构的进程数*/</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">unsigned</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">long</span><span style="color:#F07178;"> f_reada</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> f_ramax</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> f_raend</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> f_ralen</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> f_rawin</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> /*预读标志、要预读的最多页面数、上次预读后的文件指针、预读的字节数以及预读的页面数*/</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> f_owner</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">                  /* 通过信号进行异步I/O数据的传送*/</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">unsigned</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">int</span><span style="color:#F07178;">         f_uid</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> f_gid</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">  /*用户的UID和GID*/</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">int</span><span style="color:#F07178;">                 f_error</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">       /*网络写操作的错误码*/</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">   </span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">unsigned</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">long</span><span style="color:#F07178;"> f_version</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">           /*版本号*/</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">private_data</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">                      /* tty驱动程序所需 */</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div>`,2),t=[o];function e(c,r,y,F,i,D){return n(),a("div",null,t)}const E=s(p,[["render",e]]);export{A as __pageData,E as default};
