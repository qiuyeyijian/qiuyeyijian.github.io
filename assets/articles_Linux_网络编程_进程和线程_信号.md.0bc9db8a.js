import{_ as s,o as n,c as a,O as l}from"./chunks/framework.4afe7240.js";const p="/assets/image-20200425164709088.ae15c4de.png",o="/assets/image-20210206135824272.b1ed0f12.png",t="/assets/image-20210206142122901.d0cb5f85.png",e="/assets/image-20210206181522522.fa2fc8b5.png",u=JSON.parse('{"title":"信号","description":"","frontmatter":{},"headers":[],"relativePath":"articles/Linux/网络编程/进程和线程/信号.md","filePath":"articles/Linux/网络编程/进程和线程/信号.md"}'),c={name:"articles/Linux/网络编程/进程和线程/信号.md"},r=l(`<h1 id="信号" tabindex="-1">信号 <a class="header-anchor" href="#信号" aria-label="Permalink to &quot;信号&quot;">​</a></h1><h2 id="信号概述" tabindex="-1">信号概述 <a class="header-anchor" href="#信号概述" aria-label="Permalink to &quot;信号概述&quot;">​</a></h2><p><strong>Linux 中的信号是一种消息处理机制，它本质上是一个整数，不同的信号对应不同的值，由于信号的结构简单所以天生不能携带很大的信息量，但是信号在系统中的优先级是非常高的。</strong></p><p>在 Linux 中的很多常规操作中都会有相关的信号产生，先从我们最熟悉的场景说起：</p><ul><li>通过键盘操作产生了信号：用户按下 Ctrl-C，这个键盘输入产生一个硬件中断，使用这个快捷键会产生信号，这个信号会杀死对应的某个进程</li><li>通过shell命令产生了信号：通过 kill 命令终止某一个进程，kill -9 进程PID</li><li>通过函数调用产生了信号：如果 CPU 当前正在执行这个进程的代码调用，比如函数 sleep()，进程收到相关的信号，被迫挂起</li><li>通过对硬件进行非法访问产生了信号：正在运行的程序访问了非法内存，发生段错误，进程退出。</li></ul><p>信号也可以实现进程间通信，但是信号能传递的数据量很少，不能满足大部分需求，另外信号的优先级很高，并且它对应的处理动作是回调完成的，它会打乱程序原有的处理流程，影响到最终的处理结果。<strong>因此非常不建议使用信号进行进程间通信。</strong></p><h3 id="信号编号" tabindex="-1">信号编号 <a class="header-anchor" href="#信号编号" aria-label="Permalink to &quot;信号编号&quot;">​</a></h3><p>通过<code>kill -l</code>命令可以察看系统定义的信号列表:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 执行shell命令查看信号</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">kill</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-l</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">1</span><span style="color:#A6ACCD;">) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL       5) SIGTRAP</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">6</span><span style="color:#A6ACCD;">) SIGABRT      7) SIGBUS       8) SIGFPE       9) SIGKILL     10) SIGUSR1</span></span>
<span class="line"><span style="color:#FFCB6B;">11</span><span style="color:#A6ACCD;">) SIGSEGV     12) SIGUSR2     13) SIGPIPE     14) SIGALRM     15) SIGTERM</span></span>
<span class="line"><span style="color:#FFCB6B;">16</span><span style="color:#A6ACCD;">) SIGSTKFLT   17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP</span></span>
<span class="line"><span style="color:#FFCB6B;">21</span><span style="color:#A6ACCD;">) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU     25) SIGXFSZ</span></span>
<span class="line"><span style="color:#FFCB6B;">26</span><span style="color:#A6ACCD;">) SIGVTALRM   27) SIGPROF     28) SIGWINCH    29) SIGIO       30) SIGPWR</span></span>
<span class="line"><span style="color:#FFCB6B;">31</span><span style="color:#A6ACCD;">) SIGSYS      34) SIGRTMIN    35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3</span></span>
<span class="line"><span style="color:#FFCB6B;">38</span><span style="color:#A6ACCD;">) SIGRTMIN+4  39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8</span></span>
<span class="line"><span style="color:#FFCB6B;">43</span><span style="color:#A6ACCD;">) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13</span></span>
<span class="line"><span style="color:#FFCB6B;">48</span><span style="color:#A6ACCD;">) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12</span></span>
<span class="line"><span style="color:#FFCB6B;">53</span><span style="color:#A6ACCD;">) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7</span></span>
<span class="line"><span style="color:#FFCB6B;">58</span><span style="color:#A6ACCD;">) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2</span></span>
<span class="line"><span style="color:#FFCB6B;">63</span><span style="color:#A6ACCD;">) SIGRTMAX-1  64) SIGRTMAX</span></span></code></pre></div><table><thead><tr><th>编号</th><th>信号</th><th>对应事件</th><th>默认动作</th></tr></thead><tbody><tr><td>1</td><td>SIGHUP</td><td>用户退出 shell 时，由该 shell 启动的所有进程将收到这个信号</td><td>终止进程</td></tr><tr><td>2</td><td>SIGINT</td><td>当用户按下了 &lt;Ctrl+C&gt; 组合键时，用户终端向正在运行中的由该终端启动的程序发出此信号</td><td>终止进程</td></tr><tr><td>3</td><td>SIGQUIT</td><td>用户按下 &lt;ctrl+&gt; 组合键时产生该信号，用户终端向正在运行中的由该终端启动的程序发出些信号</td><td>终止进程</td></tr><tr><td>4</td><td>SIGILL</td><td>CPU 检测到某进程执行了非法指令</td><td>终止进程并产生 core 文件</td></tr><tr><td>5</td><td>SIGTRAP</td><td>该信号由断点指令或其他 trap 指令产生</td><td>终止进程并产生 core 文件</td></tr><tr><td>6</td><td>SIGABRT</td><td>调用 abort 函数时产生该信号</td><td>终止进程并产生 core 文件</td></tr><tr><td>7</td><td>SIGBUS</td><td>非法访问内存地址，包括内存对齐出错</td><td>终止进程并产生 core 文件</td></tr><tr><td>8</td><td>SIGFPE</td><td>在发生致命的运算错误时发出。不仅包括浮点运算错误，还包括溢出及除数为 0 等所有的算法错误</td><td>终止进程并产生 core 文件</td></tr><tr><td>9</td><td>SIGKILL</td><td>无条件终止进程。本信号不能被忽略，处理和阻塞</td><td>终止进程，可以杀死任何进程</td></tr><tr><td>10</td><td>SIGUSE1</td><td>用户定义的信号。即程序员可以在程序中定义并使用该信号</td><td>终止进程</td></tr><tr><td>11</td><td>SIGSEGV</td><td>指示进程进行了无效内存访问 (段错误)</td><td>终止进程并产生 core 文件</td></tr><tr><td>12</td><td>SIGUSR2</td><td>另外一个用户自定义信号，程序员可以在程序中定义并使用该信号</td><td>终止进程</td></tr><tr><td>13</td><td>SIGPIPE</td><td>Broken pipe 向一个没有读端的管道写数据</td><td>终止进程</td></tr><tr><td>14</td><td>SIGALRM</td><td>定时器超时，超时的时间 由系统调用 alarm 设置</td><td>终止进程</td></tr><tr><td>15</td><td>SIGTERM</td><td>程序结束信号，与 SIGKILL 不同的是，该信号可以被阻塞和终止。通常用来要示程序正常退出。执行 shell 命令 Kill 时，缺省产生这个信号</td><td>终止进程</td></tr><tr><td>16</td><td>SIGSTKFLT</td><td>Linux 早期版本出现的信号，现仍保留向后兼容</td><td>终止进程</td></tr><tr><td>17</td><td>SIGCHLD</td><td>子进程结束时，父进程会收到这个信号</td><td>忽略这个信号</td></tr><tr><td>18</td><td>SIGCONT</td><td>如果进程已停止，则使其继续运行</td><td>继续 / 忽略</td></tr><tr><td>19</td><td>SIGSTOP</td><td>停止进程的执行。信号不能被忽略，处理和阻塞</td><td>为终止进程</td></tr><tr><td>20</td><td>SIGTSTP</td><td>停止终端交互进程的运行。按下 &lt;ctrl+z&gt; 组合键时发出这个信号</td><td>暂停进程</td></tr><tr><td>21</td><td>SIGTTIN</td><td>后台进程读终端控制台</td><td>暂停进程</td></tr><tr><td>22</td><td>SIGTTOU</td><td>该信号类似于 SIGTTIN，在后台进程要向终端输出数据时发生</td><td>暂停进程</td></tr><tr><td>23</td><td>SIGURG</td><td>套接字上有紧急数据时，向当前正在运行的进程发出些信号，报告有紧急数据到达。如网络带外数据到达</td><td>忽略该信号</td></tr><tr><td>24</td><td>SIGXCPU</td><td>进程执行时间超过了分配给该进程的 CPU 时间 ，系统产生该信号并发送给该进程</td><td>终止进程</td></tr><tr><td>25</td><td>SIGXFSZ</td><td>超过文件的最大长度设置</td><td>终止进程</td></tr><tr><td>26</td><td>SIGVTALRM</td><td>虚拟时钟超时时产生该信号。类似于 SIGALRM，但是该信号只计算该进程占用 CPU 的使用时间</td><td>终止进程</td></tr><tr><td>27</td><td>SGIPROF</td><td>类似于 SIGVTALRM，它不公包括该进程占用 CPU 时间还包括执行系统调用时间</td><td>终止进程</td></tr><tr><td>28</td><td>SIGWINCH</td><td>窗口变化大小时发出</td><td>忽略该信号</td></tr><tr><td>29</td><td>SIGIO</td><td>此信号向进程指示发出了一个异步 IO 事件</td><td>忽略该信号</td></tr><tr><td>30</td><td>SIGPWR</td><td>关机</td><td>终止进程</td></tr><tr><td>31</td><td>SIGSYS</td><td>无效的系统调用</td><td>终止进程并产生 core 文件</td></tr><tr><td>34~64</td><td>SIGRTMIN ～ SIGRTMAX</td><td>LINUX 的实时信号，它们没有固定的含义（可以由用户自定义）</td><td>终止进程</td></tr></tbody></table><h3 id="查看信号信息" tabindex="-1">查看信号信息 <a class="header-anchor" href="#查看信号信息" aria-label="Permalink to &quot;查看信号信息&quot;">​</a></h3><p>通过 Linux 提供的 man 文档可以查询所有信号的详细信息:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 查看man文档的信号描述</span></span>
<span class="line"><span style="color:#FFCB6B;">man</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">7</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">signal</span></span></code></pre></div><p>在信号描述中介绍了对产生的信号的五种默认处理动作，分别是：</p><p><code>Term</code>：信号将进程终止</p><p><code>Ign</code>：信号产生之后默认被忽略了</p><p><code>Core</code>：信号将进程终止，并且生成一个 core 文件 (一般用于 gdb 调试)</p><p><code>Stop</code>：信号会暂停进程的运行</p><p><code>Cont</code>：信号会让暂停的进程继续运行</p><blockquote><p>关于对信号的介绍有一句非常重要的描述:</p><p><strong>The signals SIGKILL and SIGSTOP cannot be caught, blocked, or ignored.</strong></p><p><strong>9号信号和19号信号不能被 捕捉, 阻塞, 和 忽略</strong></p><ul><li>9号信号: 无条件杀死进程</li><li>19号信号: 无条件暂停进程</li></ul></blockquote><p><img src="`+p+`" alt="img"></p><h3 id="信号的状态" tabindex="-1">信号的状态 <a class="header-anchor" href="#信号的状态" aria-label="Permalink to &quot;信号的状态&quot;">​</a></h3><p><strong>Linux 中的信号有三种状态，分别为：产生，未决，递达。</strong></p><ul><li>产生：键盘输入，函数调用，执行 shell 命令，对硬件进行非法访问都会产生信号</li><li>未决：信号产生了，但是这个信号还没有被处理掉，这个期间信号的状态称之为未决状态</li><li>递达：信号被处理了 (被某个进程处理掉)</li></ul><h2 id="信号相关函数" tabindex="-1">信号相关函数 <a class="header-anchor" href="#信号相关函数" aria-label="Permalink to &quot;信号相关函数&quot;">​</a></h2><h3 id="kill-raise-abort" tabindex="-1">kill/raise/abort <a class="header-anchor" href="#kill-raise-abort" aria-label="Permalink to &quot;kill/raise/abort&quot;">​</a></h3><p>这三个函数的功能比较类似，可以发送相关的信号给到对应的进程。</p><p>kill 发送指定的信号到指定的进程，函数原型如下：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">signal.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 给某一个进程发送一个信号</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">kill</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">pid_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">pid</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">sig</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// pid: 进程 ID（man 文档里边写的比较详细）</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// sig: 要发送的信号</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 自己杀死自己</span></span>
<span class="line"><span style="color:#82AAFF;">kill</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">getpid</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">9</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 子进程杀死自己的父进程</span></span>
<span class="line"><span style="color:#82AAFF;">kill</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">getppid</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>raise：给当前进程发送指定的信号，函数原型如下：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 给自己发送某一个信号</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">signal.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">raise</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">sig</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">	// 参数就是要给当前进程发送的信号</span></span></code></pre></div><p>abort：给当前进程发送一个固定信号 (SIGABRT)，函数原型如下：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 这是一个中断函数, 调用这个函数, 发送一个固定信号 (SIGABRT), 杀死当前进程</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdlib.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">abort</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">);</span></span></code></pre></div><h3 id="定时器-alarm" tabindex="-1">定时器 alarm <a class="header-anchor" href="#定时器-alarm" aria-label="Permalink to &quot;定时器 alarm&quot;">​</a></h3><p>alarm () 函数只能进行单次定时，定时完成发射出一个信号。</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">unistd.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">unsigned</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">alarm</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">unsigned</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">seconds</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>参数：倒计时 seconds 秒，倒计时完成发送一个信号 SIGALRM , 当前进程会收到这个信号，这个信号默认的处理动作是中断当前进程</p><p>返回值：大于 0 表示倒计时还剩多少秒，返回值为 0 表示倒计时完成，信号被发出</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdio.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdlib.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">string.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">unistd.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 使用这个定时器函数，检测一下当前计算机 1s 钟之内能数多少个数</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> cnt </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 设置一个定时器，定时1s</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 1s之后会发出信号，这个信号将中断当前进程</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">alarm</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">%d</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> cnt</span><span style="color:#89DDFF;">++);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cnt</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 直接通过终端输出</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">time</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./a.out</span></span>
<span class="line"><span style="color:#FFCB6B;">real</span><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">0</span><span style="color:#C3E88D;">m1.013s</span><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;"># 实际数数用的总时间</span></span>
<span class="line"><span style="color:#FFCB6B;">user</span><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">0</span><span style="color:#C3E88D;">m0.060s</span><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;"># 用户区代码使用的时间</span></span>
<span class="line"><span style="color:#FFCB6B;">sys</span><span style="color:#A6ACCD;">     </span><span style="color:#F78C6C;">0</span><span style="color:#C3E88D;">m0.324s</span><span style="color:#A6ACCD;">		</span><span style="color:#676E95;font-style:italic;"># 内核区使用的时间</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">real</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">user</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">sys</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">消耗的时间</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">频率的从用户区到内核区进程切换</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 不直接写终端, 将数据重定向到磁盘文件中</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">time</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./a.out</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">a.txt</span></span>
<span class="line"><span style="color:#FFCB6B;">Alarm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clock</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">real</span><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">0</span><span style="color:#C3E88D;">m1.002s</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># 用户实际数数的时间变长了</span></span>
<span class="line"><span style="color:#FFCB6B;">user</span><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">0</span><span style="color:#C3E88D;">m0.740s</span></span>
<span class="line"><span style="color:#FFCB6B;">sys</span><span style="color:#A6ACCD;">     </span><span style="color:#F78C6C;">0</span><span style="color:#C3E88D;">m0.236s</span></span></code></pre></div><blockquote><p>文件 IO 操作需要进行用户区到内核区的切换，处理方式不同，二者之间切换的频率也不同。也就是说对文件 IO 操作进行优化是可以提供程序的执行效率的。</p></blockquote><h3 id="定时器-setitimer" tabindex="-1">定时器 setitimer <a class="header-anchor" href="#定时器-setitimer" aria-label="Permalink to &quot;定时器 setitimer&quot;">​</a></h3><p>setitimer () 函数可以进行周期性定时，每触发一次定时器就会发射出一个信号。</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 这个函数可以实现周期性定时, 每个一段固定的时间, 发出一个特定的定时器信号</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">sys/time.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">itimerval</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">timeval</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">it_interval</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> /* 时间间隔 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">timeval</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">it_value</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">    /* 第一次触发定时器的时长 */</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 举例: luffy有一个闹钟, 并且使用这个闹钟定时:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 早晨7点中起床, 第一次闹钟响起时可能起不来, 之后每隔5分钟再响一次</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//  - it_value: 当前设置闹钟的时间点 到 明天早晨7点 对应的总秒数</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//  - it_interval: 闹钟第一次响过之后, 每隔5分钟响一次</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 这个结构体表示的是一个时间段: tv_sec + tv_usec</span></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">timeval</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">time_t</span><span style="color:#F07178;"> tv_sec</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">       /* 秒 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">suseconds_t</span><span style="color:#F07178;"> tv_usec</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> /* 微妙 */</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setitimer</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">which</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">itimerval</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">new_value</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">              </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">itimerval</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">old_value</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>which: 定时器使用什么样的计时法则，不同的计时法则发出的信号不同</p><ul><li><code>ITIMER_REAL</code>: 自然计时法，最常用，发出的信号为 SIGALRM, 一般使用这个宏值，自然计时法时间 = 用户区 + 内核 + 消耗的时间 (从进程的用户区到内核区切换使用的总时间)</li><li><code>ITIMER_VIRTUAL</code>: 只计算程序在用户区运行使用的时间，发射的信号为 SIGVTALRM</li><li><code>ITIMER_PROF</code>: 只计算内核运行使用的时间，发出的信号为 SIGPROF</li></ul><p><code>new_value</code>: 给定时器设置的定时信息，传入参数</p><p><code>old_value</code>: 上一次给定时器设置的定时信息，传出参数，如果不需要这个信息，指定为 NULL</p><h2 id="信号集" tabindex="-1">信号集 <a class="header-anchor" href="#信号集" aria-label="Permalink to &quot;信号集&quot;">​</a></h2><h3 id="阻塞-未决信号集" tabindex="-1">阻塞 / 未决信号集 <a class="header-anchor" href="#阻塞-未决信号集" aria-label="Permalink to &quot;阻塞 / 未决信号集&quot;">​</a></h3><p>在 PCB 中有两个非常重要的信号集。一个称之为 “阻塞信号集”，另一个称之为 “未决信号集”。这两个信号集体现在内核中就是两张表。但是操作系统不允许我们直接对这两个信号集进行任何操作，而是需要自定义另外一个集合，借助信号集操作函数来对 PCB 中的这两个信号集进行修改。</p><ul><li><p>信号的 “未决” 是一种状态，指的是从信号的产生到信号被处理前的这一段时间。</p></li><li><p>信号的 “阻塞” 是一个开关动作，指的是阻止信号被处理，但不是阻止信号产生。</p></li></ul><p>信号的阻塞就是让系统暂时保留信号留待以后发送。由于另外有办法让系统忽略信号，所以一般情况下信号的阻塞只是暂时的，只是为了 防止信号打断某些敏感的操作。</p><p><img src="`+o+`" alt="img"></p><p>阻塞信号集和未决信号集在内核中的结构是相同的，它们都是一个整形数组 (被封装过的), 一共 128 字节 （int [32] == 1024 bit），1024 个标志位，其中前 31 个标志位，每一个都对应一个 Linux 中的标准信号，通过标志位的值来标记当前信号在信号集中的状态。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 上图对信号集在内核中存储的状态的描述</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 前31个信号: 1-31 , 对应 1024个标志位的前31个标志位</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#FFCB6B;">信号</span><span style="color:#A6ACCD;">		</span><span style="color:#C3E88D;">标志位</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">从低地址位</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">到</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">高地址位</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">		 	  </span><span style="color:#FFCB6B;">1</span><span style="color:#A6ACCD;">      -</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">  	</span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">			  </span><span style="color:#FFCB6B;">2</span><span style="color:#A6ACCD;">             </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">			  </span><span style="color:#FFCB6B;">3</span><span style="color:#A6ACCD;">             </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#A6ACCD;">			  </span><span style="color:#FFCB6B;">4</span><span style="color:#A6ACCD;">             </span><span style="color:#F78C6C;">3</span></span>
<span class="line"><span style="color:#A6ACCD;">			 </span><span style="color:#FFCB6B;">31</span><span style="color:#A6ACCD;">            </span><span style="color:#F78C6C;">30</span></span></code></pre></div><p>在阻塞信号集中，描述这个信号有没有被阻塞</p><ul><li>默认情况下没有信号是被阻塞的，因此信号对应的标志位的值为 0</li><li>如果某个信号被设置为了阻塞状态，这个信号对应的标志位 被设置为 1</li></ul><p>在未决信号集中，描述信号是否处于未决状态</p><ul><li>如果这个信号被阻塞了，不能处理，这个信号对应的标志位被设置为 1</li><li>如果这个信号的阻塞被解除了，未决信号集中的这个信号马上就被处理了，这个信号对应的标志位值变为 0</li><li>如果这个信号没有阻塞，信号产生之后直接被处理，因此不会在未决信号集中做任何记录</li></ul><h3 id="信号集函数" tabindex="-1">信号集函数 <a class="header-anchor" href="#信号集函数" aria-label="Permalink to &quot;信号集函数&quot;">​</a></h3><p>因为用户是不能直接操作内核中的阻塞信号集和未决信号集的，必须要调用系统函数，关于阻塞信号集可以通过系统函数进行读写操作，未决信号集只能对其进行读操作。</p><p>先来看一下读 / 写阻塞信号集的函数：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">signal.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 使用这个函数修改内核中的阻塞信号集</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// sigset_t 被封装之后得到的数据类型, 原型:int[32], 里边一共有1024给标志位, 每一个信号对应一个标志位</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sigprocmask</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">how</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sigset_t</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">set</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sigset_t</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">oldset</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>how:</p><ul><li><code>SIG_BLOCK</code>: 将参数 set 集合中的数据追加到阻塞信号集中</li><li><code>SIG_UNBLOCK</code>: 将参数 set 集合中的信号在阻塞信号集中解除阻塞</li><li><code>SIG_SETMASK</code>: 使用参 set 结合中的数据覆盖内核的阻塞信号集数据</li><li><code>oldset</code>: 通过这个参数将设置之前的阻塞信号集数据传出，如果不需要可以指定为 NULL</li></ul><p>返回值：函数调用成功返回 0，调用失败返回 - 1</p><p><code>sigprocmask ()</code> 函数有一个<code>sigset_t</code>类型的参数，对这种类型的数据进行初始化需要调用一些相关的操作函数：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">signal.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 如果在程序中读写 sigset_t 类型的变量</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 阻塞信号集和未决信号集都存储在 sigset_t 类型的变量中, 这个变量对应一块内存</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 阻塞信号集和未决信号集, 对应的内存中有1024bit = 128字节</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 将set集合中所有的标志位设置为0</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sigemptyset</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">sigset_t</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">set</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 将set集合中所有的标志位设置为1</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sigfillset</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">sigset_t</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">set</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 将set集合中某一个信号(signum)对应的标志位设置为1</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sigaddset</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">sigset_t</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">set</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">signum</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 将set集合中某一个信号(signum)对应的标志位设置为0</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sigdelset</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">sigset_t</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">set</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">signum</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 判断某个信号在集合中对应的标志位到底是0还是1, 如果是0返回0, 如果是1返回1</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sigismember</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sigset_t</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">set</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">signum</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p><img src="`+t+`" alt="img"></p><p>未决信号集不需要程序猿修改，如果设置了某个信号阻塞，当这个信号产生之后，内核会将这个信号的未决状态记录到未决信号集中，当阻塞的信号被解除阻塞，未决信号集中的信号随之被处理，内核再次修改未决信号集将该信号的状态修改为递达状态（标志位置 0）。因此，<strong>写未决信号集的动作都是内核做的</strong>，这是一个读未决信号集的操作函数：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">signal.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 这个函数的参数是传出参数, 传出的内核未决信号集的拷贝</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 读一下这个集合就指定哪个信号是未决状态</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sigpending</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">sigset_t</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">set</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>下面举一个简单的例子，演示一下信号集操作函数的使用：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">需求: </span></span>
<span class="line"><span style="color:#A6ACCD;">在阻塞信号集中设置某些信号阻塞, 通过一些操作产生这些信号, 然后读未决信号集, 最后再解除这些信号的阻塞</span></span>
<span class="line"><span style="color:#A6ACCD;">假设阻塞这些信号: </span></span>
<span class="line"><span style="color:#A6ACCD;">  - 2号信号: SIGINT: ctrl+c</span></span>
<span class="line"><span style="color:#A6ACCD;">  - 3号信号: SIGQUIT: ctrl+\\</span></span>
<span class="line"><span style="color:#A6ACCD;">  - 9号信号: SIGKILL: 通过shell命令给进程发送这个信号 kill -9 PID</span></span></code></pre></div><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">signal.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdio.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdlib.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">string.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">unistd.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 1. 初始化信号集</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">sigset_t</span><span style="color:#A6ACCD;"> myset</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">sigemptyset</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">myset</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 设置阻塞的信号</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">sigaddset</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">myset</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> SIGINT</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">   // 2</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">sigaddset</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">myset</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> SIGQUIT</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">  // 3</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">sigaddset</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">myset</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> SIGKILL</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">  // 9 测试不能被阻塞</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 2. 将初始化的信号集中的数据设置给内核</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">sigset_t</span><span style="color:#A6ACCD;"> old</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">sigprocmask</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">SIG_BLOCK</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">myset</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">old</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 3. 让进程一直运行, 在当前进程中产生对应的信号</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 4. 读内核的未决信号集</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">sigset_t</span><span style="color:#F07178;"> curset</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">sigpending</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#F07178;">curset</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 遍历这个信号集</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> ret </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sigismember</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#F07178;">curset</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">%d</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> ret</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    i</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">i </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 解除阻塞, 重新设置阻塞信号集</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // sigprocmask(SIG_UNBLOCK, &amp;myset, NULL);</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">sigprocmask</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">SIG_SETMASK</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">old</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">NULL);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><blockquote><p>通过测试最终得到结论：程序中对 9 号信号的阻塞是无效的，因为它无法被阻塞。</p></blockquote><p>最后通过一张图总结一下这些信号集操作函数之间的关系:</p><p><img src="`+e+`" alt="img"></p><h2 id="信号捕捉" tabindex="-1">信号捕捉 <a class="header-anchor" href="#信号捕捉" aria-label="Permalink to &quot;信号捕捉&quot;">​</a></h2><p>Linux 中的每个信号产生之后都会有对应的默认处理行为，如果想要忽略这个信号或者修改某些信号的默认行为就需要在程序中捕捉该信号。程序中进行信号捕捉可以看做是一个注册的动作，提前告诉应用程序信号产生之后做什么样的处理，当进程中对应的信号产生了，这个处理动作也就被调用了。</p><h3 id="signal" tabindex="-1">signal <a class="header-anchor" href="#signal" aria-label="Permalink to &quot;signal&quot;">​</a></h3><p>使用 signal () 函数可以捕捉进程中产生的信号，并且修改捕捉到的函数的行为，这个信号的自定义处理动作是一个回调函数，内核通过 signal () 得到这个回调函数的地址，在信号产生之后该函数会被内核调用。</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">signal.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 在程序中什么时候产生信号, 程序猿是不知道的, 因此不能在信号产生之后再去处理</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 在信号产生之前, 提供一个注册函数, 用来捕捉信号</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//	  - 假设在将来这个信号产生了, 就委托内核进行捕捉, 这个信号的默认动作就不能被执行</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//	  - 执行什么样的处理动作 ==&gt; 在signal函数中指定的处理动作</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//	  - 如果这个信号不产生, 回调函数永远不会被调用</span></span>
<span class="line"><span style="color:#FFCB6B;">sighandler_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">signal</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">signum</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sighandler_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">handler</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>signum: 需要捕捉的信号</p><p>handler: 信号捕捉到之后的处理动作，这是一个函数指针。这个回调函数是需要程序猿写的，但是程序猿不调用，由内核调用，内核调用回调函数的时候，会给它传递一个实参，这个实参的值就是捕捉的那个信号值。函数原型：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">typedef</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">sighandler_t</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>下面的测试程序中使用 signal () 函数来捕捉定时器产生的信号 SIGALRM：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">signal.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdio.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdlib.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">string.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">sys/time.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">unistd.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 定时器信号的处理动作</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">doing</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arg</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">当前捕捉到的信号是: %d</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> arg</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 打印当前的时间</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 注册要捕捉哪一个信号, 执行什么样的处理动作</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">signal</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">SIGALRM</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> doing</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 1. 调用定时器函数设置定时器函数</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">itimerval</span><span style="color:#A6ACCD;"> newact</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 3s之后发出第一个定时器信号, 之后每隔1s发出一个定时器信号</span></span>
<span class="line"><span style="color:#A6ACCD;">  newact</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">it_value</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tv_sec </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  newact</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">it_value</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tv_usec </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  newact</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">it_interval</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tv_sec </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  newact</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">it_interval</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tv_usec </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 这个函数也不是阻塞函数, 函数调用成功, 倒计时开始</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 倒计时过程中程序是继续运行的</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">setitimer</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ITIMER_REAL</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">newact</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NULL);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 编写一个业务处理, 阻止当前进程自己结束, 让当前进程被发出的信号杀死</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1000000</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="sigaction" tabindex="-1">sigaction <a class="header-anchor" href="#sigaction" aria-label="Permalink to &quot;sigaction&quot;">​</a></h3><p><code>sigaction ()</code> 函数和<code>signal ()</code>函数的功能是一样的，用于捕捉进程中产生的信号，并将用户自定义的信号行为函数（回调函数）注册给内核，内核在信号产生之后调用这个处理动作。<code>sigaction () </code>可以看做是 <code>signal () 函</code>数是加强版，函数参数更多更复杂，函数功能也更强一些。函数原型如下：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">signal.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sigaction</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">signum</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sigaction</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">act</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sigaction</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">oldact</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p><code>signum</code>: 要捕捉的信号</p><p><code>act</code>: 捕捉到信号之后的处理动作</p><p><code>oldact</code>: 上一次调用该函数进行信号捕捉设置的信号处理动作，该参数一般指定为 NULL</p><p>返回值：函数调用成功返回 0，失败返回 - 1</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">sigaction</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">void</span><span style="color:#F07178;">     </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">sa_handler</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">    // 指向一个函数(回调函数)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">void</span><span style="color:#F07178;">     </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">sa_sigaction</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">siginfo_t</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#FFCB6B;">sigset_t</span><span style="color:#F07178;">   sa_mask</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">             // 初始化为空即可, 处理函数执行期间不屏蔽任何信号</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">int</span><span style="color:#F07178;">        sa_flags</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">	        // 0</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">void</span><span style="color:#F07178;">     </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">sa_restorer</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">  //不用</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p><code>sa_handler</code>: 函数指针，指向的函数就是捕捉到的信号的处理动作</p><p><code>sa_sigaction</code>: 函数指针，指向的函数就是捕捉到的信号的处理动作</p><p><code>sa_mask</code>: <strong>在信号处理函数执行期间，临时屏蔽某些信号 ,</strong> 将要屏蔽的信号设置到集合中即可</p><ul><li>当前处理函数执行完毕，临时屏蔽自动解除</li><li>假设在这个集合中不屏蔽任何信号，默认也会屏蔽一个（捕捉的信号是谁，就临时屏蔽谁）</li></ul><p><code>sa_flags</code>：使用哪个函数指针指向的函数处理捕捉到的信号</p><ul><li><code>0</code>：使用 <code>sa_handler </code>(一般情况下使用这个)</li><li><code>SA_SIGINFO</code>：使用 <code>sa_sigaction </code>(使用信号传递数据 == 进程间通信)</li></ul><p><code>sa_restorer</code>: 被废弃的成员</p><p>示例代码，通过 sigaction () 捕捉阻塞信号集中解除阻塞的信号，如果捕捉多个信号，可以给不同的信号添加不同的处理动作，代码中的处理动作只有一个：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">signal.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdio.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdlib.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">string.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">unistd.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 信号的处理动作</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">callback</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">num</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">当前捕捉的信号: %d</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> num</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 1. 初始化信号集</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">sigset_t</span><span style="color:#A6ACCD;"> myset</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">sigemptyset</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">myset</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 设置阻塞的信号</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">sigaddset</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">myset</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> SIGINT</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">   // 2</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">sigaddset</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">myset</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> SIGQUIT</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">  // 3</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">sigaddset</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">myset</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> SIGKILL</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">  // 9 测试不能被阻塞</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 当阻塞的信号被解除阻塞, 该信号就可以被捕捉到了</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 如果信号被捕捉到之后, 马上就被处理掉了 --&gt; 递达状态</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sigaction</span><span style="color:#A6ACCD;"> act</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  act</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sa_handler </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> callback</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  act</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sa_flags </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">sigemptyset</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">act</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sa_mask</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">sigaction</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">SIGINT</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">act</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NULL);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 和sigint的处理动作相同</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">sigaction</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">SIGQUIT</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">act</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NULL);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">sigaction</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">SIGKILL</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">act</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NULL);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 2. 将初始化的信号集中的数据设置给内核</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">sigset_t</span><span style="color:#A6ACCD;"> old</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">sigprocmask</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">SIG_BLOCK</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">myset</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">old</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 3. 让进程一直运行, 在当前进程中产生对应的信号</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 4. 读内核的未决信号集</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">sigset_t</span><span style="color:#F07178;"> curset</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">sigpending</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#F07178;">curset</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 遍历这个信号集</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> ret </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sigismember</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#F07178;">curset</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">%d</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> ret</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    i</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">i </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 解除阻塞, 重新设置阻塞信号集</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // sigprocmask(SIG_UNBLOCK, &amp;myset, NULL);</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">sigprocmask</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">SIG_SETMASK</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">old</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">NULL);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><blockquote><p>通过测试最终得到结论：程序中对 9 号信号的捕捉是无效的，因为它无法被捕捉。</p></blockquote><h2 id="sigchld信号" tabindex="-1">SIGCHLD信号 <a class="header-anchor" href="#sigchld信号" aria-label="Permalink to &quot;SIGCHLD信号&quot;">​</a></h2><p>当子进程退出、暂停、从暂停回复运行的时候，在子进程中会产生一个 SIGCHLD 信号，并将其发送给父进程，但是父进程收到这个信号之后默认就忽略了。我们可以在父进程中对这个信号加以利用，基于这个信号来回收子进程的资源，因此需要在父进程中捕捉子进程发送过来的这个信号。</p><p>下面是基于信号回收子进程资源的示例代码：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">signal.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdio.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdlib.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">string.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">sys/wait.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">unistd.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 回收子进程处理函数</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">recycle</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">num</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">捕捉到的信号是: %d</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> num</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 子进程的资源回收, 非阻塞</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // SIGCHLD信号17号信号, 1-31号信号不支持排队</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 如果这些信号同时产生多个, 最终处理的时候只处理一次</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 假设多个子进程同时退出, 父进程同时收到了多个sigchld信号</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 父进程只会处理一次这个信号, 因此当前函数被调用了一次, waitpid被调用一次</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 相当于只回收了一个子进程, 但是是同时死了多个子进程, 因此就出现了僵尸进程</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 解决方案: 循环回收即可</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 如果是阻塞回收, 就回不到另外一个处理逻辑上去了</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">pid_t</span><span style="color:#F07178;"> pid </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">waitpid</span><span style="color:#89DDFF;">(-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">NULL,</span><span style="color:#F07178;"> WNOHANG</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">pid </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">child died, pid = %d</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> pid</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">pid </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 没有死亡的子进程, 直接退出当前循环</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">pid </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">所有子进程都回收完毕了, 拜拜...</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 设置sigchld信号阻塞</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">sigset_t</span><span style="color:#A6ACCD;"> myset</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">sigemptyset</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">myset</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">sigaddset</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">myset</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> SIGCHLD</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">sigprocmask</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">SIG_BLOCK</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">myset</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NULL);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 循环创建多个子进程 - 20</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">pid_t</span><span style="color:#A6ACCD;"> pid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    pid </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fork</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">pid </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">pid </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">我是子进程, pid = %d</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">getpid</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">pid </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">我是父进程, pid = %d</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">getpid</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 注册信号捕捉, 捕捉sigchld</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">sigaction</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">act</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">act</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sa_flags</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">act</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sa_handler</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> recycle</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">sigemptyset</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">act</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sa_mask</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 注册信号捕捉, 委托内核处理将来产生的信号</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 当信号产生之后, 当前进程优先处理信号, 之前的处理动作会暂停</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 信号处理完毕之后, 回到原来的暂停的位置继续运行</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">sigaction</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">SIGCHLD</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">act</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">NULL);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 解除sigcld信号的阻塞</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 信号被阻塞之后,就捕捉不到了, 解除阻塞之后才能捕捉到这个信号</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">sigprocmask</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">SIG_UNBLOCK</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">myset</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">NULL);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 父进程执行其他业务逻辑就可以了</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 默认父进程执行这个while循环, 但是信号产生了, 这个执行逻辑或强迫暂停</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 	父进程去处理信号的处理函数</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div>`,110),y=[r];function F(D,i,C,A,d,g){return n(),a("div",null,y)}const f=s(c,[["render",F]]);export{u as __pageData,f as default};
