import{_ as s,c as a,o as e,U as t}from"./chunks/framework.isgf4Vyz.js";const u=JSON.parse('{"title":"Sed","description":"","frontmatter":{},"headers":[],"relativePath":"articles/Linux/Basic/sed.md","filePath":"articles/Linux/Basic/sed.md"}'),i={name:"articles/Linux/Basic/sed.md"},n=t(`<h1 id="sed" tabindex="-1">Sed <a class="header-anchor" href="#sed" aria-label="Permalink to &quot;Sed&quot;">​</a></h1><p>在 Linux/UNIX 系统中包含很多种类的文本处理器或文本编辑器，其中包括其中包括我们之前学习过的 Vim 编辑器与 grep 等。而 grep，sed，awk 更是 Shell 编程中经常用到的文本处理工具， 被称之为 Shell 编程三剑客。</p><p>**sed（Stream EDitor）**是一个强大而简单的文本解析转换工具，可以读取文本，并根据指定的条件对文本内容进行编辑（删除、替换、添加、移动等），最后输出所有行或者仅输出处理的某些行。sed 也可以在无交互的情况下实现相当复杂的文本处理操作，被广泛应用于 Shell 脚本中，用以完成各种自动化处理任务。</p><p>sed 的工作流程主要包括读取、执行和显示三个过程。</p><ul><li><strong>读取</strong>：sed 从输入流（文件、管道、标准输入）中读取一行内容并存储到<strong>临时的缓冲区中（又称模式空间，pattern space）。</strong></li><li><strong>执行</strong>：默认情况下，所有的 sed 命令都在模式空间中顺序地执行，除非指定了行的地址，否则 sed 命令将会在所有的行上依次执行。</li><li><strong>显示</strong>：发送修改后的内容到输出流。在发送数据后，模式空间将会被清空。</li></ul><p>在所有的文件内容都被处理完成之前，上述过程将重复执行，直至所有内容被处理完。</p><blockquote><p><strong>注意：默认情况下所有的 sed 命令都是在模式空间内执行的，因此输入的文件并不会发生任何变化，除非是用重定向存储输出。</strong></p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>**sed**是一种流编辑器，它是文本处理中非常好的工具，能够完美的配合正则表达式使用，功能不同凡响。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed[命令](https://www.linuxcool.com/)处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有改变，除非你使用重定向存储输出。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Sed主要用来自动编辑一个或多个文件，可以将数据行进行替换、删除、新增、选取等特定工作，简化对文件的反复操作，编写转换程序等。</span></span></code></pre></div><h2 id="sed-的选项、命令、替换标记" tabindex="-1">sed 的选项、<a href="https://www.linuxcool.com/" target="_blank" rel="noreferrer">命令</a>、替换标记 <a class="header-anchor" href="#sed-的选项、命令、替换标记" aria-label="Permalink to &quot;sed 的选项、[命令](https://www.linuxcool.com/)、替换标记&quot;">​</a></h2><h3 id="命令格式" tabindex="-1">命令格式 <a class="header-anchor" href="#命令格式" aria-label="Permalink to &quot;命令格式&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed的命令格式：sed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [选项] </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;命令&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> files;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed的脚本格式：sed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [选项] -f scriptfile files;</span></span></code></pre></div><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td><code>-e</code></td><td>直接在命令行模式上进行 sed 动作编辑，此为默认选项;</td></tr><tr><td><code>-i</code></td><td>直接修改文件内容;</td></tr><tr><td><code>-n</code></td><td>只打印模式匹配的行；</td></tr><tr><td><code>-f</code></td><td>将 sed 的动作写在一个文件内，用–f filename 执行 filename 内的 sed 动作;</td></tr><tr><td><code>-h</code></td><td>或<code>--help</code>，显示帮助；</td></tr><tr><td><code>-V</code></td><td>或<code>--version</code>，显示版本信息。</td></tr><tr><td><code>-r</code></td><td>支持扩展表达式;</td></tr></tbody></table><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td><code>a</code></td><td>在当前行下面插入文本;</td></tr><tr><td><code>c</code></td><td>把选定的行改为新的文本;</td></tr><tr><td><code>d</code></td><td>删除选择的行。 D(大写) 删除模板块的第一行;</td></tr><tr><td><code>i</code></td><td>在当前行上面插入文本;</td></tr><tr><td><code>p</code></td><td>打印模板块的行。 P(大写) 打印模板块的第一行;</td></tr><tr><td><code>s</code></td><td>替换指定字符;</td></tr><tr><td><code>y</code></td><td>字符转换</td></tr><tr><td><code>n</code></td><td>读取下一个输入行，用下一个命令处理新的行而不是用第一个命令;</td></tr><tr><td></td><td></td></tr></tbody></table><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> h 拷贝模板块的内容到内存中的缓冲区;</span></span>
<span class="line"><span> H 追加模板块的内容到内存中的缓冲区;</span></span>
<span class="line"><span> g 获得内存缓冲区的内容，并替代当前模板块中的文本;</span></span>
<span class="line"><span> G 获得内存缓冲区的内容，并追加到当前模板块文本的后面;</span></span>
<span class="line"><span> l 列表不能打印字符的清单;</span></span>
<span class="line"><span> N 追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码;</span></span>
<span class="line"><span> q 退出Sed;</span></span>
<span class="line"><span> b lable 分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾;</span></span>
<span class="line"><span> r file 从file中读行;</span></span>
<span class="line"><span> t label if分支，从最后一行开始，条件一旦满足或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾;</span></span>
<span class="line"><span> T label 错误分支，从最后一行开始，一旦发生错误或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾;</span></span>
<span class="line"><span> w file 写并追加模板块到file末尾;</span></span>
<span class="line"><span> W file 写并追加模板块的第一行到file末尾;</span></span>
<span class="line"><span> ! 表示后面的命令对所有没有被选定的行发生作用;</span></span>
<span class="line"><span> = 打印当前行号;</span></span>
<span class="line"><span> # 把注释扩展到下一个换行符以前;</span></span></code></pre></div><h3 id="sed-替换标记" tabindex="-1">sed 替换标记 <a class="header-anchor" href="#sed-替换标记" aria-label="Permalink to &quot;sed 替换标记&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> g 表示行内全面替换;</span></span>
<span class="line"><span> p 表示打印行;</span></span>
<span class="line"><span> w 表示把行写入一个文件;</span></span>
<span class="line"><span> x 表示互换模板块中的文本和缓冲区中的文本;</span></span>
<span class="line"><span> y 表示把一个字符翻译为另外的字符（但是不用于正则表达式）;</span></span>
<span class="line"><span> \\1 子串匹配标记;</span></span>
<span class="line"><span> &amp; 已匹配字符串标记;</span></span></code></pre></div><h3 id="sed-元字符集" tabindex="-1">sed 元字符集 <a class="header-anchor" href="#sed-元字符集" aria-label="Permalink to &quot;sed 元字符集&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> ^ 匹配行开始，如：/^sed/匹配所有以sed开头的行;</span></span>
<span class="line"><span> $ 匹配行结束，如：/sed$/匹配所有以sed结尾的行;</span></span>
<span class="line"><span> . 匹配一个非换行符的任意字符，如：/s.d/匹配s后接一个任意字符，最后是d;</span></span>
<span class="line"><span> * 匹配0个或多个字符，如：/*sed/匹配所有模板是一个或多个空格后紧跟sed的行;</span></span>
<span class="line"><span> [] 匹配一个指定范围内的字符，如/[ss]ed/匹配sed和Sed;</span></span>
<span class="line"><span> [^] 匹配一个不在指定范围内的字符，如：/[^A-RT-Z]ed/匹配不包含A-R和T-Z的一个字母开头，紧跟ed的行;</span></span>
<span class="line"><span> \\(..\\) 匹配子串，保存匹配的字符，如s/\\(love\\)able/\\1rs，loveable被替换成lovers;</span></span>
<span class="line"><span> &amp; 保存搜索字符用来替换其他字符，如s/love/**&amp;**/，love这成**love**;</span></span>
<span class="line"><span> \\&lt; 匹配单词的开始，如:/\\</span></span>
<span class="line"><span> \\&gt; 匹配单词的结束，如/love\\&gt;/匹配包含以love结尾的单词的行;</span></span>
<span class="line"><span> x\\{m\\} 重复字符x，m次，如：/0\\{5\\}/匹配包含5个0的行;</span></span>
<span class="line"><span> x\\{m,\\} 重复字符x，至少m次，如：/0\\{5,\\}/匹配至少有5个0的行;</span></span>
<span class="line"><span> x\\{m,n\\} 重复字符x，至少m次，不多于n次，如：/0\\{5,10\\}/匹配5~10个0的行;</span></span></code></pre></div><h2 id="sed-实战" tabindex="-1">Sed 实战 <a class="header-anchor" href="#sed-实战" aria-label="Permalink to &quot;Sed 实战&quot;">​</a></h2><h3 id="输出案例" tabindex="-1">输出案例 <a class="header-anchor" href="#输出案例" aria-label="Permalink to &quot;输出案例&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># sed [选项] &#39;命令&#39; files</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;p&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.txt</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   	# 输出所有内容, 等同于Linux下的 cat test.txt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;3p&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.txt</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  	# 只显示test.txt文本中第三行的内容</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;2，4p&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.txt</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 只显示test.txt文本中第二行到第四行的内容</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;p;n&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.txt</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 第二个n表示读入下一行内容，最终效果是显示所有奇数行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;n;p&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.txt</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 最终效果是显示所有偶数行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/the/p&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.txt</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 输出包含the的行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/[0-9]$/p&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.txt</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		# 输出以数字结尾的行</span></span></code></pre></div><h3 id="删除案例" tabindex="-1">删除案例 <a class="header-anchor" href="#删除案例" aria-label="Permalink to &quot;删除案例&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.txt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;5d&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		# 读取test.txt文本内容，删除第5行，并输出到屏幕（test.txt的内容没有改变）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.txt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;5,10d&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	# 读取test.txt文本内容，删除第5到10行，并输出到屏幕（test.txt的内容没有改变）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.txt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/the/d&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	# 读取test.txt文本内容，删除包含the的行，并输出到屏幕（test.txt的内容没有改变）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.txt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/^[A-Z]/d&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	# 读取test.txt文本内容，删除以大写字母开头的行，并输出到屏幕（test.txt的内容没有改变）</span></span></code></pre></div><h3 id="替换案例" tabindex="-1">替换案例 <a class="header-anchor" href="#替换案例" aria-label="Permalink to &quot;替换案例&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;s/the/THE/&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.txt</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		# 将第一个小写的the替换为大写的THE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;s/a/b/2&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.txt</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			# 将行中第2个a替换为b</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;s/the/THE/g&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.txt</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		# 将所有小写的the替换为大写的THE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;s/^/#/&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.txt</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			# 每行行首添加#号</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/girl/s/^/#/&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.txt</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		# 在包含girl的行首添加#号</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/13,14s/o/B/g&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.txt</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	# 13,到14行所有字符o替换成字符B</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/the/s/o/B/g&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.txt</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		# 所有包含the的行中的字符o替换成字符B</span></span></code></pre></div><p><strong>sed 用户实例</strong></p><p><strong>替换操作：s 命令</strong></p><p>替换文本中的字符串：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> sed &#39;s/book/books/&#39; file</span></span></code></pre></div><p><strong>-n 选项</strong>和<strong>p 命令</strong>一起使用表示只打印那些发生替换的行：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> sed -n &#39;s/test/TEST/p&#39; file</span></span></code></pre></div><p>直接编辑文件<strong>选项-i</strong>，会匹配 file 文件中每一行的第一个 book 替换为 books</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> sed -i &#39;s/book/books/g&#39; file</span></span></code></pre></div><p><strong>全面替换标记 g</strong></p><p>使用后缀 /g 标记会替换每一行中的所有匹配：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> sed &#39;s/book/books/g&#39; file</span></span></code></pre></div><p>当需要从第 N 处匹配开始替换时，可以使用 /Ng：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> echo sksksksksksk | sed &#39;s/sk/SK/2g&#39;</span></span>
<span class="line"><span> skSKSKSKSKSK</span></span>
<span class="line"><span> echo sksksksksksk | sed &#39;s/sk/SK/3g&#39;</span></span>
<span class="line"><span> skskSKSKSKSK</span></span>
<span class="line"><span> echo sksksksksksk | sed &#39;s/sk/SK/4g&#39;</span></span>
<span class="line"><span> skskskSKSKSK</span></span></code></pre></div><p><strong>定界符</strong></p><p>以上命令中字符 / 在 sed 中作为定界符使用，也可以使用任意的定界符</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> sed &#39;s:test:TEXT:g&#39;</span></span>
<span class="line"><span> sed &#39;s|test|TEXT|g&#39;</span></span></code></pre></div><p>定界符出现在样式内部时，需要进行转义：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> sed &#39;s/\\/bin/\\/usr\\/local\\/bin/g&#39;</span></span></code></pre></div><p><strong>删除操作：d 命令</strong></p><p>删除空白行：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> sed &#39;/^$/d&#39; file</span></span></code></pre></div><p>删除文件的第 2 行：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> sed &#39;2d&#39; file</span></span></code></pre></div><p>删除文件的第 2 行到末尾所有行：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> sed &#39;2,$d&#39; file</span></span></code></pre></div><p>删除文件最后一行：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> sed &#39;$d&#39; file</span></span></code></pre></div><p>删除文件中所有开头是 test 的行：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> sed &#39;/^test/&#39;d file</span></span></code></pre></div><p><strong>已匹配字符串标记&amp;</strong></p><p>正则表达式 \\w+ 匹配每一个单词，使用 [&amp;] 替换它，&amp; 对应于之前所匹配到的单词：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> echo this is a test line | sed &#39;s/\\w\\+/[&amp;]/g&#39;</span></span>
<span class="line"><span> [this] [is] [a] [test] [line]</span></span></code></pre></div><p>所有以 192.168.0.1 开头的行都会被替换成它自已加 localhost：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> sed &#39;s/^192.168.0.1/&amp;localhost/&#39; file 192.168.0.1localhost</span></span></code></pre></div><p><strong>子串匹配标记\\1</strong></p><p>匹配给定样式的其中一部分：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> echo this is digit 7 in a number | sed &#39;s/digit \\([0-9]\\)/\\1/&#39;</span></span>
<span class="line"><span> this is 7 in a number</span></span></code></pre></div><p>命令中 digit 7，被替换成了 7。样式匹配到的子串是 7，(..) 用于匹配子串，对于匹配到的第一个子串就标记为 \\1，依此类推匹配到的第二个结果就是 \\2，例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> echo aaa BBB | sed &#39;s/\\([a-z]\\+\\) \\([A-Z]\\+\\)/\\2 \\1/&#39;</span></span>
<span class="line"><span> BBB aaa</span></span></code></pre></div><p>love 被标记为 1，所有 loveable 会被替换成 lovers，并打印出来：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> sed -n &#39;s/\\(love\\)able/\\1rs/p&#39; file</span></span></code></pre></div><p><strong>组合多个表达式</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> sed &#39;表达式&#39; | sed &#39;表达式&#39;  等价于：</span></span>
<span class="line"><span> sed &#39;表达式; 表达式&#39;</span></span></code></pre></div><p><strong>引用</strong></p><p>sed 表达式可以使用单引号来引用，但是如果表达式内部包含变量字符串，就需要使用双引号。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> test=hello</span></span>
<span class="line"><span> echo hello WORLD | sed &quot;s/$test/HELLO&quot;</span></span>
<span class="line"><span> HELLO WORLD</span></span></code></pre></div><p><strong>选定行的范围：,（逗号）</strong></p><p>所有在模板 test 和 check 所确定的范围内的行都被打印：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> sed -n &#39;/test/,/check/p&#39; file</span></span></code></pre></div><p>打印从第 5 行开始到第一个包含以 test 开始的行之间的所有行：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> sed -n &#39;5,/^test/p&#39; file</span></span></code></pre></div><p>对于模板 test 和 west 之间的行，每行的末尾用字符串 aaa bbb 替换：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> sed &#39;/test/,/west/s/$/aaa bbb/&#39; file</span></span></code></pre></div><p><strong>多点编辑：e 命令</strong></p><p>-e 选项允许在同一行里执行多条命令：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> sed -e &#39;1,5d&#39; -e &#39;s/test/check/&#39; file</span></span></code></pre></div><p>上面 sed 表达式的第一条命令删除 1 至 5 行，第二条命令用 check 替换 test。命令的执行顺序对结果有影响。如果两个命令都是替换命令，那么第一个替换命令将影响第二个替换命令的结果。</p><p>和 -e 等价的命令是 --expression：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> sed --expression=&#39;s/test/check/&#39; --expression=&#39;/love/d&#39; file</span></span></code></pre></div><p><strong>从文件读入：r 命令</strong></p><p>file 里的内容被读进来，显示在与 test 匹配的行后面，如果匹配多行，则 file 的内容将显示在所有匹配行的下面：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> sed &#39;/test/r file&#39; filename</span></span></code></pre></div><p><strong>写入文件：w 命令</strong></p><p>在 example 中所有包含 test 的行都被写入 file 里：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> sed -n &#39;/test/w file&#39; example</span></span></code></pre></div><p><strong>追加（行下）：a\\命令</strong></p><p>将 this is a test line 追加到 以 test 开头的行后面：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> sed &#39;/^test/a\\this is a test line&#39; file</span></span></code></pre></div><p>在 test.conf 文件第 2 行之后插入 this is a test line：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> sed -i &#39;2a\\this is a test line&#39; test.conf</span></span></code></pre></div><p><strong>插入（行上）：</strong></p><p>i\\命令 将 this is a test line 追加到以 test 开头的行前面：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> sed &#39;/^test/i\\this is a test line&#39; file</span></span></code></pre></div><p>在 test.conf 文件第 5 行之前插入 this is a test line：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> sed -i &#39;5i\\this is a test line&#39; test.conf</span></span></code></pre></div><p><strong>下一个：n 命令</strong></p><p>如果 test 被匹配，则移动到匹配行的下一行，替换这一行的 aa，变为 bb，并打印该行，然后继续：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> sed &#39;/test/{ n; s/aa/bb/; }&#39; file</span></span></code></pre></div><p><strong>变形：y 命令</strong></p><p>把 1~10 行内所有 abcde 转变为大写，注意，正则表达式元字符不能使用这个命令：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> sed &#39;1,10y/abcde/ABCDE/&#39; file</span></span></code></pre></div><p><strong>退出：q 命令</strong></p><p>打印完第 10 行后，退出 sed sed &#39;10q&#39; file 保持和获取：h 命令和 G 命令 在 sed 处理文件的时候，每一行都被保存在一个叫模式空间的临时缓冲区中，除非行被删除或者输出被取消，否则所有被处理的行都将打印在屏幕上。接着模式空间被清空，并存入新的一行等待处理。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> sed -e &#39;/test/h&#39; -e &#39;$G&#39; file</span></span></code></pre></div><p>在这个例子里，匹配 test 的行被找到后，将存入模式空间，h 命令将其复制并存入一个称为保持缓存区的特殊缓冲区内。第二条语句的意思是，当到达最后一行后，G 命令取出保持缓冲区的行，然后把它放回模式空间中，且追加到现在已经存在于模式空间中的行的末尾。在这个例子中就是追加到最后一行。简单来说，任何包含 test 的行都被复制并追加到该文件的末尾。</p><p><strong>保持和互换：h 命令和 x 命令</strong></p><p>互换模式空间和保持缓冲区的内容。也就是把包含 test 与 check 的行互换：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> sed -e &#39;/test/h&#39; -e &#39;/check/x&#39; file</span></span></code></pre></div><p><strong>脚本 scriptfile</strong></p><p>sed 脚本是一个 sed 的命令清单，启动 Sed 时以-f 选项引导脚本文件名。Sed 对于脚本中输入的命令非常挑剔，在命令的末尾不能有任何空白或文本，如果在一行中有多个命令，要用分号分隔。以#开头的行为注释行，且不能跨行。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> sed [options] -f scriptfile file(s)</span></span></code></pre></div><p><strong>打印奇数行或偶数行</strong></p><p>方法 1：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> sed -n &#39;p;n&#39; test.txt  #奇数行 sed -n &#39;n;p&#39; test.txt  #偶数行</span></span></code></pre></div><p>方法 2：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> sed -n &#39;1~2p&#39; test.txt  #奇数行 sed -n &#39;2~2p&#39; test.txt  #偶数行</span></span></code></pre></div><p><strong>打印匹配字符串的下一行</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> grep -A 1 SCC URFILE</span></span>
<span class="line"><span> sed -n &#39;/SCC/{n;p}&#39; URFILE</span></span>
<span class="line"><span> awk &#39;/SCC/{getline; print}&#39; URFILE</span></span></code></pre></div><h2 id="reference" tabindex="-1">Reference <a class="header-anchor" href="#reference" aria-label="Permalink to &quot;Reference&quot;">​</a></h2><p><a href="https://blog.csdn.net/m0_58292366/article/details/124586128" target="_blank" rel="noreferrer">https://blog.csdn.net/m0_58292366/article/details/124586128</a></p>`,125),p=[n];function l(d,h,c,o,k,g){return e(),a("div",null,p)}const b=s(i,[["render",l]]);export{u as __pageData,b as default};
