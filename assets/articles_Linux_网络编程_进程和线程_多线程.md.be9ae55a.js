import{_ as s,o as n,c as a,O as l}from"./chunks/framework.571309da.js";const p="/assets/1048430-20170710134655212-558296442.c0437d68.png",d=JSON.parse('{"title":"多线程","description":"","frontmatter":{},"headers":[],"relativePath":"articles/Linux/网络编程/进程和线程/多线程.md","filePath":"articles/Linux/网络编程/进程和线程/多线程.md"}'),o={name:"articles/Linux/网络编程/进程和线程/多线程.md"},t=l('<h1 id="多线程" tabindex="-1">多线程 <a class="header-anchor" href="#多线程" aria-label="Permalink to &quot;多线程&quot;">​</a></h1><h2 id="线程概述" tabindex="-1">线程概述 <a class="header-anchor" href="#线程概述" aria-label="Permalink to &quot;线程概述&quot;">​</a></h2><p>线程是轻量级的进程（LWP: light weight process），在 Linux 环境下线程的本质仍是进程（都是用<code>task_struct</code>描述）。在计算机上运行的程序是一组指令及指令参数的组合，指令按照既定的逻辑控制计算机运行。操作系统会以进程为单位，分配系统资源，可以这样理解，<strong>进程是资源分配的最小单位，线程是操作系统调度执行的最小单位。</strong></p><p>1、进程有自己独立的地址空间，多个线程共用同一个地址空间</p><ul><li>线程更加节省系统资源，效率不仅可以保持的，而且能够更高</li><li>在一个地址空间中多个线程独享：每个线程都有属于自己的栈区，寄存器 (内核中管理的)</li><li>在一个地址空间中多个线程共享：代码段，堆区，全局数据区，打开的文件 (文件描述符表) 都是线程共享的</li></ul><p>2、线程是程序的最小执行单位，进程是操作系统中最小的资源分配单位</p><ul><li>每个进程对应一个虚拟地址空间，一个进程只能抢一个 CPU 时间片</li><li>一个地址空间中可以划分出多个线程，在有效的资源基础上，能够抢更多的 CPU 时间片</li></ul><p><img src="'+p+`" alt="img"></p><p>3、CPU 的调度和切换：线程的上下文切换比进程要快的多</p><ul><li>上下文切换：进程 / 线程分时复用 CPU 时间片，在切换之前会将上一个任务的状态进行保存，下次切换回这个任务的时候，加载这个状态继续运行，任务从保存到再次加载这个过程就是一次上下文切换。</li></ul><p>4、线程更加廉价，启动速度更快，退出也快，对系统资源的冲击小。</p><blockquote><p>在处理多任务程序的时候使用多线程比使用多进程要更有优势，但是线程并不是越多越好，如何控制线程的个数呢？</p><ul><li><p>文件 IO 操作：文件 IO 对 CPU 是使用率不高，因此可以分时复用 CPU 时间片，线程的个数 = 2 * CPU 核心数 (效率最高)</p></li><li><p>处理复杂的算法 (主要是 CPU 进行运算，压力大)，线程的个数 = CPU 的核心数 (效率最高)</p></li></ul></blockquote><h2 id="线程创建" tabindex="-1">线程创建 <a class="header-anchor" href="#线程创建" aria-label="Permalink to &quot;线程创建&quot;">​</a></h2><h3 id="线程函数" tabindex="-1">线程函数 <a class="header-anchor" href="#线程函数" aria-label="Permalink to &quot;线程函数&quot;">​</a></h3><p>每一个线程都有一个唯一的线程 ID，ID 类型为 <code>pthread_t</code>，这个 ID 是一个无符号长整形数，如果想要得到当前线程的线程 ID，可以调用如下函数：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pthread_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pthread_self</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">	// 返回当前线程的线程ID</span></span></code></pre></div><p>在一个进程中调用线程创建函数，就可得到一个子线程，和进程不同，需要给每一个创建出的线程指定一个处理函数，否则这个线程无法工作。</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">pthread.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pthread_create</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">pthread_t</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">thread</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">pthread_attr_t</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">attr</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                   </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;font-style:italic;">start_routine</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">arg</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Compile and link with -pthread, 线程库的名字叫pthread, 全名: libpthread.so libptread.a</span></span></code></pre></div><p><code>thread</code>: 传出参数，是无符号长整形数，线程创建成功，会将线程 ID 写入到这个指针指向的内存中</p><p><code>attr</code>: 线程的属性，一般情况下使用默认属性即可，写 NULL</p><p><code>start_routine</code>: 函数指针，创建出的子线程的处理动作，也就是该函数在子线程中执行。</p><p><code>arg</code>: 作为实参传递到 <code>start_routine </code>指针指向的函数内部</p><p><code>返回值</code>：线程创建成功返回 0，创建失败返回对应的错误号</p><h3 id="创建线程" tabindex="-1">创建线程 <a class="header-anchor" href="#创建线程" aria-label="Permalink to &quot;创建线程&quot;">​</a></h3><p>下面是创建线程的示例代码，在创建过程中一定要保证编写的线程函数与规定的函数指针类型一致：<code>void *(*start_routine) (void *)</code></p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">pthread.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdio.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdlib.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">string.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">unistd.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 子线程的处理代码</span></span>
<span class="line"><span style="color:#C792EA;">void*</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">working</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arg</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">我是子线程，线程ID: %ld</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pthread_self</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">子线程：%d</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nullptr;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">argc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">argv</span><span style="color:#89DDFF;">[])</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 1. 创建一个子线程</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">pthread_t</span><span style="color:#A6ACCD;"> tid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 子线程会调用working函数执行，不会执行下面主函数内的代码</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">pthread_create</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">tid</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nullptr,</span><span style="color:#A6ACCD;"> working</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nullptr);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">子线程ID: %ld</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> tid</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">主线程ID: %ld</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pthread_self</span><span style="color:#89DDFF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 如果不加sleep()，主线程会先一步退出，虚拟地址空间被释放</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 导致子线程没有执行完毕，就被一并销毁</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 关于pthread_exit()请参考下面的线程退出</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // pthread_exit(NULL);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Compile and link with -pthread, 线程库的名字叫pthread, 全名: libpthread.so libptread.a</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># pthread_create 函数的定义在某一个库中, 编译的时候需要加库名 pthread</span></span>
<span class="line"><span style="color:#FFCB6B;">gcc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">main.cpp</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-o</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">main</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-lpthread</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">./main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">子线程创建成功，线程ID:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">140530594834176</span></span>
<span class="line"><span style="color:#FFCB6B;">我是主线程，线程ID:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">140530612868928</span></span>
<span class="line"><span style="color:#FFCB6B;">我是子线程，线程ID:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">140530594834176</span></span>
<span class="line"><span style="color:#FFCB6B;">子线程：0</span></span>
<span class="line"><span style="color:#FFCB6B;">子线程：1</span></span>
<span class="line"><span style="color:#82AAFF;">...</span></span></code></pre></div><p>主线程一直在运行，执行期间创建出了子线程，说明主线程有 CPU 时间片，**在这个时间片内将代码执行完毕了，主线程就退出了。**子线程被创建出来之后需要抢<code>cpu</code>时间片, 抢不到就不能运行，<strong>如果主线程退出了, 虚拟地址空间就被释放了, 子线程就一并被销毁了。但是如果某一个子线程退出了, 主线程仍在运行, 虚拟地址空间依旧存在。</strong></p><p>得到的结论：<strong>在没有人为干预的情况下，虚拟地址空间的生命周期和主线程是一样的，与子线程无关。</strong></p><p>目前的解决方案：让子线程执行完毕，主线程再退出，可以在主线程中添加挂起函数 <code>sleep()</code>;</p><h2 id="线程退出" tabindex="-1">线程退出 <a class="header-anchor" href="#线程退出" aria-label="Permalink to &quot;线程退出&quot;">​</a></h2><p>在编写多线程程序的时候，如果想要让线程退出，但是不会导致虚拟地址空间的释放（针对于主线程），我们就可以调用线程库中的线程退出函数，只要调用该函数当前线程就马上退出了，<strong>并且不会影响到其他线程的正常运行，不管是在子线程或者主线程中都可以使用。</strong></p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">pthread.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pthread_exit</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">retval</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>参数：线程退出的时候携带的数据，当前子线程的主线程会得到该数据。如果不需要使用，指定为 NULL</p><h2 id="线程回收" tabindex="-1">线程回收 <a class="header-anchor" href="#线程回收" aria-label="Permalink to &quot;线程回收&quot;">​</a></h2><h3 id="线程函数-1" tabindex="-1">线程函数 <a class="header-anchor" href="#线程函数-1" aria-label="Permalink to &quot;线程函数&quot;">​</a></h3><p>线程和进程一样，子线程退出的时候其内核资源主要由主线程回收，线程库中提供的线程回收函叫做 <code>pthread_join()</code>，这个函数是一个阻塞函数，<strong>如果还有子线程在运行，调用该函数就会阻塞</strong>，子线程退出函数解除阻塞进行资源的回收**，函数被调用一次，只能回收一个子线程，如果有多个子线程则需要循环进行回收。**</p><p>另外通过线程回收函数还可以获取到子线程退出时传递出来的数据，函数原型如下：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">pthread.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 这是一个阻塞函数, 子线程在运行,调用这个函数就阻塞</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 子线程退出, 函数解除阻塞, 回收对应的子线程资源, 类似于回收进程使用的函数 wait()</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pthread_join</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">pthread_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">thread</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">**</span><span style="color:#A6ACCD;font-style:italic;">retval</span><span style="color:#89DDFF;">);</span></span></code></pre></div><ul><li><code>thread</code>: 要被回收的子线程的线程 ID</li><li><code>retval</code>: 二级指针，指向一级指针的地址，是一个传出参数，这个地址中存储了 <code>pthread_exit () </code>传递出的数据，如果不需要这个参数，可以指定为 NULL</li><li>返回值：线程回收成功返回 0，回收失败返回错误号。</li></ul><p><strong>在子线程退出的时候可以使用 <code>pthread_exit() </code>的参数将数据传出，在回收这个子线程的时候可以通过 <code>pthread_join() </code>的第二个参数来接收子线程传递出的数据。接收数据有很多种处理方式，下面来列举几种：</strong></p><h3 id="使用子线程栈" tabindex="-1">使用子线程栈 <a class="header-anchor" href="#使用子线程栈" aria-label="Permalink to &quot;使用子线程栈&quot;">​</a></h3><p>通过函数 <code>pthread_exit(void *retval); </code>可以得知，子线程退出的时候，需要将数据记录到一块内存中，通过参数传出的是存储数据的内存的地址，而不是具体数据，由因为参数是 <code>void*</code> 类型，所有这个万能指针可以指向任意类型的内存地址。先来看第一种方式，将子线程退出数据保存在子线程自己的栈区：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// pthread_join.c</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">pthread.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdio.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdlib.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">string.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">unistd.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> id</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">id</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">age</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">id</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">),</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">age</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 子线程的处理代码</span></span>
<span class="line"><span style="color:#C792EA;">void*</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">working</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arg</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">我是子线程，线程ID: %ld</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pthread_self</span><span style="color:#89DDFF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 创建一个对象，存储在线程的栈上</span></span>
<span class="line"><span style="color:#A6ACCD;">  Person </span><span style="color:#82AAFF;">p</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">19</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 将对象的地址传递给主线程的pthread_join();</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">pthread_exit</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 代码执行不到这个位置</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nullptr;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">argc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">argv</span><span style="color:#89DDFF;">[])</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 1. 创建一个子线程</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">pthread_t</span><span style="color:#A6ACCD;"> tid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 子线程会调用working函数执行，不会执行下面主函数内的代码</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">pthread_create</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">tid</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nullptr,</span><span style="color:#A6ACCD;"> working</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nullptr);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">子线程ID: %ld</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> tid</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">主线程ID: %ld</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pthread_self</span><span style="color:#89DDFF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> ptr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nullptr;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 如果tid线程在运行，pthread_join()就会一直阻塞</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">pthread_join</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">tid</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">ptr</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 打印信息</span></span>
<span class="line"><span style="color:#A6ACCD;">  Person</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> p </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Person</span><span style="color:#89DDFF;">*)</span><span style="color:#A6ACCD;">ptr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">子线程返回的数据：id: %d, age: %d</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> p</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> p</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">子线程资源被成功回收...</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><blockquote><p><strong>通过打印的日志可以发现，在主线程中没有没有得到子线程返回的数据信息</strong>，具体原因是这样的：</p><p>如果多个线程共用同一个虚拟地址空间，每个线程在栈区都有一块属于自己的内存，相当于栈区被这几个线程平分了，当线程退出，线程在栈区的内存也就被回收了，<strong>因此随着子线程的退出，写入到栈区的数据也就被释放了。</strong></p></blockquote><h3 id="使用全局变量-静态变量-堆" tabindex="-1">使用全局变量/静态变量/堆 <a class="header-anchor" href="#使用全局变量-静态变量-堆" aria-label="Permalink to &quot;使用全局变量/静态变量/堆&quot;">​</a></h3><p>位于同一虚拟地址空间中的线程，虽然不能共享栈区数据，但是可以共享全局数据区和堆区数据，因此在子线程退出的时候可以将传出数据存储到全局变量、静态变量或者堆内存中。在下面的例子中将数据存储到了堆区中：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 子线程的处理代码</span></span>
<span class="line"><span style="color:#C792EA;">void*</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">working</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arg</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">我是子线程，线程ID: %ld</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pthread_self</span><span style="color:#89DDFF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 创建一个对象，存储在线程的栈上</span></span>
<span class="line"><span style="color:#A6ACCD;">  Person</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> p </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">19</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 将对象的地址传递给主线程的pthread_join();</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">pthread_exit</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 代码执行不到这个位置</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nullptr;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="使用主线程栈" tabindex="-1">使用主线程栈 <a class="header-anchor" href="#使用主线程栈" aria-label="Permalink to &quot;使用主线程栈&quot;">​</a></h3><p>**虽然每个线程都有属于自己的栈区空间，但是位于同一个地址空间的多个线程是可以相互访问对方的栈空间上的数据的。**由于很多情况下还需要在主线程中回收子线程资源，所以主线程一般都是最后退出，基于这个原因在下面的程序中将子线程返回的数据保存到了主线程的栈区内存中：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// pthread_join.c</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">pthread.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdio.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdlib.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">string.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">unistd.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> id</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> age</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">(){};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">id</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">age</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">id</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">),</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">age</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 子线程的处理代码</span></span>
<span class="line"><span style="color:#C792EA;">void*</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">working</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arg</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  Person</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> p </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Person</span><span style="color:#89DDFF;">*)</span><span style="color:#A6ACCD;">arg</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  p</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  p</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">age </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">19</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 将对象的地址传递给主线程的pthread_join();</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">pthread_exit</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 代码执行不到这个位置</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nullptr;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">argc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">argv</span><span style="color:#89DDFF;">[])</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 1. 创建一个子线程</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">pthread_t</span><span style="color:#A6ACCD;"> tid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  Person p</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 创建线程，将主线程栈上的对象传到子线程内</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">pthread_create</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">tid</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nullptr,</span><span style="color:#A6ACCD;"> working</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> ptr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nullptr;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 如果tid线程在运行，pthread_join()就会一直阻塞</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">pthread_join</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">tid</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">ptr</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  Person</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> pp </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Person</span><span style="color:#89DDFF;">*)</span><span style="color:#A6ACCD;">ptr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 通过p或者ptr都可以读出数据</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">子线程返回的数据：id: %d, age: %d</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> p</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> p</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">子线程返回的数据：id: %d, age: %d</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> pp</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> pp</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">子线程资源被成功回收...</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在上面的程序中，调用 <code>pthread_create()</code> 创建子线程，并将主线程中栈空间变量 p 的地址传递到了子线程中，在子线程中将要传递出的数据写入到了这块内存中。也就是说在程序的 main() 函数中，通过指针变量 ptr 或者通过结构体变量 p 都可以读出子线程传出的数据。</p><h2 id="线程分离" tabindex="-1">线程分离 <a class="header-anchor" href="#线程分离" aria-label="Permalink to &quot;线程分离&quot;">​</a></h2><p>在某些情况下，程序中的主线程有属于自己的业务处理流程，如果让主线程负责子线程的资源回收，调用 <code>pthread_join()</code> 只要子线程不退出主线程就会一直被阻塞，主要线程的任务也就不能被执行了。</p><p>在线程库函数中为我们提供了线程分离函数<code> pthread_detach()</code>，调用这个函数之后指定的子线程就可以和主线程分离，当子线程退出的时候，其占用的内核资源就被系统的其他进程接管并回收了。<strong>线程分离之后在主线程中使用 pthread_join() 就回收不到子线程资源了。</strong></p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">pthread.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 参数就子线程的线程ID, 主线程就可以和这个子线程分离了</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pthread_detach</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">pthread_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">thread</span><span style="color:#89DDFF;">);</span></span></code></pre></div><h2 id="线程取消" tabindex="-1">线程取消 <a class="header-anchor" href="#线程取消" aria-label="Permalink to &quot;线程取消&quot;">​</a></h2><p>线程取消的意思就是在某些特定情况下在一个线程中杀死另一个线程。使用这个函数杀死一个线程需要分两步：</p><ul><li>在线程 A 中调用线程取消函数<code> pthread_cancel()</code>，指定杀死线程 B，这时候线程 B 是死不了的</li><li>在线程 B 中进程一次系统调用（从用户区切换到内核区），否则线程 B 可以一直运行。</li></ul><p>这其实和七步断肠散、含笑半步癫的功效是一样的，吃了毒药不动或者不笑也没啥事儿</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">pthread.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 参数是要杀死的线程ID，返回值：函数调用成功返回 0，调用失败返回非 0 错误号。</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pthread_cancel</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">pthread_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">thread</span><span style="color:#89DDFF;">);</span></span></code></pre></div><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 子线程的处理代码</span></span>
<span class="line"><span style="color:#C792EA;">void*</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">working</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arg</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 这个函数会调用系统函数, 因此这是个间接的系统调用</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">我是子线程, 线程ID: %ld</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pthread_self</span><span style="color:#89DDFF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 下面代码不会执行</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello...</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nullptr;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 1. 创建一个子线程</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">pthread_t</span><span style="color:#A6ACCD;"> tid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">pthread_create</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">tid</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nullptr,</span><span style="color:#A6ACCD;"> working</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nullptr);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 杀死子线程, 如果子线程中做系统调用, 子线程就结束了</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">pthread_cancel</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">tid</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 让主线程自己退出即可</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">pthread_exit</span><span style="color:#89DDFF;">(NULL);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="线程id比较" tabindex="-1">线程ID比较 <a class="header-anchor" href="#线程id比较" aria-label="Permalink to &quot;线程ID比较&quot;">​</a></h2><p>在 Linux 中线程 ID 本质就是一个无符号长整形，因此可以直接使用比较操作符比较两个线程的 ID，但是线程库是可以跨平台使用的，在某些平台上 pthread_t 可能不是一个单纯的整形，这中情况下比较两个线程的 ID 必须要使用比较函数，函数原型如下：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">pthread.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pthread_equal</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">pthread_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">t1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">pthread_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">t2</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>参数：t1 和 t2 是要比较的线程的线程 ID</p><p>返回值：如果两个线程 ID 相等返回非 0 值，如果不相等返回 0</p>`,67),e=[t];function c(r,D,y,F,i,C){return n(),a("div",null,e)}const h=s(o,[["render",c]]);export{d as __pageData,h as default};
