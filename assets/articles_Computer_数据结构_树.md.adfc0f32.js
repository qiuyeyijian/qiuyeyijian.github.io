import{_ as s,v as n,b as a,R as l}from"./chunks/framework.53249f15.js";const p="/assets/2019122221174185.6f41440b.png",h=JSON.parse('{"title":"树","description":"","frontmatter":{},"headers":[],"relativePath":"articles/Computer/数据结构/树.md","filePath":"articles/Computer/数据结构/树.md"}'),o={name:"articles/Computer/数据结构/树.md"},t=l(`<h1 id="树" tabindex="-1">树 <a class="header-anchor" href="#树" aria-label="Permalink to &quot;树&quot;">​</a></h1><h2 id="二叉树" tabindex="-1">二叉树 <a class="header-anchor" href="#二叉树" aria-label="Permalink to &quot;二叉树&quot;">​</a></h2><blockquote><p>二叉树的递归定义：</p><ol><li>要么二叉树没有根结点，是一棵空树</li><li>要么二叉树由根结点、左子树、右子树组成，且左子树和右子树都是二叉树。</li></ol></blockquote><p><strong>注意区分二叉树与度为2的树</strong></p><p>对于树来说，结点的子树是不区分左右顺序的。因此度为2的树只能说明树中每个结点的子结点个数不超过2.</p><p>对于二叉树，不仅满足每个结点的子结点个数不超过2，而且<strong>左右子树是严格区分的</strong>，不能随意交换左右子树位置。</p><h3 id="二叉树创建" tabindex="-1">二叉树创建 <a class="header-anchor" href="#二叉树创建" aria-label="Permalink to &quot;二叉树创建&quot;">​</a></h3><p>使用层次遍历创建二叉树比较方便，但是编写代码时需要注意一个问题。</p><p>每当申请一个新结点时，它的左右两个孩子指针都是NULL。所以如果只是将子结点的指针入队，入队时的内容就为NULL。那么出队的时候也出NULL，就无法分辨入队的是属于哪个结点的子结点指针。无法形成二叉树。</p><p>为了避免这种情况，我们将指向子结点的指针的地址（指向子结点的二级指针）入队，用以辨别这是哪个结点的子结点指针。</p><p>比如对于第一个结点，输入了它的两个子结点的的指针的地址。随后出队的时候出的就是指向第一个结点的左子结点的指针的地址，通过&lt;*地址&gt;的取该地址内的内容我们就可以去控制它的左子结点指针指向。</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">BiNode</span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">newNode</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  BiNode</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> n </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> BiNode</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  n</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 初始状态下没有左右孩子，也就是该结点的左右指针指向NULL</span></span>
<span class="line"><span style="color:#A6ACCD;">  n</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">lchild </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> n</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">rchild </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NULL;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> n</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 根据层次遍历创建二叉树</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">init</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">BiTree</span><span style="color:#C792EA;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">root</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">len</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  queue</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">BiNode</span><span style="color:#89DDFF;">**&gt;</span><span style="color:#A6ACCD;"> qu</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">  // 注意队列里存的是指针的地址，也就是二级指针</span></span>
<span class="line"><span style="color:#A6ACCD;">  qu</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> len</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    BiNode</span><span style="color:#89DDFF;">**</span><span style="color:#F07178;"> n </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">qu</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">front</span><span style="color:#89DDFF;">();</span><span style="color:#676E95;font-style:italic;">  // 去除一个指针</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">qu</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pop</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">n </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">newNode</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">]);</span><span style="color:#676E95;font-style:italic;">    // 改变指针的指向</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">qu</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#89DDFF;">(&amp;(*</span><span style="color:#F07178;">n</span><span style="color:#89DDFF;">)-&gt;</span><span style="color:#A6ACCD;">lchild</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">  // 将左右孩子指针的地址入队</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">qu</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#89DDFF;">(&amp;(*</span><span style="color:#F07178;">n</span><span style="color:#89DDFF;">)-&gt;</span><span style="color:#A6ACCD;">rchild</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="二叉树遍历" tabindex="-1">二叉树遍历 <a class="header-anchor" href="#二叉树遍历" aria-label="Permalink to &quot;二叉树遍历&quot;">​</a></h2><p>如果一个二叉树的先序遍历序列与后序遍历序列正好相反，则该二叉树一定满足所有的结点全部没有左子树或者所有的结点全部没有右子树，即二叉树的高度等于结点数。</p><h3 id="树和二叉树遍历对应关系" tabindex="-1">树和二叉树遍历对应关系 <a class="header-anchor" href="#树和二叉树遍历对应关系" aria-label="Permalink to &quot;树和二叉树遍历对应关系&quot;">​</a></h3><table><thead><tr><th>树</th><th>二叉树</th><th>森林</th></tr></thead><tbody><tr><td>先序遍历</td><td>先序遍历</td><td>先序遍历</td></tr><tr><td>后序遍历</td><td>中序遍历</td><td>中序遍历</td></tr></tbody></table><p>树的先序对应二叉树的先序，树的后序对应二叉树的中序。</p><h3 id="二叉树层序遍历" tabindex="-1">二叉树层序遍历 <a class="header-anchor" href="#二叉树层序遍历" aria-label="Permalink to &quot;二叉树层序遍历&quot;">​</a></h3><p>递归版本</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * struct TreeNode {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *	int val;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *	struct TreeNode *left;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *	struct TreeNode *right;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * };</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Solution</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">root</span><span style="color:#676E95;font-style:italic;"> TreeNode类 </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#C792EA;font-style:italic;">@return</span><span style="color:#676E95;font-style:italic;"> int整型vector&lt;vector&lt;&gt;&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">vector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">vector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">levelOrder</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">TreeNode</span><span style="color:#C792EA;">*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">root</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // write code here</span></span>
<span class="line"><span style="color:#F07178;">        vector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">vector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F07178;"> res</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">dfs</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">res</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> root</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">        // 采用深度优先遍历的方案</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> res</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">dfs</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">vector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">vector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">TreeNode</span><span style="color:#C792EA;">*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">root</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">level</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">root </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">NULL)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">                    // 判断根节点是否是NULL，是则返回</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">level </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">size</span><span style="color:#89DDFF;">())</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push_back</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">{}</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">  // 判断是否需要在res中多填一向量组，因为我们下面要用索引访问</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">level</span><span style="color:#89DDFF;">].</span><span style="color:#82AAFF;">push_back</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">val</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">            // 用level决定将当前的结点值放置到哪一个索引对应的res的子向量中</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">dfs</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">res</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">left</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> level</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">              // 继续递归左子树（左子树必须先递归）</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">dfs</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">res</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">right</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> level</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">             // 继续递归右子树</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>递推版本</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Solution</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#C792EA;font-style:italic;">@param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">root</span><span style="color:#676E95;font-style:italic;"> TreeNode类 </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * </span><span style="color:#C792EA;font-style:italic;">@return</span><span style="color:#676E95;font-style:italic;"> int整型vector&lt;vector&lt;&gt;&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">vector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">vector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">levelOrder</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">TreeNode</span><span style="color:#C792EA;">*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">root</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // write code here</span></span>
<span class="line"><span style="color:#F07178;">        vector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">vector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F07178;"> ans</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">queue</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">TreeNode</span><span style="color:#89DDFF;">*&gt;</span><span style="color:#F07178;"> qu</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">qu</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">root</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">        </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#89DDFF;">(!</span><span style="color:#A6ACCD;">qu</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">empty</span><span style="color:#89DDFF;">())</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">    // 如果队列非空</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> n </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">qu</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">size</span><span style="color:#89DDFF;">();</span><span style="color:#676E95;font-style:italic;">   // 获取每一层的结点数</span></span>
<span class="line"><span style="color:#F07178;">            vector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> tmp</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            TreeNode</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> p</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">n</span><span style="color:#89DDFF;">--)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">    // 处理n个结点</span></span>
<span class="line"><span style="color:#F07178;">                p </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">qu</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">front</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">tmp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push_back</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">val</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">                </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">                // 下一层结点入队</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">nullptr)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#A6ACCD;">qu</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">left</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">right</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">nullptr)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#A6ACCD;">qu</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">right</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">qu</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pop</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">            </span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">ans</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push_back</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">tmp</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> ans</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><h2 id="完全二叉树" tabindex="-1">完全二叉树 <a class="header-anchor" href="#完全二叉树" aria-label="Permalink to &quot;完全二叉树&quot;">​</a></h2><h3 id="性质" tabindex="-1">性质 <a class="header-anchor" href="#性质" aria-label="Permalink to &quot;性质&quot;">​</a></h3><p>如果对一棵有n个结点的<strong>完全二叉树</strong>（其深度为$\\lceil log_2(n+1) \\rceil $ ）的结点按层序编号（从第 1 层到第$\\lceil log_2(n+1) \\rceil $）层，每层从左到右），对任一结点 $i \\left( 1\\leq i \\leq n\\right)$ 有：</p><ol><li>如果 i = 1, 则结点 i 是二叉树的根， 无双亲；如果 i &gt; 1，则其双亲是结点 [i/2]</li><li>如果 2i &gt; n，则结点 i 无左孩子（结点 i 为 叶子结点）；否则其左孩子是结点2i</li><li>如果2i + 1 &gt; n, 则结点 i 无右孩子；否则其右孩子是结点 2i + 1</li><li><strong>以上性质只适用于完全二叉树，一半的二叉树没有这些特性。</strong></li></ol><blockquote><p><strong>完全二叉树的最后一个结点的编号是n，则它的父结点，也就是最后一个分支结点的编号为$\\lfloor n/2 \\rfloor$，则叶子结点个数为n-$\\lfloor n/2 \\rfloor$。</strong></p><p>例如，完全二叉树的最后一个结点的编号是1001，则它的父结点的编号为1001/2=500，则叶子结点个数为1001-500=501.</p></blockquote><p>$$ 度数和=边数=节点数-1 \\ 2n_2 + n_1 = n_0 + n_1 + n_2 - 1 \\ n_0 = n_2 + 1 $$</p><p>非空二叉树上第k层上至多有$2^{k-1}$个结点。</p><p>高度为h的二叉树至多有$2^h -1$个结点。</p><p>具有n个结点的完全二叉树的高度为$\\lceil log_2(n+1) \\rceil $</p><p>完全二叉树度为1的结点$n_1$只可能取1或0</p><p>最胖的树最矮，最瘦的树最高。</p><h3 id="遍历" tabindex="-1">遍历 <a class="header-anchor" href="#遍历" aria-label="Permalink to &quot;遍历&quot;">​</a></h3><p>任何一棵二叉树，无论先序、中序还是后序，左孩子一定在右孩子之前。如果两个不同的遍历次序之后，其中两个结点先后次序不一样，则说明这两个结点不是左右兄弟关系。例如当两个结点的前序序列为XY，后序序列为YX时，则X是Y的祖先。</p><p>前序遍历时需要借助栈。<strong>前序序列和后序序列的关系相当于以前序序列为入栈次序，以中序序列为出栈次序。</strong></p><p>中序序列可以与先序序列、后序序列、层序序列中任意一个来构建唯一的二叉树，而后三者两两搭配或是三个一起上均无法构建唯一的二叉树。原因是先序、后序、层序均是提供根结点，作用是相同的，都必须由中序序列来区分左右子树。“先序看最前，后序看最后，中序指示左右子树。”</p><h3 id="线索化" tabindex="-1">线索化 <a class="header-anchor" href="#线索化" aria-label="Permalink to &quot;线索化&quot;">​</a></h3><p>利用建立的线索二叉树找某个结点的前驱或者后继，仍<strong>不能有效解决先序线索二叉树找先序前驱和后序线索二叉树找后序后继。</strong></p><p>先序遍历（中左右）、中序遍历（左中右）的最后访问的结点都是左或右叶结点，叶结点是没有子树的，所以两个指针域空出来了，可以存放线索指针。但是后续遍历（左右中），最后访问的是子树的根结点，而子树根结点的两个指针域都指向子树了，所以不能空出来存放线索信息。</p><h2 id="表达式与二叉树" tabindex="-1">表达式与二叉树 <a class="header-anchor" href="#表达式与二叉树" aria-label="Permalink to &quot;表达式与二叉树&quot;">​</a></h2><p>表达式二叉树的先序遍历结果就是先缀表达式。同理，中序遍历是中缀表达式，后序遍历是后缀表达式。</p><p><a href="https://zhuanlan.zhihu.com/p/54670963" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/54670963</a></p><h3 id="输出带括号中缀表达式" tabindex="-1">输出带括号中缀表达式 <a class="header-anchor" href="#输出带括号中缀表达式" aria-label="Permalink to &quot;输出带括号中缀表达式&quot;">​</a></h3><p>算法思想：基于二叉树的中序遍历，但是我们要给关键位置加上左括号和右括号。除了根结点和叶子结点，遍历到其他结点的时候，在遍历左子树之前加左括号，遍历完右子树后加上右括号。</p><h3 id="二叉排序树-bst" tabindex="-1">二叉排序树（BST） <a class="header-anchor" href="#二叉排序树-bst" aria-label="Permalink to &quot;二叉排序树（BST）&quot;">​</a></h3><p>对二叉排序树进行中序遍历，可以得到一个递增的有序序列。</p><h3 id="树转成二叉树" tabindex="-1">树转成二叉树 <a class="header-anchor" href="#树转成二叉树" aria-label="Permalink to &quot;树转成二叉树&quot;">​</a></h3><blockquote><p>加线：在所有的兄弟结点之间加一条线</p><p>去线：对树中每个结点，只保留它与第一个孩子结点的连线，删除它与其他孩子结点之间的连线。</p><p>层次调整：以树的根结点为轴心，将整颗树顺时针旋转一定的角度，使之结构层次分明。比如结点A，保留第一个孩子B，成为左孩子，A的其余孩子均成为B的右孩子。</p></blockquote><p><img src="`+p+`" alt="在这里插入图片描述"></p><p><strong>任何一棵和树对应的二叉树，其右子树必定为空</strong></p><h3 id="中序遍历时间复杂度" tabindex="-1">中序遍历时间复杂度 <a class="header-anchor" href="#中序遍历时间复杂度" aria-label="Permalink to &quot;中序遍历时间复杂度&quot;">​</a></h3><p><a href="https://blog.csdn.net/qq_43152052/article/details/90111095" target="_blank" rel="noreferrer">https://blog.csdn.net/qq_43152052/article/details/90111095</a></p><h2 id="代码题" tabindex="-1">代码题 <a class="header-anchor" href="#代码题" aria-label="Permalink to &quot;代码题&quot;">​</a></h2><h3 id="满二叉树前序转后序" tabindex="-1">满二叉树前序转后序 <a class="header-anchor" href="#满二叉树前序转后序" aria-label="Permalink to &quot;满二叉树前序转后序&quot;">​</a></h3><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">preToPost</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">arr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">begin</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">end</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 保存根结点数值，留待最后输出，开始位置向后挪动一个位置</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 相当于将先序遍历头结点转变成后序遍历最后结点</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> root </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> arr</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">begin</span><span style="color:#89DDFF;">++];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 继续划分左右子树，递归</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 因为是满二叉树，中间位置正好是左右子树界限</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> mid </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">begin </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> end</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">begin </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> end</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">preToPost</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">arr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> begin</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> mid</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">preToPost</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">arr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> mid </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> end</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> %c</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> root</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div>`,56),e=[t];function c(r,F,y,D,i,A){return n(),a("div",null,e)}const d=s(o,[["render",c]]);export{h as __pageData,d as default};
