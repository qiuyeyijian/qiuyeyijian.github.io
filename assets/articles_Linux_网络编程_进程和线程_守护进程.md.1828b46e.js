import{_ as s,o as n,c as a,U as l}from"./chunks/framework.adbdbaa5.js";const C=JSON.parse('{"title":"守护进程","description":"","frontmatter":{},"headers":[],"relativePath":"articles/Linux/网络编程/进程和线程/守护进程.md","filePath":"articles/Linux/网络编程/进程和线程/守护进程.md"}'),p={name:"articles/Linux/网络编程/进程和线程/守护进程.md"},o=l(`<h1 id="守护进程" tabindex="-1">守护进程 <a class="header-anchor" href="#守护进程" aria-label="Permalink to &quot;守护进程&quot;">​</a></h1><p>守护进程（Daemon Process），也就是通常说的 Daemon 进程（精灵进程），是 Linux 中的后台服务进程。它是一个生存期较长的进程，通常独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。<strong>一般采用以 d 结尾的名字。</strong></p><h2 id="进程组" tabindex="-1">进程组 <a class="header-anchor" href="#进程组" aria-label="Permalink to &quot;进程组&quot;">​</a></h2><p>多个进程的集合就是进程组，这个组中必须有一个组长，组长就是进程组中的第一个进程，组长以外的都是普通的成员，每个进程组都有一个唯一的组 ID，进程组的 ID 和组长的 PID 是一样的。</p><p>进程组中的成员是可以转移的，如果当前进程组中的成员被转移到了其他的组，或者进制中的所有进程都退出了，那么这个进程组也就不存在了。如果进程组中组长死了，但是当前进程组中有其他进程，这个进程组还是继续存在的。下面介绍几个常用的进程组函数：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 得到当前进程所在的进程组的组 ID</span></span>
<span class="line"><span style="color:#C792EA;">pid_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getpgrp</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 获取指定的进程所在的进程组的组 ID，参数 pid 就是指定的进程</span></span>
<span class="line"><span style="color:#C792EA;">pid_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getpgid</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">pid_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">pid</span><span style="color:#89DDFF;">);</span></span></code></pre></div><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 将某个进程移动到其他进程组中或者创建新的进程组</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setpgid</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">pid_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">pid</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">pid_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">pgid</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p><code>pid</code>: 某个进程的进程 ID</p><p><code>pgid</code>: 某个进程组的组 ID</p><ul><li>如果 <code>pgid </code>对应的进程组存在，pid 对应的进程会移动到这个组中，pid != pgid</li><li>如果 <code>pgid </code>对应的进程组不存在，会创建一个新的进程组，因此要求 pid == pgid, 当前进程就是组长了</li></ul><p>返回值：函数调用成功返回 0，失败返回 - 1</p><h2 id="会话" tabindex="-1">会话 <a class="header-anchor" href="#会话" aria-label="Permalink to &quot;会话&quot;">​</a></h2><p>会话 (session) 是由一个或多个进程组组成的，一个会话可以对应一个控制终端，也可以没有。一个普通的进程可以调用 <code>setsid()</code> 函数使自己成为新 session 的领头进程（会长），并且这个 session 领头进程还会被放入到一个新的进程组中。先来看一下 setsid() 函数的原型:</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">unistd.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 获取某个进程所属的会话ID</span></span>
<span class="line"><span style="color:#C792EA;">pid_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getsid</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">pid_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">pid</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 将某个进程变成会话 =&gt;&gt; 得到一个守护进程</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 使用哪个进程调用这个函数, 这个进程就会变成一个会话</span></span>
<span class="line"><span style="color:#C792EA;">pid_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setsid</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">);</span></span></code></pre></div><blockquote><p><strong>使用这个函数的注意事项:</strong></p><p>调用这个函数的进程不能是组长进程，如果是该函数调用失败，如果保证这个函数能调用成功呢？</p><ul><li>先 fork () 创建子进程，终止父进程，让子进程调用这个函数</li></ul><p>如果调用这个函数的进程不是进程组长，会话创建成功</p><ul><li>这个进程会变成当前会话中的第一个进程，同时也会变成新的进程组的组长</li><li>该函数调用成功之后，当前进程就脱离了控制终端，因此不会阻塞终端</li></ul></blockquote><h2 id="创建守护进程" tabindex="-1">创建守护进程 <a class="header-anchor" href="#创建守护进程" aria-label="Permalink to &quot;创建守护进程&quot;">​</a></h2><p>如果要创建一个守护进程，标准步骤如下，部分操作可以根据实际需求进行取舍：</p><p>1、创建子进程，让父进程退出</p><ul><li>因为父进程有可能是组长进程，不符合条件，也没有什么利用价值，退出即可</li><li>子进程没有任何职务，目的是让子进程最终变成一个会话，最终就会得到守护进程</li></ul><p>2、通过子进程创建新的会话，调用函数 <code>setsid ()</code>，脱离控制终端，变成守护进程</p><p>3、改变当前进程的工作目录 (可选项，不是必须要做的)</p><ul><li><p>某些文件系统可以被卸载，比如: U 盘，移动硬盘，进程如果在这些目录中运行，运行期间这些设备被卸载了，运行的进程也就不能正常工作了。</p></li><li><p>修改当前进程的工作目录需要调用函数 <code>chdir()</code></p></li></ul><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">chdir</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">path</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>4、重新设置文件的掩码 (可选项，不是必须要做的)</p><ul><li><p>掩码: umask, 在创建新文件的时候需要和这个掩码进行运算，去掉文件的某些权限</p></li><li><p>设置掩码需要使用函数 umask()</p></li></ul><p>5、关闭 / 重定向文件描述符 (不做也可以，但是建议做一下)</p><ul><li><p>启动一个进程，文件描述符表中默认有三个被打开了，对应的都是当前的终端文件</p></li><li><p>因为进程通过调用 setsid () 已经脱离了当前终端，因此关联的文件描述符也就没用了，可以关闭</p></li></ul><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">close</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">STDIN_FILENO</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">close</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">STDOUT_FILENO</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">close</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">STDERR_FILENO</span><span style="color:#89DDFF;">);</span></span></code></pre></div><ul><li>重定向文件描述符 (和关闭二选一): 改变文件描述符关联的默认文件，让他们指向一个特殊的文件 /dev/null，只要把数据扔到这个特殊的设备文件中，数据被被销毁了</li></ul><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> fd </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">open</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/dev/null</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> O_RDWR</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 重定向之后, 这三个文件描述符就和当前终端没有任何关系了</span></span>
<span class="line"><span style="color:#82AAFF;">dup2</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">fd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> STDIN_FILENO</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">dup2</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">fd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> STDOUT_FILENO</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">dup2</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">fd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> STDERR_FILENO</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>6、根据实际需求在守护进程中执行某些特定的操作</p><h2 id="守护进程的应用" tabindex="-1">守护进程的应用 <a class="header-anchor" href="#守护进程的应用" aria-label="Permalink to &quot;守护进程的应用&quot;">​</a></h2><p>写一个守护进程，每隔 2s 获取一次系统时间，并将得到的时间写入到磁盘文件中。</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">fcntl.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">signal.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdio.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdlib.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">string.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">sys/stat.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">sys/time.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">time.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">unistd.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 信号的处理动作</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">writeFile</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">num</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 得到系统时间</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">time_t</span><span style="color:#A6ACCD;"> seconds </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">time</span><span style="color:#89DDFF;">(NULL);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 时间转换, 总秒数 -&gt; 可以识别的时间字符串</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">tm</span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;"> loc </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">localtime</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">seconds</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // sprintf();</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> curtime </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">asctime</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">loc</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">  // 自带换行</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 打开一个文件, 如果文件不存在, 就创建, 文件需要有追加属性</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // ./对应的是哪个目录? /home/robin</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 0664 &amp; ~022</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> fd </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">open</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./time+++++++.log</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> O_WRONLY </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> O_CREAT </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> O_APPEND</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0664</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">write</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">fd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> curtime</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">strlen</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">curtime</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">close</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">fd</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 1. 创建子进程, 杀死父进程</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">pid_t</span><span style="color:#A6ACCD;"> pid </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fork</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">pid </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 父进程</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">exit</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">  // kill(getpid(), 9); raise(9); abort();</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 2. 子进程, 将其变成会话, 脱离当前终端</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">setsid</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 3. 修改进程的工作目录, 修改到一个不能被修改和删除的目录中 /home/robin</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">chdir</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/home/robin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 4. 设置掩码, 在进程中创建文件的时候这个掩码就起作用了</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">umask</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">022</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 5. 重定向和终端关联的文件描述符 -&gt; /dev/null</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> fd </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">open</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/dev/null</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> O_RDWR</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">dup2</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">fd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> STDIN_FILENO</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">dup2</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">fd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> STDOUT_FILENO</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">dup2</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">fd</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> STDERR_FILENO</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 5. 委托内核捕捉并处理将来发生的信号-SIGALRM(14)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sigaction</span><span style="color:#A6ACCD;"> act</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  act</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sa_flags </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  act</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sa_handler </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> writeFile</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">sigemptyset</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">act</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sa_mask</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">sigaction</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">SIGALRM</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">act</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NULL);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 6. 设置定时器</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">itimerval</span><span style="color:#A6ACCD;"> val</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  val</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">it_value</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tv_sec </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  val</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">it_value</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tv_usec </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  val</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">it_interval</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tv_sec </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  val</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">it_interval</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tv_usec </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">setitimer</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ITIMER_REAL</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">val</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NULL);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div>`,34),e=[o];function t(c,r,D,y,F,i){return n(),a("div",null,e)}const d=s(p,[["render",t]]);export{C as __pageData,d as default};
