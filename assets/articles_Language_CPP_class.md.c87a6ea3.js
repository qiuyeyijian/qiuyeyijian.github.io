import{_ as s,o as a,c as n,O as l}from"./chunks/framework.4afe7240.js";const A=JSON.parse('{"title":"类","description":"","frontmatter":{},"headers":[],"relativePath":"articles/Language/CPP/class.md","filePath":"articles/Language/CPP/class.md"}'),p={name:"articles/Language/CPP/class.md"},o=l(`<h1 id="类" tabindex="-1">类 <a class="header-anchor" href="#类" aria-label="Permalink to &quot;类&quot;">​</a></h1><h2 id="基础知识" tabindex="-1">基础知识 <a class="header-anchor" href="#基础知识" aria-label="Permalink to &quot;基础知识&quot;">​</a></h2><p>对象的复制，就是定义一个新对象时，用另外一个老对象里面的内容初始化。</p><p>默认参都必须出现在非默认参数的右侧，一旦开始为某个参数指定默认值，则它右侧的所有参数都必须指定默认值。</p><h3 id="隐式转换和explicit" tabindex="-1">隐式转换和explicit <a class="header-anchor" href="#隐式转换和explicit" aria-label="Permalink to &quot;隐式转换和explicit&quot;">​</a></h3><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Time</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">private</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> a</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 加上explicit 表示不能利用构造函数进行隐式转换</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">explicit</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Time</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 类内声明，类外定义（实现）</span></span>
<span class="line"><span style="color:#FFCB6B;">Time</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">Time</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    a </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> x</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">argc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">argv</span><span style="color:#89DDFF;">[])</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /* 以下两条语句去掉构造函数前面的explicit 就正确了 */</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  //   Time t = {1};      错误，进行了隐式类型转换</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  //    Time t = 1;         错误，进行了隐式类型转换</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="构造函数初始化列表" tabindex="-1">构造函数初始化列表 <a class="header-anchor" href="#构造函数初始化列表" aria-label="Permalink to &quot;构造函数初始化列表&quot;">​</a></h3><p>初始化列表在函数体执行之前就执行，提倡优先使用初始化列表，而不是使用传统的构造函数体内赋值。因为这样可以减少不必要的函数调用、重载等操作，效率更高。</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Time</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">private</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> ta</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> tb</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">Time</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">ta</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">),</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">tb</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">){}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">Time</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 这种写法只能用于构造函数, 且初始化顺序和成员变量定义顺序相同</span></span>
<span class="line"><span style="color:#FFCB6B;">Time</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">Time</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> y</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> : </span><span style="color:#82AAFF;">ta</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">tb</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    //...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="inline、const、mutable、this与static" tabindex="-1">inline、const、mutable、this与static <a class="header-anchor" href="#inline、const、mutable、this与static" aria-label="Permalink to &quot;inline、const、mutable、this与static&quot;">​</a></h2><h3 id="成员函数inline" tabindex="-1">成员函数inline <a class="header-anchor" href="#成员函数inline" aria-label="Permalink to &quot;成员函数inline&quot;">​</a></h3><p>一般推荐是类内声明，类外实现。但是如果在类内实现成员函数，则该成员函数会被作为inline内联函数处理，所以在类内实现的函数要尽可能简单。</p><h3 id="成员函数末尾的const" tabindex="-1">成员函数末尾的const <a class="header-anchor" href="#成员函数末尾的const" aria-label="Permalink to &quot;成员函数末尾的const&quot;">​</a></h3><p>如果告诉系统，该成员函数不会修改对象里面的任何成员变量，也就是不会修改类对象的任何状态，则在成员函数的声明和实现末尾都要加const。</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Time</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">private</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> ta</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> tb</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">Time</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 构造函数初始化列表</span></span>
<span class="line"><span style="color:#FFCB6B;">Time</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">Time</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> y</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> : </span><span style="color:#82AAFF;">ta</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">tb</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// const成员函数</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Time</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ta:%d, tb:%d</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ta</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> tb</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">argc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;font-style:italic;">argv</span><span style="color:#89DDFF;">[])</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Time </span><span style="color:#82AAFF;">t1</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">  // const 对象只能调用const成员函数</span></span>
<span class="line"><span style="color:#A6ACCD;">  Time </span><span style="color:#82AAFF;">t2</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">        // 非const对象只要权限允许，都可以调用</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>**普通函数（非成员函数）末尾不能加const，编译无法通过。**因为const在函数末尾的意思是“成员函数不会修改该对象里面任何成员变量的值”，普通函数没有对象的概念。</p><h3 id="mutable" tabindex="-1">mutable <a class="header-anchor" href="#mutable" aria-label="Permalink to &quot;mutable&quot;">​</a></h3><p>const成员函数有其存在的价值，比如可以被const对象调用。如果设计一个能被const对象调用的const成员函数，同时又希望能修改成员变量的值，则需要用mutable修饰成员变量。</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">mutable</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> tc</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">modify</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    tc</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="返回自身对象的引用-this" tabindex="-1">返回自身对象的引用 this <a class="header-anchor" href="#返回自身对象的引用-this" aria-label="Permalink to &quot;返回自身对象的引用 this&quot;">​</a></h3><p>this用在成员函数中是一个隐藏起来的函数参数，表示的是指向本对象的指针，*this表示该对象。</p><p>this本身是一个指针常量，总是指向这个对象本身。</p><p>this指针只能在普通成员函数中使用，全局函数、静态函数等都不能使用。</p><p>利用this可以实现链式调用</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 添加成员函数声明</span></span>
<span class="line"><span style="color:#FFCB6B;">Time</span><span style="color:#C792EA;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">z</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 类外实现该成员函数</span></span>
<span class="line"><span style="color:#FFCB6B;">Time</span><span style="color:#C792EA;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Time</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">z</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  ta </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> z</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  tb </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> z</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*this;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 测试</span></span>
<span class="line"><span style="color:#FFCB6B;">Time</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">t</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 首先给成员变量加10，然后打印</span></span>
<span class="line"><span style="color:#A6ACCD;">t</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">();</span></span></code></pre></div><h2 id="重载运算符、拷贝赋值运算符与析构函数" tabindex="-1">重载运算符、拷贝赋值运算符与析构函数 <a class="header-anchor" href="#重载运算符、拷贝赋值运算符与析构函数" aria-label="Permalink to &quot;重载运算符、拷贝赋值运算符与析构函数&quot;">​</a></h2><h3 id="重载运算符" tabindex="-1">重载运算符 <a class="header-anchor" href="#重载运算符" aria-label="Permalink to &quot;重载运算符&quot;">​</a></h3><p>重载运算符本质上是函数，名字是<code>operator+运算符</code>，例如<code>operator==</code>。</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">operator</span><span style="color:#FFCB6B;">==</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Time</span><span style="color:#C792EA;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">t</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 重载 == 运算符</span></span>
<span class="line"><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Time</span><span style="color:#89DDFF;">::</span><span style="color:#F78C6C;">operator</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">==</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Time</span><span style="color:#C792EA;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">t</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   // ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 重载赋值运算符</span></span>
<span class="line"><span style="color:#FFCB6B;">Time</span><span style="color:#C792EA;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Time</span><span style="color:#89DDFF;">::</span><span style="color:#F78C6C;">operator</span><span style="color:#FFCB6B;">=</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Time</span><span style="color:#C792EA;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">t</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    //...</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*this;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="子类、调用顺序、访问等级与函数遮蔽" tabindex="-1">子类、调用顺序、访问等级与函数遮蔽 <a class="header-anchor" href="#子类、调用顺序、访问等级与函数遮蔽" aria-label="Permalink to &quot;子类、调用顺序、访问等级与函数遮蔽&quot;">​</a></h3><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Human</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">private</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> age</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  string name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">Human</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">Human</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Man</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">public</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Human</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">private</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">Man</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p><strong>先执行父类的构造函数，再执行子类的构造函数。</strong></p><p>对于父类来讲，尤其是父类的成员函数：</p><ul><li>private：不想让外面访问</li><li>protect：想让自己的子类访问</li><li>public：公开访问</li></ul><p>在C++继承中，子类会遮蔽父类中的同名函数。要想调用父类函数就需要使用双冒号指明作用域了。</p><h2 id="父类指针、虚函数、多态性与析构函数" tabindex="-1">父类指针、虚函数、多态性与析构函数 <a class="header-anchor" href="#父类指针、虚函数、多态性与析构函数" aria-label="Permalink to &quot;父类指针、虚函数、多态性与析构函数&quot;">​</a></h2><p>当创建一个子类的时候，系统先调用父类的构造函数，再调用子类的构造函数。当销毁该对象时，先调用子类的析构函数，在调用父类的析构函数。</p><p>用派生类对象为一个基类对象初始化或者赋值时，只有该派生类对象的基类部分会被复制或者赋值，派生类部分将被忽略掉。</p><h3 id="父类指针与子类指针" tabindex="-1">父类指针与子类指针 <a class="header-anchor" href="#父类指针与子类指针" aria-label="Permalink to &quot;父类指针与子类指针&quot;">​</a></h3><p>父类指针可以指向一个子类对象，反之不行。</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Human</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> h </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Man</span><span style="color:#89DDFF;">();</span></span></code></pre></div><h3 id="虚函数" tabindex="-1">虚函数 <a class="header-anchor" href="#虚函数" aria-label="Permalink to &quot;虚函数&quot;">​</a></h3><p>用父类的指针调用一个虚成员函数时，执行的是动态绑定。所谓动态，表示的就是在程序运行的时候（运行到调用eat函数这行代码时）才能知道调用了哪个子类的eat函数（虚成员函数）。</p><p>由于是在程序运行的时候才知道调用了哪个虚函数，所以虚函数必须写他的定义部分。</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Human</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">private</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> age</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  string name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">virtual</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">eat</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  //   virtual void eat() final;      // 如果后面加final，则子类不能再覆盖此函数</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Male</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">public</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Human</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">private</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 会覆盖父类中的同名同参虚函数</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">virtual</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">eat</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">override</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Female</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">public</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Human</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">private</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 会覆盖父类中的同名同参虚函数</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">virtual</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">eat</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">override</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Human</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">eat</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Human</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Male</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">eat</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Male</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Female</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">eat</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Female</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">argc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">argv</span><span style="color:#89DDFF;">[])</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  Human</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> human_ptr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> Human</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  human_ptr</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">eat</span><span style="color:#89DDFF;">();</span><span style="color:#676E95;font-style:italic;"> /* Human */</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">delete</span><span style="color:#A6ACCD;"> human_ptr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  human_ptr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> Male</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  human_ptr</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">eat</span><span style="color:#89DDFF;">();</span><span style="color:#676E95;font-style:italic;"> /* Male */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  human_ptr</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">Human::</span><span style="color:#82AAFF;">eat</span><span style="color:#89DDFF;">();</span><span style="color:#676E95;font-style:italic;"> /* Human */</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">delete</span><span style="color:#A6ACCD;"> human_ptr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="多态性" tabindex="-1">多态性 <a class="header-anchor" href="#多态性" aria-label="Permalink to &quot;多态性&quot;">​</a></h3><p>多态性知识针对虚函数说的。多态性体现在：</p><p>（1）子类重新定义（覆盖/重写）父类的成员函数，同时父类和子类中又把这个成员函数声明为了virtual虚函数。</p><p>（2）根据具体执行到的代码行，才能找到动态绑定到父类指针的对象，这个对象可以是父类对象，也可以是子类对象。之后，系统内部实际上要查类的“虚函数表”，根据虚函数表找到虚函数的入口地址。</p><h3 id="纯虚函数与抽象类" tabindex="-1">纯虚函数与抽象类 <a class="header-anchor" href="#纯虚函数与抽象类" aria-label="Permalink to &quot;纯虚函数与抽象类&quot;">​</a></h3><p>纯虚函数是在父类中声明的虚函数：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">virtual</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">eat</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">			// 这是一个纯虚函数</span></span></code></pre></div><p>这种带有纯虚函数的类就叫做抽象类。抽象类不能生成对象，主要目的是统一管理子类（或者说建立一些供子类参照的标准或规范）</p><p>抽象类主要用来做父类，定义一些公共接口。**子类中必须要实现父类（抽象类）中定义的纯虚函数。**抽象类中的函数不写函数实现，推迟到子类中去写。</p><p>多态的实现是：父类指针指向子类对象。如果没有父类，也就不存在多态。纯虚函数也是虚函数，因此也是支持多态的。</p><h3 id="父类的析构函数一般写成虚函数" tabindex="-1">父类的析构函数一般写成虚函数 <a class="header-anchor" href="#父类的析构函数一般写成虚函数" aria-label="Permalink to &quot;父类的析构函数一般写成虚函数&quot;">​</a></h3><p><strong>唯有这样，当delete一个指向子类对象的父类指针是，才能保证系统能够依次调用子类的析构函数和父类的析构函数，从而保证对象内存被正确地释放。</strong></p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">vitrual </span><span style="color:#89DDFF;">~</span><span style="color:#82AAFF;">Human</span><span style="color:#89DDFF;">();</span></span></code></pre></div><p>用父类指针new一个子类对象，在delete的时候系统不会调用子类的析构函数，这就说明内存没有回收干净，存在内存泄露。</p><p>只有虚函数才能够做到用父类指针调用子类的虚函数。也正是由于这种特性，所以只要把析构函数声明为虚函数，系统内部就能够正确处理调用关系。</p><p>父类中析构函数的虚属性也会被继承给子类，C++中为了获得运行时的多态行为，所调用的成员函数必须是virtual的。</p><blockquote><ol><li><p>如果一个类想要做父类，务必给这个类写虚析构函数，否则会造成内存泄露问题。</p></li><li><p>虚函数会增加内存和执行效率上的开销，类里面定义虚函数，<strong>编译器就会给这个类增加虚函数表</strong>，则个表里面存放的是虚函数地址等信息。虚函数表里有很多表项，每一项都是一个指针，每个指针指向这个类里的各个虚函数的入口地址。</p></li></ol></blockquote><h3 id="rtti、dynamic-cast、typeid、type-info与虚函数表" tabindex="-1">RTTI、dynamic_cast、typeid、type_info与虚函数表 <a class="header-anchor" href="#rtti、dynamic-cast、typeid、type-info与虚函数表" aria-label="Permalink to &quot;RTTI、dynamic_cast、typeid、type_info与虚函数表&quot;">​</a></h3><h3 id="rtti是什么" tabindex="-1">RTTI是什么 <a class="header-anchor" href="#rtti是什么" aria-label="Permalink to &quot;RTTI是什么&quot;">​</a></h3><p>RTTI（Run Time Type Identification），运行时类型识别。也就是通过运行时类型识别，程序能够使用父类（基类）的指针或引用来检查这些指针或引用所指的对象的实际子（派生）类型。</p><p>RTTI可以看做系统提供出来的一种功能或者说是一种能力。这种功能或者能力通过两个运算符dynamic_cast 和 typeid 来实现，<strong>而且父类中必须要有虚函数。</strong></p><h3 id="dynamic-cast" tabindex="-1">dynamic_cast <a class="header-anchor" href="#dynamic-cast" aria-label="Permalink to &quot;dynamic_cast&quot;">​</a></h3><p><code>dynamic_cast</code>：能将父类的指针或者引用安全地转换为子类的指针或者引用。</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Human</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> human_ptr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> Human</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">Male</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> male </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">dynamic_cast&lt;</span><span style="color:#A6ACCD;">Male</span><span style="color:#89DDFF;">*&gt;(</span><span style="color:#A6ACCD;">human_ptr</span><span style="color:#89DDFF;">);</span></span></code></pre></div><h3 id="typeid" tabindex="-1">typeid <a class="header-anchor" href="#typeid" aria-label="Permalink to &quot;typeid&quot;">​</a></h3><p><code>typeid</code>：返回指针或者引用所指对象的实际类型。通过这个运算符可以获取对象的类型信息。这个运算符会返回一个常量对象的引用，这个常量对象的类型一般是标准库类型 type_info，其实type_info就是一个类。</p><h3 id="type-info" tabindex="-1">type_info <a class="header-anchor" href="#type-info" aria-label="Permalink to &quot;type_info&quot;">​</a></h3><p>type_info有个成员函数<code>name()</code>，用于获取类型名字信息。重载了两个运算符：<code>==</code>和<code>!=</code>用来比较类型是否相同。</p>`,73),e=[o];function t(c,r,y,F,i,D){return a(),n("div",null,e)}const d=s(p,[["render",t]]);export{A as __pageData,d as default};
