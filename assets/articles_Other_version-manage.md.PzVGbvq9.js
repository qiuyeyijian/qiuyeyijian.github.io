import{_ as e,c as o,o as c,V as d}from"./chunks/framework.fZt_wkQb.js";const h=JSON.parse('{"title":"使用 npm 的语义版本控制","description":"","frontmatter":{},"headers":[],"relativePath":"articles/Other/version-manage.md","filePath":"articles/Other/version-manage.md"}'),l={name:"articles/Other/version-manage.md"},i=d('<h1 id="使用-npm-的语义版本控制" tabindex="-1">使用 npm 的语义版本控制 <a class="header-anchor" href="#使用-npm-的语义版本控制" aria-label="Permalink to &quot;使用 npm 的语义版本控制&quot;">​</a></h1><p>如果 Node.js 软件包中有一件很棒的事情，那就是它们都同意使用语义版本控制作为版本编号。</p><p>语义版本控制的概念很简单：所有的版本都有 3 个数字：<code>x.y.z</code>。</p><ul><li>第一个数字是主版本。</li><li>第二个数字是次版本。</li><li>第三个数字是补丁版本。</li></ul><p>当发布新的版本时，不仅仅是随心所欲地增加数字，还要遵循以下规则：</p><ul><li>当进行不兼容的 API 更改时，则升级主版本。</li><li>当以向后兼容的方式添加功能时，则升级次版本。</li><li>当进行向后兼容的缺陷修复时，则升级补丁版本。</li></ul><p>该约定在所有编程语言中均被采用，每个 <code>npm</code> 软件包都必须遵守该约定，这一点非常重要，因为整个系统都依赖于此。</p><p>为什么这么重要？</p><p>因为 <code>npm</code> 设置了一些规则，可用于在 <code>package.json</code> 文件中选择要将软件包更新到的版本（当运行 <code>npm update</code> 时）。</p><p>规则使用了这些符号：</p><ul><li><code>^</code></li><li><code>~</code></li><li><code>&gt;</code></li><li><code>&gt;=</code></li><li><code>&lt;</code></li><li><code>&lt;=</code></li><li><code>=</code></li><li><code>-</code></li><li><code>||</code></li></ul><p>这些规则的详情如下：</p><ul><li><code>^</code>: 只会执行不更改最左边非零数字的更新。 如果写入的是 <code>^0.13.0</code>，则当运行 <code>npm update</code> 时，可以更新到 <code>0.13.1</code>、<code>0.13.2</code> 等，但不能更新到 <code>0.14.0</code> 或更高版本。 如果写入的是 <code>^1.13.0</code>，则当运行 <code>npm update</code> 时，可以更新到 <code>1.13.1</code>、<code>1.14.0</code> 等，但不能更新到 <code>2.0.0</code> 或更高版本。</li><li><code>~</code>: 如果写入的是 <code>〜0.13.0</code>，则当运行 <code>npm update</code> 时，会更新到补丁版本：即 <code>0.13.1</code> 可以，但 <code>0.14.0</code> 不可以。</li><li><code>&gt;</code>: 接受高于指定版本的任何版本。</li><li><code>&gt;=</code>: 接受等于或高于指定版本的任何版本。</li><li><code>&lt;=</code>: 接受等于或低于指定版本的任何版本。</li><li><code>&lt;</code>: 接受低于指定版本的任何版本。</li><li><code>=</code>: 接受确切的版本。</li><li><code>-</code>: 接受一定范围的版本。例如：<code>2.1.0 - 2.6.2</code>。</li><li><code>||</code>: 组合集合。例如 <code>&lt; 2.1 || &gt; 2.6</code>。</li></ul><p>可以合并其中的一些符号，例如 <code>1.0.0 || &gt;=1.1.0 &lt;1.2.0</code>，即使用 1.0.0 或从 1.1.0 开始但低于 1.2.0 的版本。</p><p>还有其他的规则：</p><ul><li>无符号: 仅接受指定的特定版本（例如 <code>1.2.1</code>）。</li><li><code>latest</code>: 使用可用的最新版本。</li></ul>',16),t=[i];function a(p,n,r,s,_,m){return c(),o("div",null,t)}const g=e(l,[["render",a]]);export{h as __pageData,g as default};
