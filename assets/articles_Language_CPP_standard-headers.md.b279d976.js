import{_ as s,o as a,c as n,O as l}from"./chunks/framework.9be35eee.js";const C=JSON.parse('{"title":"标准头文件","description":"","frontmatter":{},"headers":[],"relativePath":"articles/Language/CPP/standard-headers.md","filePath":"articles/Language/CPP/standard-headers.md"}'),p={name:"articles/Language/CPP/standard-headers.md"},o=l(`<h1 id="标准头文件" tabindex="-1">标准头文件 <a class="header-anchor" href="#标准头文件" aria-label="Permalink to &quot;标准头文件&quot;">​</a></h1><h2 id="stdio-h-cstdio" tabindex="-1">stdio.h/cstdio <a class="header-anchor" href="#stdio-h-cstdio" aria-label="Permalink to &quot;stdio.h/cstdio&quot;">​</a></h2><p>“stdio.h”是包含C语言中标准输入输出 （standard input &amp; output）函数接口的头文件，而C++语言中以示与传统C语言的区别，头文件名称改为了“cstdio”，实际上两个头文件中内容和功能是一样的。所以涉及到标准输入输出的操作时候，只需要包含以上两种头文件的其中一个。</p><blockquote><p>需要注意的是，VS2010（其它版本未测试）平台中scanf、printf等标准输入输出操作并不需要手动添加#include&lt;stdio.h&gt;头文件，直接使用函数也并不会报错。但是这是不标准的操作，并且一般网上笔试平台使用的都是gcc编译器，如果不添加头文件，很容易造成VS上调试运行成功的程序，在网上笔试平台调试会报错。</p></blockquote><p>“stdio.h”头文件中主要包含标准输入输出的函数接口，分为以下几个方面：</p><ol><li>文件访问 　fopen　freopen　fflush　fclose</li><li>二进制输入/输出 　fread fwrite</li><li>非格式化输入/输出 　fgetc/getc　fputc/putc　ungetc　fgets　fputs</li><li>格式化输入/输出 　scanf/fscanf/sscanf　printf/fprintf/sprintf　perror</li><li>文件定位 　ftell　fseek　fgetpos　fsetpos　rewind</li><li>错误处理 　feof　ferror</li><li>文件操作 　remove　rename　tmpfile</li></ol><p>跟文件操作相关的函数接口，笔试一般不需要重点掌握（即函数接口以f开头的），以了解为主。而下面函数接口需要牢记于心</p><h3 id="scanf-printf" tabindex="-1">scanf/printf <a class="header-anchor" href="#scanf-printf" aria-label="Permalink to &quot;scanf/printf&quot;">​</a></h3><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> nNum</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">scanf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">%d</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,&amp;</span><span style="color:#A6ACCD;">nNum</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">%d</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">nNum</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>%c——字符；　 　　%d——十进制整数；　 　　%u——无符号十进制整数； 　　%f ——浮点数；　 　　％o——八进制整数；　 　　%s——字符串； 　　%p——指针； 　　%%——百分号%</p><h3 id="sscanf-sprintf" tabindex="-1">sscanf/sprintf <a class="header-anchor" href="#sscanf-sprintf" aria-label="Permalink to &quot;sscanf/sprintf&quot;">​</a></h3><p>一般用在字符串格式化中，有点类似正则表达式。 　　<strong>sscanf是从一个字符串中读进与指定格式相符的数据。而sprintf是格式化的数据写入某个字符串中。</strong></p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> nzBuf</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#82AAFF;">sscanf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">123456</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">%4s</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> buf</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">  //取最大长度为4字节的字符串。</span></span>
<span class="line"><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">%s</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> buf</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">　         //结果：1234</span></span></code></pre></div><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> nzBuf</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">j</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">sprintf</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">nzBuf</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">%d+%d=5</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">j</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">%s</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">nzBuf</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">         //结果：2+3=5</span></span></code></pre></div><h3 id="putc-getc" tabindex="-1">putc/getc <a class="header-anchor" href="#putc-getc" aria-label="Permalink to &quot;putc/getc&quot;">​</a></h3><p>putc是输出一个字符到指定流中；getc是从流中获取字符。</p><p>这块除了和fgetc/fputc一样，从文件中读取/写入字符功能以外，一般和stdin/stdout联合使用。</p><p>stdin表示标准输入，一般就是指从键盘输入到缓冲区的东西。而stdout表示标准输出，一般表示显示在调试平台上的东西。</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> Buf</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">Buf </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getc</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">stdin</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">        //从键盘输入的字符流中读取第一位字符</span></span>
<span class="line"><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> msg[]</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">msg</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">])</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">putc</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">msg</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++],</span><span style="color:#A6ACCD;">stdout</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">//依次将msg中字符输出到显示平台上</span></span></code></pre></div><h3 id="ungetc" tabindex="-1">ungetc <a class="header-anchor" href="#ungetc" aria-label="Permalink to &quot;ungetc&quot;">​</a></h3><p>ungetc表示将读入的字符退回到输入流中。这个接口有很大的作用，尤其在一些面试题当中。一般也和stdin联合使用，ungetc(ch,stdin)表示将你读到的字符回退到输入流中。 　　详细使用，可以见下面博文介绍的例题：</p><blockquote><p><a href="http://blog.csdn.net/fx677588/article/details/52712417" target="_blank" rel="noreferrer">http://blog.csdn.net/fx677588/article/details/52712417</a>　读入一行不知道个数的数据</p></blockquote><h3 id="getchar-putchar" tabindex="-1">getchar/putchar <a class="header-anchor" href="#getchar-putchar" aria-label="Permalink to &quot;getchar/putchar&quot;">​</a></h3><p>从stdio流中读字符，相当于getc(stdin），它从标准输入里读取下一个字符。返回类型为int型，返回值为用户输入的ASCⅡ码，出错返回-1。</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getchar</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>putchar作用是向终端输出一个字符。其格式为<code>putchar(c)</code>。</p><p>其中c可以是被单引号（英文状态下）引起来的一个字符，可以是介于0~127之间的一个十进制整型数（包含0和127），也可以是事先用char定义好的一个字符型变量。</p><p>当输出正确的时候，返回输出字符转换为的unsigned int 值；而当输出错误的时候，返回 EOF（End of file）文件结束符</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> c</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">c</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">getchar</span><span style="color:#89DDFF;">()!=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">putchar</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">c</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">putchar</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="gets-puts" tabindex="-1">gets/puts <a class="header-anchor" href="#gets-puts" aria-label="Permalink to &quot;gets/puts&quot;">​</a></h3><p>**从终端读入获取字符串以及将字符串输出到终端上。尤其gets( )是很好的获取一行字符串的好应用，不会遇到空格停止录入数据，它的停止条件是遇到换行。C++11之后将其改成了gets_s形式，使该函数更加鲁棒安全。**两个函数的使用如下：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> input</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#82AAFF;">gets</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">input</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">//从键盘输入最多99个字符，不够提前加入字符串结束符</span></span>
<span class="line"><span style="color:#82AAFF;">puts</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello world!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> //标准输出</span></span></code></pre></div><h2 id="c语言stdio-h与stdlib-h的区别" tabindex="-1">C语言stdio.h与stdlib.h的区别 <a class="header-anchor" href="#c语言stdio-h与stdlib-h的区别" aria-label="Permalink to &quot;C语言stdio.h与stdlib.h的区别&quot;">​</a></h2><p>一、定位不同</p><p>1、stdlib.h是standard library标准库头文件，定位在通用工具函数。</p><p>2、stdio.h是standard input&amp;output标准输入输出头文件，定位在标准的输入输出工具函数。</p><p>二、封装函数不同</p><p>1、stdlib.h主要封装了malloc()、calloc()、realloc()、free()、system()、atoi()、atol()、rand()、srand()、exit()等函数。</p><p>2、stdio.h主要封装了getchar()、putchar()、scanf()、printf()、gets()、puts()、sprintf()等函数。</p><p>三、定义类型不同</p><p>1、stdlib.h定义了size_t、wchar_t、div_t、ldiv_t和lldiv_t五种类型。</p><p>2、stdio没有定义类型。</p><h2 id="reference" tabindex="-1">Reference <a class="header-anchor" href="#reference" aria-label="Permalink to &quot;Reference&quot;">​</a></h2><ul><li><a href="https://blog.csdn.net/FX677588/article/details/52957601" target="_blank" rel="noreferrer">C/C++笔试必须熟悉掌握的头文件系列（一）——stdio.h/cstdio_无鞋童鞋的博客-CSDN博客_c++中stdio.h</a></li><li></li></ul>`,44),t=[o];function e(c,r,i,D,F,y){return a(),n("div",null,t)}const h=s(p,[["render",e]]);export{C as __pageData,h as default};
